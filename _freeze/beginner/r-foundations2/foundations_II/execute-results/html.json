{
  "hash": "55475818c8000a2ae05054a360be5def",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R Language Basics II\"\nauthor: \"David Munoz Tord\"\ndescription: \"Advanced R programming concepts covering functions, control structures, and data manipulation\"\nengine: knitr\ndate: \"03/20/2025\"\nformat: live-html\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n## Functions: Your Code's Superpower\n\nFunctions in R are like the Force - they give you the power to create reusable code that can be called upon whenever needed. Think of them as your personal Jedi powers that you can use over and over again!\n\n### Creating Functions\n\nFunctions are created using the `function()` keyword, followed by arguments in parentheses and the function body in curly braces. It's like creating your own lightsaber - you need the right components and the right technique!\n\n```r\n# Basic function structure\ncalculate_power <- function(base_power, multiplier) {\n  total_power <- base_power * multiplier\n  return(total_power)\n}\n\n# Using the function\njedi_power <- calculate_power(80, 1.5)  # Returns 120\n```\n\n### Function Arguments\n\nFunctions can have:\n- Required arguments (like a lightsaber - you need it!)\n- Default arguments (like having a backup blaster)\n- Optional arguments (like that thermal detonator you hope you won't need)\n\n```r\n# Function with default arguments\ncalculate_force_power <- function(base_power, multiplier = 1.5, is_dark_side = FALSE) {\n  if (is_dark_side) {\n    total_power <- base_power * multiplier * 1.2  # Dark side bonus!\n  } else {\n    total_power <- base_power * multiplier\n  }\n  return(total_power)\n}\n\n# Using with different arguments\nlight_side <- calculate_force_power(80)  # Uses defaults\ndark_side <- calculate_force_power(80, is_dark_side = TRUE)  # Override default\n```\n\n### Exercise 1: Creating Functions\n\nCreate a function that calculates a character's total power level based on their base stats and equipment:\n\n\n\n::: {.cell exercise='ex_functions_1'}\n```{webr}\n#| exercise: ex_functions_1\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_functions_1\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nCreate a function that takes base stats and equipment bonuses as arguments. Remember to use the `function()` keyword and `return()` statement. It's like creating your own power calculator!\n:::\n:::\n\n::: { .solution exercise=\"ex_functions_1\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Create a function to calculate total power\ncalculate_character_power <- function(base_power, weapon_bonus = 0, armor_bonus = 0) {\n  total_power <- base_power + weapon_bonus + armor_bonus\n  return(total_power)\n}\n\n# Test the function\njedi_power <- calculate_character_power(80, 20, 10)  # Base 80 + Lightsaber 20 + Robes 10\nsith_power <- calculate_character_power(85, 25, 15)  # Base 85 + Red Lightsaber 25 + Armor 15\n\n# Print results\nprint(paste(\"Jedi Power Level:\", jedi_power))\nprint(paste(\"Sith Power Level:\", sith_power))\n```\n:::\n:::\n\n## Control Structures: The Force of Decision Making\n\nControl structures in R are like the Jedi Council - they help you make decisions and control the flow of your code. They're essential for creating complex programs that can adapt to different situations.\n\n### If-Else Statements\n\nThe `if-else` structure lets you make decisions based on conditions:\n\n```r\n# Basic if-else\ncheck_force_power <- function(power_level) {\n  if (power_level > 100) {\n    return(\"Master Jedi Level\")\n  } else if (power_level > 50) {\n    return(\"Padawan Level\")\n  } else {\n    return(\"Force Sensitive\")\n  }\n}\n\n# Using if-else\npower_status <- check_force_power(120)  # Returns \"Master Jedi Level\"\n```\n\n### Loops: The Repetitive Force\n\nLoops are like having a clone army - they let you repeat actions multiple times!\n\n#### For Loops\n\n```r\n# Basic for loop\nfor (i in 1:5) {\n  print(paste(\"Training Day\", i))\n}\n\n# For loop with a vector\njedi_council <- c(\"Yoda\", \"Mace Windu\", \"Obi-Wan\")\nfor (master in jedi_council) {\n  print(paste(master, \"is on the council\"))\n}\n```\n\n#### While Loops\n\n```r\n# While loop example\npower_level <- 50\nwhile (power_level < 100) {\n  print(paste(\"Current power level:\", power_level))\n  power_level <- power_level + 10\n}\n```\n\n### Exercise 2: Control Structures\n\nCreate a program that simulates a Jedi training session:\n\n\n\n::: {.cell exercise='ex_control_1'}\n```{webr}\n#| exercise: ex_control_1\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_control_1\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nUse if-else statements to check power levels and loops to simulate training sessions. Think of it as creating your own Jedi training program!\n:::\n:::\n\n::: { .solution exercise=\"ex_control_1\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Function to simulate Jedi training\nsimulate_training <- function(initial_power, training_days) {\n  current_power <- initial_power\n  \n  for (day in 1:training_days) {\n    # Random power increase (like meditation success)\n    power_increase <- sample(1:10, 1)\n    current_power <- current_power + power_increase\n    \n    # Check power level and give feedback\n    if (current_power >= 100) {\n      print(paste(\"Day\", day, \": Master Jedi achieved! Power level:\", current_power))\n    } else if (current_power >= 50) {\n      print(paste(\"Day\", day, \": Padawan level reached! Power level:\", current_power))\n    } else {\n      print(paste(\"Day\", day, \": Still training... Power level:\", current_power))\n    }\n  }\n  \n  return(current_power)\n}\n\n# Run the simulation\nfinal_power <- simulate_training(30, 10)\nprint(paste(\"Final power level:\", final_power))\n```\n:::\n:::\n\n## String Operations: The Power of Words\n\nString operations in R are like having a universal translator - they help you manipulate and transform text in various ways.\n\n### Basic String Operations\n\n```r\n# String concatenation\nfirst_name <- \"Luke\"\nlast_name <- \"Skywalker\"\nfull_name <- paste(first_name, last_name)  # Returns \"Luke Skywalker\"\n\n# String length\nnchar(full_name)  # Returns 13\n\n# Substring extraction\nsubstr(full_name, 1, 4)  # Returns \"Luke\"\n\n# Case conversion\ntoupper(full_name)  # Returns \"LUKE SKYWALKER\"\ntolower(full_name)  # Returns \"luke skywalker\"\n```\n\n### Regular Expressions\n\nRegular expressions are like having a Force-powered search tool:\n\n```r\n# Basic pattern matching\njedi_names <- c(\"Luke Skywalker\", \"Obi-Wan Kenobi\", \"Yoda\", \"Mace Windu\")\ngrep(\"Sky\", jedi_names)  # Returns 1 (position of \"Luke Skywalker\")\n\n# Pattern replacement\ngsub(\"Sky\", \"Force\", full_name)  # Returns \"Luke Forcewalker\"\n\n# Pattern matching with more detail\ngrepl(\"^[A-Z]\", jedi_names)  # Returns TRUE for names starting with capital letter\n```\n\n### Exercise 3: String Operations\n\nCreate a function that processes Jedi names and titles:\n\n\n\n::: {.cell exercise='ex_strings_1'}\n```{webr}\n#| exercise: ex_strings_1\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_strings_1\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nUse string functions like `paste()`, `substr()`, `gsub()`, and regular expressions to manipulate text. It's like creating your own Jedi name generator!\n:::\n:::\n\n::: { .solution exercise=\"ex_strings_1\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Function to process Jedi names\nprocess_jedi_name <- function(first_name, last_name, rank = \"Padawan\") {\n  # Create full name\n  full_name <- paste(first_name, last_name)\n  \n  # Add rank title\n  titled_name <- paste(rank, full_name)\n  \n  # Count characters\n  name_length <- nchar(full_name)\n  \n  # Create Jedi code name (first 3 letters of first name + last 2 of last name)\n  code_name <- paste(\n    substr(first_name, 1, 3),\n    substr(last_name, nchar(last_name)-1, nchar(last_name)),\n    sep = \"\"\n  )\n  \n  # Convert to uppercase for dramatic effect\n  code_name <- toupper(code_name)\n  \n  # Return results as a list\n  return(list(\n    full_name = full_name,\n    titled_name = titled_name,\n    name_length = name_length,\n    code_name = code_name\n  ))\n}\n\n# Test the function\njedi_info <- process_jedi_name(\"Luke\", \"Skywalker\", \"Master\")\nprint(jedi_info)\n```\n:::\n:::\n\n## Date and Time Operations: The Force of Time\n\nWorking with dates and times in R is like having a time-traveling DeLorean - it helps you manipulate temporal data with precision!\n\n### Basic Date Operations\n\n```r\n# Creating dates\nbirth_date <- as.Date(\"1977-05-25\")  # Star Wars release date\ncurrent_date <- Sys.Date()\n\n# Date arithmetic\ndays_since_release <- current_date - birth_date\n\n# Formatting dates\nformat(birth_date, \"%B %d, %Y\")  # Returns \"May 25, 1977\"\n\n# Extracting components\nyear <- format(birth_date, \"%Y\")\nmonth <- format(birth_date, \"%m\")\nday <- format(birth_date, \"%d\")\n```\n\n### Time Operations\n\n```r\n# Working with times\ncurrent_time <- Sys.time()\n\n# Formatting times\nformat(current_time, \"%H:%M:%S\")  # Returns current time in HH:MM:SS format\n\n# Time differences\ntime_diff <- difftime(current_time, birth_date, units = \"hours\")\n```\n\n### Exercise 4: Date and Time Operations\n\nCreate a function that calculates various time-based statistics for a Jedi's training period:\n\n\n\n::: {.cell exercise='ex_dates_1'}\n```{webr}\n#| exercise: ex_dates_1\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_dates_1\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nUse `as.Date()`, `Sys.Date()`, and date arithmetic functions to work with dates. Think of it as creating a Jedi training timeline!\n:::\n:::\n\n::: { .solution exercise=\"ex_dates_1\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Function to analyze Jedi training period\nanalyze_training_period <- function(start_date, end_date) {\n  # Convert dates if they're strings\n  start <- as.Date(start_date)\n  end <- as.Date(end_date)\n  \n  # Calculate various time differences\n  total_days <- as.numeric(end - start)\n  total_weeks <- floor(total_days / 7)\n  total_months <- floor(total_days / 30)\n  \n  # Format dates nicely\n  formatted_start <- format(start, \"%B %d, %Y\")\n  formatted_end <- format(end, \"%B %d, %Y\")\n  \n  # Create a summary\n  summary <- list(\n    start_date = formatted_start,\n    end_date = formatted_end,\n    total_days = total_days,\n    total_weeks = total_weeks,\n    total_months = total_months,\n    training_intensity = if(total_days < 30) \"Intensive\" else \"Standard\"\n  )\n  \n  return(summary)\n}\n\n# Test the function\ntraining_stats <- analyze_training_period(\"2024-01-01\", \"2024-03-01\")\nprint(training_stats)\n```\n:::\n:::\n\n## Missing Values: The Dark Side of Data\n\nMissing values in R are like the dark side of the Force - they're mysterious and need special handling!\n\n### Working with Missing Values\n\n```r\n# Creating vectors with missing values\npower_readings <- c(80, NA, 95, NA, 88)\n\n# Checking for missing values\nis.na(power_readings)  # Returns logical vector\n\n# Counting missing values\nsum(is.na(power_readings))  # Returns 2\n\n# Removing missing values\nclean_readings <- na.omit(power_readings)\n\n# Replacing missing values\npower_readings[is.na(power_readings)] <- 0  # Replace with 0\npower_readings[is.na(power_readings)] <- mean(power_readings, na.rm = TRUE)  # Replace with mean\n```\n\n### Exercise 5: Handling Missing Values\n\nCreate a function that processes a dataset with missing values:\n\n\n\n::: {.cell exercise='ex_missing_1'}\n```{webr}\n#| exercise: ex_missing_1\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_missing_1\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nUse `is.na()`, `na.omit()`, and other functions to handle missing values. Think of it as cleaning up corrupted data from a damaged holocron!\n:::\n:::\n\n::: { .solution exercise=\"ex_missing_1\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Function to process dataset with missing values\nprocess_force_readings <- function(readings) {\n  # Count missing values\n  missing_count <- sum(is.na(readings))\n  \n  # Calculate statistics before cleaning\n  original_mean <- mean(readings, na.rm = TRUE)\n  original_sd <- sd(readings, na.rm = TRUE)\n  \n  # Create cleaned dataset (remove NAs)\n  clean_readings <- na.omit(readings)\n  \n  # Calculate statistics after cleaning\n  clean_mean <- mean(clean_readings)\n  clean_sd <- sd(clean_readings)\n  \n  # Create a summary\n  summary <- list(\n    original_data = readings,\n    missing_count = missing_count,\n    original_stats = list(mean = original_mean, sd = original_sd),\n    clean_stats = list(mean = clean_mean, sd = clean_sd),\n    clean_data = clean_readings\n  )\n  \n  return(summary)\n}\n\n# Test the function\nforce_data <- c(80, NA, 95, NA, 88, 92, NA, 85)\nresults <- process_force_readings(force_data)\nprint(results)\n```\n:::\n:::\n\n## Formatting: Making Your Data Look Good\n\nFormatting in R is like having a protocol droid - it helps you present your data in a clean and organized way!\n\n### Number Formatting\n\n```r\n# Basic number formatting\npi_value <- pi\nformat(pi_value, digits = 2)  # Returns \"3.1\"\nformat(pi_value, digits = 4)  # Returns \"3.142\"\n\n# Currency formatting\nprice <- 42.99\nformat(price, nsmall = 2, prefix = \"$\")  # Returns \"$42.99\"\n\n# Scientific notation\nlarge_number <- 1234567\nformat(large_number, scientific = TRUE)  # Returns \"1.234567e+06\"\n```\n\n### Exercise 6: Data Formatting\n\nCreate a function that formats various types of data:\n\n\n\n::: {.cell exercise='ex_format_1'}\n```{webr}\n#| exercise: ex_format_1\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_format_1\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nUse `format()` function with different parameters to format numbers and text. Think of it as creating your own data presentation protocol!\n:::\n:::\n\n::: { .solution exercise=\"ex_format_1\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Function to format various types of data\nformat_data <- function(value, type = \"number\") {\n  if (type == \"number\") {\n    # Format as regular number\n    return(format(value, digits = 2))\n  } else if (type == \"currency\") {\n    # Format as currency\n    return(format(value, nsmall = 2, prefix = \"$\"))\n  } else if (type == \"percentage\") {\n    # Format as percentage\n    return(paste(format(value * 100, digits = 1), \"%\"))\n  } else if (type == \"scientific\") {\n    # Format in scientific notation\n    return(format(value, scientific = TRUE))\n  } else {\n    return(\"Invalid format type\")\n  }\n}\n\n# Test the function\nprint(format_data(3.14159, \"number\"))      # Returns \"3.14\"\nprint(format_data(42.99, \"currency\"))      # Returns \"$42.99\"\nprint(format_data(0.42, \"percentage\"))     # Returns \"42.0%\"\nprint(format_data(1234567, \"scientific\"))  # Returns \"1.234567e+06\"\n```\n:::\n:::\n\n## Capstone Project: The Ultimate Force Challenge\n\nNow it's time to combine all your Jedi training into one epic challenge! Create a comprehensive program that processes and analyzes Jedi training data.\n\n### Exercise 7: Jedi Training Analytics System\n\nCreate a complete system for analyzing Jedi training data:\n\n\n\n::: {.cell exercise='ex_capstone_1'}\n```{webr}\n#| exercise: ex_capstone_1\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_capstone_1\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nCombine functions, control structures, string operations, date handling, and data formatting to create a comprehensive system. Think of it as building your own Jedi Archives!\n:::\n:::\n\n::: { .solution exercise=\"ex_capstone_1\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Create a comprehensive Jedi training analytics system\njedi_analytics_system <- function() {\n  # Sample data\n  training_data <- data.frame(\n    name = c(\"Luke\", \"Leia\", \"Rey\", \"Anakin\", \"Obi-Wan\"),\n    start_date = as.Date(c(\"2024-01-01\", \"2024-01-15\", \"2024-02-01\", \n                          \"2024-02-15\", \"2024-03-01\")),\n    initial_power = c(30, 35, 40, 45, 50),\n    current_power = c(85, 80, 75, 90, 95),\n    training_days = c(60, 45, 30, 45, 30),\n    completed_trials = c(5, 4, 3, 6, 5)\n  )\n  \n  # Function to calculate training statistics\n  calculate_stats <- function(data) {\n    # Calculate power increase\n    data$power_increase <- data$current_power - data$initial_power\n    \n    # Calculate daily power increase\n    data$daily_increase <- data$power_increase / data$training_days\n    \n    # Calculate trial completion rate\n    data$trial_rate <- data$completed_trials / data$training_days\n    \n    return(data)\n  }\n  \n  # Function to format report\n  format_report <- function(data) {\n    # Calculate overall statistics\n    avg_power_increase <- mean(data$power_increase)\n    max_power_increase <- max(data$power_increase)\n    avg_trial_rate <- mean(data$trial_rate)\n    \n    # Create formatted report\n    report <- list(\n      summary_stats = list(\n        average_power_increase = format_data(avg_power_increase, \"number\"),\n        max_power_increase = format_data(max_power_increase, \"number\"),\n        average_trial_rate = format_data(avg_trial_rate, \"percentage\")\n      ),\n      individual_progress = data.frame(\n        name = data$name,\n        power_increase = format_data(data$power_increase, \"number\"),\n        daily_increase = format_data(data$daily_increase, \"number\"),\n        trial_rate = format_data(data$trial_rate, \"percentage\")\n      )\n    )\n    \n    return(report)\n  }\n  \n  # Process the data\n  processed_data <- calculate_stats(training_data)\n  final_report <- format_report(processed_data)\n  \n  return(final_report)\n}\n\n# Run the analytics system\nresults <- jedi_analytics_system()\nprint(results)\n```\n:::\n:::\n</rewritten_file> ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}