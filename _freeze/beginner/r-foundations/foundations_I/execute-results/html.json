{
  "hash": "80f7e13f6fa96a9eff727c688026529e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R Language Basics I\"\nauthor: \"David Munoz Tord\"\ndescription: \"Fundamentals of R programming covering introductory concepts to data frames\"\nengine: knitr\ndate: \"03/12/2025\"\nformat: live-html\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n## Introduction to R\n\nR is a powerful programming language for statistical computing and data analysis. Originally developed by statisticians Ross Ihaka and Robert Gentleman at the University of Auckland in the 1990s, R has become a leading tool for data science, statistical analysis, and data visualization.\n\nThink of R as the Swiss Army knife of the data world – it may not look as flashy as some newer tools, but it's powerful, reliable, and has a tool for every statistical job imaginable!\n\n### Key Features of R:\n\n- **Statistical Focus**: R was built specifically for statistical analysis and offers a vast array of statistical methods and tests. It's like having a statistical superhero at your fingertips!\n- **Graphics Capabilities**: Excellent for creating high-quality visualizations with packages like ggplot2. Your data deserves a glow-up too!\n- **Extensibility**: Thousands of packages available through CRAN (Comprehensive R Archive Network) extend R's functionality. It's like the App Store for statistics nerds!\n- **Open Source**: Free and open-source, with a strong community of users and developers. In a world of expensive software, R is like Robin Hood – taking powerful statistical capabilities from the wealthy software giants and giving them to everyone.\n- **Interactive Environment**: The R console provides immediate feedback, making it ideal for data exploration. It's like having a conversation with your data!\n\n### The R Console and Basic Operations\n\nWhen you start R, you're presented with a console where you can enter commands. The console interprets each command and returns results immediately.\n\nR functions as a sophisticated calculator, capable of handling basic arithmetic operations and much more. Here are some basic operations you can perform:\n\n```r\n# Addition: Like when Darth Vader and Luke Skywalker finally team up\n5 + 3  # Returns 8\n\n# Subtraction: Like when you realize how much Starbucks costs monthly\n10 - 4  # Returns 6\n\n# Multiplication: What happens to your problems when you tell your mom\n6 * 7  # Returns 42 (also the answer to the ultimate question of life, the universe, and everything)\n\n# Division: Sharing pizza with friends\n20 / 5  # Returns 4\n\n# Exponentiation (Power): Like when a superhero discovers their abilities\n2^3  # Returns 8\n```\n\n### Exercise 1: Basic R Operations\n\nPerform the following operations in R:\n1. Add 25 and 75\n2. Multiply 10 by 5\n3. Divide 100 by 4\n\n\n\n::: {.cell exercise='ex_intro_1'}\n```{webr}\n#| exercise: ex_intro_1\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_intro_1\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nUse the standard arithmetic operators: `+` for addition, `*` for multiplication, and `/` for division. Even Jar Jar Binks could do this!\n:::\n:::\n\n::: { .solution exercise=\"ex_intro_1\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Addition\n25 + 75\n\n# Multiplication\n10 * 5\n\n# Division\n100 / 4\n```\n:::\n:::\n\n### Comments and Output in R\n\nR allows you to add comments to your code to explain what it does. Comments start with the `#` symbol and are ignored by R when executing code, like how everyone ignores the terms and conditions before clicking \"I agree.\"\n\nR automatically prints the result of a calculation or command if it's not assigned to a variable. This feature is useful for quick calculations and checking intermediate results.\n\nYou can also explicitly print values using the `print()` function, which is especially useful when working with scripts where automatic printing doesn't occur.\n\n```r\n# This is a comment that R ignores (like when your cat ignores you)\n\n# Automatic printing example\n42  # R will output 42, the answer to everything according to \"The Hitchhiker's Guide to the Galaxy\"\n\n# Print function example\nprint(\"Help me Obi-Wan Kenobi, you're my only hope\")  # Explicitly prints the message\n```\n\n### Exercise 2: Printing and Comments\n\nPractice printing values and adding comments to your code.\n\n\n\n::: {.cell exercise='ex_intro_2'}\n```{webr}\n#| exercise: ex_intro_2\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_intro_2\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nUse `#` to add comments. R will automatically print the result of an expression if it's not assigned to a variable. You can also use the `print()` function, which is like using a megaphone for your data.\n:::\n:::\n\n::: { .solution exercise=\"ex_intro_2\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# This is a comment - it's like whispering to your code\n\n# Automatic printing\n42  # The answer to life, the universe, and everything\n\n# Print function\nprint(\"I find your lack of comments disturbing\")\n\n# Multiple operations\n2 + 2  # This is the way\nprint(10 * 5)  # May the force be with you\n```\n:::\n:::\n\n## Names and Assignment\n\nIn R, you can store values in variables for later use. This is done using the assignment operator, which can be either `<-` or `=`. The `<-` operator is more commonly used in R programming.\n\n### Variable Assignment\n\nWhen you assign a value to a variable, R stores that value in memory. You can then use the variable name to refer to that value in subsequent operations. It's like giving a name to your pet dragon so you can call it later.\n\n```r\n# Assign value 10 to variable x\nx <- 10\n\n# Use x in a calculation\nx + 5  # Returns 15\n\n# Reassign x to a new value\nx <- 20\nx  # Now returns 20, because x had a change of heart\n```\n\nWhile both `<-` and `=` work for assignment in most contexts, `<-` is preferred in R programming because it clearly distinguishes assignment from the `==` equality test and because it works in all contexts. It's like the difference between \"your\" and \"you're\" - both sound the same, but using the wrong one can lead to confusion!\n\n### Variable Names\n\nGood variable names are essential for readable code. In R:\n\n- Variable names can contain letters, numbers, dots (`.`), and underscores (`_`)\n- Names must start with a letter or a dot not followed by a number\n- Names are case-sensitive (`jedi` and `Jedi` are different variables)\n- Names should be descriptive of what they contain\n\n```r\n# Valid variable names\nage_of_yoda <- 900\nharry.potter <- \"The Boy Who Lived\"\nvader_rage_level <- 95\n\n# Invalid variable names (would cause errors)\n# 2fast2furious <- \"Great movie\"  # Can't start with a number\n# iron-man <- \"Tony Stark\"      # Can't contain hyphens\n```\n\n### Exercise 3: Variable Assignment\n\nCreate variables for the following:\n1. Assign the value 42 to a variable named `answer_to_everything`\n2. Assign the text \"May the Force be with you\" to a variable named `jedi_greeting`\n3. Assign the result of 25 * 4 to a variable named `lightsaber_power`\n\n\n\n::: {.cell exercise='ex_assign_1'}\n```{webr}\n#| exercise: ex_assign_1\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_assign_1\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nUse the assignment operator `<-` to assign values to variables. Even a young padawan can master this skill!\n:::\n:::\n\n::: { .solution exercise=\"ex_assign_1\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Assign numeric value\nanswer_to_everything <- 42\n\n# Assign text (character) value\njedi_greeting <- \"May the Force be with you\"\n\n# Assign result of calculation\nlightsaber_power <- 25 * 4\n\n# Print the variables\nanswer_to_everything\njedi_greeting\nlightsaber_power\n```\n:::\n:::\n\n### Data Types in R\n\nR has several basic data types:\n\n1. **Numeric**: Decimal numbers (`1.5`, `42.0`) - like counting how many times Thanos snaps\n2. **Integer**: Whole numbers (`1L`, `42L`, where the `L` indicates an integer) - like counting Stormtroopers\n3. **Character**: Text, enclosed in quotes (`\"hello\"`, `'R is fun'`) - like famous movie quotes\n4. **Logical**: Boolean values (`TRUE` or `FALSE`) - like asking \"Is Darth Vader Luke's father?\"\n5. **Complex**: Complex numbers with real and imaginary parts (`1+2i`) - like quantum physics that powers Iron Man's suit\n6. **Date**: Date values (`as.Date(\"2023-01-15\")`) - like keeping track of when the Death Star was destroyed\n\nYou can check the type of any variable using the `class()` function.\n\n```r\n# Numeric\ndeath_star_diameter <- 160.0\nclass(death_star_diameter)  # Returns \"numeric\"\n\n# Integer\nstormtrooper_count <- 10000L\nclass(stormtrooper_count)  # Returns \"integer\"\n\n# Character\nyoda_quote <- \"Do or do not, there is no try\"\nclass(yoda_quote)  # Returns \"character\"\n\n# Logical\nis_vader_lukes_father <- TRUE\nclass(is_vader_lukes_father)  # Returns \"logical\"\n\n# Date\nalderaan_destruction <- as.Date(\"1977-05-25\")\nclass(alderaan_destruction)  # Returns \"Date\"\n```\n\n### Exercise 4: Variable Types\n\nCreate variables of different types and check their class:\n\n\n\n::: {.cell exercise='ex_assign_2'}\n```{webr}\n#| exercise: ex_assign_2\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_assign_2\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nUse the `class()` function to check the type of a variable. Create variables of different types and check their class. It's like figuring out if someone is a Jedi, Sith, or just a regular human.\n:::\n:::\n\n::: { .solution exercise=\"ex_assign_2\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Numeric variable\nmillennium_falcon_speed <- 1050\nclass(millennium_falcon_speed)\n\n# Integer variable (note the L suffix)\nrebel_fighters <- 30L\nclass(rebel_fighters)\n\n# Character variable\nvader_quote <- \"I am your father\"\nclass(vader_quote)\n\n# Logical variable\nhan_shot_first <- TRUE\nclass(han_shot_first)\n\n# Date variable\nendgame_release <- as.Date(\"2019-04-26\")\nclass(endgame_release)\n```\n:::\n:::\n\n## Vectors\n\nVectors are one of the most basic and important data structures in R. A vector is a sequence of data elements of the same type. It's like a collection of values stored together - think of it as your collection of Star Wars action figures, but all of the same type (all Jedi, all Sith, etc.).\n\n### Creating Vectors\n\nThere are several ways to create vectors in R:\n\n1. **Using the `c()` function** (combine function):\n   ```r\n   # Create a numeric vector\n   jedi_power_levels <- c(80, 95, 75, 99, 60)\n   \n   # Create a character vector\n   hogwarts_houses <- c(\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\")\n   ```\n\n2. **Using the colon operator `:` for sequences**:\n   ```r\n   # Create a sequence from 1 to 10\n   countdown_to_blastoff <- 10:1  # Contains 10, 9, 8, ..., 1\n   ```\n\n3. **Using the `seq()` function for more complex sequences**:\n   ```r\n   # Create a sequence from 0 to 1 with 0.1 steps\n   lightsaber_power_settings <- seq(0, 1, by = 0.1)  # 0, 0.1, 0.2, ..., 1\n   ```\n\n4. **Using the `rep()` function to repeat values**:\n   ```r\n   # Repeat \"I am Groot\" five times\n   groot_dialogue <- rep(\"I am Groot\", times = 5)  # I am Groot, I am Groot, I am Groot...\n   ```\n\n### Vector Types\n\nAll elements in a vector must be of the same type. The main vector types are:\n\n- **Numeric vectors**: contain numbers (`c(3.14, 2.718, 1.618)`) - like the scores in Olympic lightsaber throwing\n- **Integer vectors**: contain whole numbers (`c(1L, 2L, 3L)`) - like counting Infinity Stones\n- **Character vectors**: contain text (`c(\"Luke\", \"Leia\", \"Han\")`) - like your favorite Star Wars characters\n- **Logical vectors**: contain `TRUE` or `FALSE` values (`c(TRUE, FALSE, TRUE)`) - like whether each Avenger survived \"the snap\"\n- **Date vectors**: contain date values - like important Star Wars movie release dates\n\n### Exercise 5: Creating Vectors\n\nCreate vectors using different methods:\n\n\n\n::: {.cell exercise='ex_vector_1'}\n```{webr}\n#| exercise: ex_vector_1\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_vector_1\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nUse `c()` to combine values into a vector. Use `:` for a sequence of consecutive numbers. It's not rocket science... well, maybe it is if you're building vectors for the Death Star trajectory.\n:::\n:::\n\n::: { .solution exercise=\"ex_vector_1\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Create a numeric vector using c()\njedi_council_power <- c(95, 88, 92, 99, 85)\njedi_council_power\n\n# Create a sequence using :\norder_66_victims <- 1:10\norder_66_victims\n\n# Create a character vector\nrebel_alliance <- c(\"Luke\", \"Leia\", \"Han\", \"Chewie\", \"R2-D2\")\nrebel_alliance\n\n# Create a logical vector\nsurvived_death_star <- c(TRUE, TRUE, TRUE, FALSE, TRUE)\nsurvived_death_star\n```\n:::\n:::\n\n### Vector Operations\n\nR is designed to work efficiently with vectors. Most operations are \"vectorized,\" meaning they apply to each element of the vector automatically. This is like having Force powers that affect multiple objects at once!\n\n#### Arithmetic with Vectors\n\nWhen you perform arithmetic operations on vectors, R applies the operation to each element:\n\n```r\n# Vector addition\nc(1, 2, 3) + c(4, 5, 6)  # Returns c(5, 7, 9)\n\n# Vector multiplication - like calculating damage multipliers in a video game\nc(1, 2, 3) * 2  # Returns c(2, 4, 6)\n```\n\n#### Vector Recycling\n\nIf vectors have different lengths, R \"recycles\" the shorter vector to match the length of the longer one:\n\n```r\n# Vector of length 3 plus vector of length 1\n# Like adding a power-up to each character in a game\nc(1, 2, 3) + 10  # Returns c(11, 12, 13)\n\n# Vector of length 3 plus vector of length 2\n# Like trying to pair Jedi with lightsabers when you don't have enough lightsabers\nc(1, 2, 3) + c(10, 20)  # Returns c(11, 22, 13), with warning\n```\n\n#### Vector Functions\n\nR has many built-in functions for working with vectors:\n\n```r\nx <- c(2, 4, 6, 8, 10)  # Midi-chlorian counts for different Jedi\n\nlength(x)    # Returns 5 (number of Jedi)\nsum(x)       # Returns 30 (total midi-chlorian count)\nmean(x)      # Returns 6 (average midi-chlorian count)\nmedian(x)    # Returns 6 (median midi-chlorian count)\nmin(x)       # Returns 2 (lowest midi-chlorian count)\nmax(x)       # Returns 10 (highest midi-chlorian count)\nsort(x)      # Returns sorted vector (arranging Jedi by power)\nrev(x)       # Returns reversed vector (from most to least powerful)\n```\n\n### Exercise 6: Vector Operations\n\nPerform operations on vectors:\n\n\n\n::: {.cell exercise='ex_vector_2'}\n```{webr}\n#| exercise: ex_vector_2\n# Pre-defined vectors\njedi_power <- c(80, 85, 95, 75, 90)\nsith_power <- c(85, 80, 90, 95, 85)\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_vector_2\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nYou can perform arithmetic operations on vectors element-by-element. Use functions like `length()`, `sum()`, `mean()`, etc. to get information about vectors. It's like comparing the power levels of Jedi and Sith!\n:::\n:::\n\n::: { .solution exercise=\"ex_vector_2\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Pre-defined vectors\njedi_power <- c(80, 85, 95, 75, 90)\nsith_power <- c(85, 80, 90, 95, 85)\n\n# Vector addition - combined power\njedi_power + sith_power\n\n# Vector multiplication - power amplification\njedi_power * 1.5\n\n# Vector length - how many Jedi\nlength(jedi_power)\n\n# Sum of vector elements - total Jedi power\nsum(jedi_power)\n\n# Mean of vector elements - average Sith power\nmean(sith_power)\n\n# Min and max - weakest and strongest Jedi\nmin(jedi_power)\nmax(jedi_power)\n\n# Who is more powerful in each matchup?\njedi_power > sith_power\n```\n:::\n:::\n\n## Operators\n\nOperators are symbols that tell R to perform specific mathematical or logical operations. R has a rich set of operators that allow you to perform various calculations and comparisons.\n\n### Arithmetic Operators\n\nArithmetic operators perform mathematical calculations:\n\n| Operator | Description | Example | Result |\n|----------|-------------|---------|--------|\n| `+` | Addition | `5 + 3` | `8` (like combining forces) |\n| `-` | Subtraction | `5 - 3` | `2` (like losing health points) |\n| `*` | Multiplication | `5 * 3` | `15` (like power-ups) |\n| `/` | Division | `5 / 3` | `1.666667` (like sharing loot) |\n| `^` | Exponentiation | `5 ^ 3` | `125` (like leveling up) |\n| `%%` | Modulus (remainder) | `5 %% 3` | `2` (like leftover pizza slices) |\n| `%/%` | Integer Division | `5 %/% 3` | `1` (like whole portions in Jakku) |\n\nThese operators can work on single values or vectors, applying the operation to each element of the vector.\n\n```r\n# Vector arithmetic\nc(1, 2, 3) + c(4, 5, 6)  # Returns c(5, 7, 9)\nc(1, 2, 3) * 2           # Returns c(2, 4, 6)\n```\n\n### Exercise 7: Arithmetic Operators\n\nUse various arithmetic operators in R:\n\n\n\n::: {.cell exercise='ex_operators_1'}\n```{webr}\n#| exercise: ex_operators_1\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_operators_1\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nCommon arithmetic operators in R include: `+` (addition), `-` (subtraction), `*` (multiplication), `/` (division), `^` (exponentiation), `%%` (modulo), `%/%` (integer division). Use the Force, young padawan!\n:::\n:::\n\n::: { .solution exercise=\"ex_operators_1\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Addition (combining rebel forces)\n10 + 5\n\n# Subtraction (stormtroopers lost in battle)\n10 - 5\n\n# Multiplication (cloning troopers)\n10 * 5\n\n# Division (sharing rations)\n10 / 3\n\n# Exponentiation (power amplification)\n2 ^ 3\n\n# Modulo (remainder after dividing portions)\n10 %% 3\n\n# Integer division (whole portions only)\n10 %/% 3\n```\n:::\n:::\n\n### Comparison Operators\n\nComparison operators compare values and return logical (TRUE/FALSE) results:\n\n| Operator | Description | Example | Result |\n|----------|-------------|---------|--------|\n| `==` | Equal to | `yoda_age == 900` | `TRUE` |\n| `!=` | Not equal to | `yoda_species != \"human\"` | `TRUE` |\n| `<` | Less than | `luke_power < vader_power` | `TRUE` (initially) |\n| `>` | Greater than | `falcon_speed > tie_fighter_speed` | `TRUE` |\n| `<=` | Less than or equal to | `han_solo_coolness <= chewbacca_coolness` | `FALSE` |\n| `>=` | Greater than or equal to | `death_star_size >= alderaan_size` | `TRUE` (unfortunately) |\n\nThese operators are essential for filtering data and controlling program flow with conditionals.\n\n### Logical Operators\n\nLogical operators combine logical (TRUE/FALSE) values:\n\n| Operator | Description | Example | Result |\n|----------|-------------|---------|--------|\n| `&` | Element-wise AND | `c(TRUE, FALSE) & c(TRUE, TRUE)` | `c(TRUE, FALSE)` |\n| `|` | Element-wise OR | `c(TRUE, FALSE) | c(FALSE, TRUE)` | `c(TRUE, TRUE)` |\n| `!` | NOT | `!TRUE` | `FALSE` |\n| `&&` | AND (single value) | `is_jedi && has_lightsaber` | Depends on values |\n| `||` | OR (single value) | `is_jedi || is_sith` | Depends on values |\n\nThe element-wise operators (`&`, `|`) work on vectors, while the single-value operators (`&&`, `||`) only evaluate the first element of vectors.\n\n```r\n# Element-wise AND\njedi_skills <- c(TRUE, FALSE, TRUE)\nforce_sensitive <- c(TRUE, TRUE, FALSE)\ncan_use_force <- jedi_skills & force_sensitive  # Returns c(TRUE, FALSE, FALSE)\n\n# Single-value AND (uses only first element)\nis_a_jedi <- jedi_skills && force_sensitive  # Returns TRUE\n```\n\n### Exercise 8: Comparison Operators\n\nUse comparison operators and logical operators:\n\n\n\n::: {.cell exercise='ex_operators_2'}\n```{webr}\n#| exercise: ex_operators_2\nvader_power <- 95\nluke_power <- 85\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_operators_2\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nComparison operators include: `==` (equal), `!=` (not equal), `>` (greater than), `<` (less than), `>=` (greater than or equal), `<=` (less than or equal).\nLogical operators include: `&` (AND), `|` (OR), `!` (NOT). Use them to compare the power levels of Vader and Luke!\n:::\n:::\n\n::: { .solution exercise=\"ex_operators_2\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\nvader_power <- 95\nluke_power <- 85\n\n# Comparison operators\nvader_power == luke_power  # Are they equally powerful?\nvader_power != luke_power  # Are they different in power?\nvader_power > luke_power   # Is Vader more powerful?\nluke_power < vader_power   # Is Luke less powerful?\nvader_power >= 90  # Is Vader's power at least 90?\nluke_power <= 80   # Is Luke's power at most 80?\n\n# Logical operators\n(vader_power > 90) & (luke_power > 80)  # Are both powerful?\n(vader_power > 100) | (luke_power > 80)  # Is at least one very powerful?\n!(vader_power == luke_power)  # Are they not equal in power?\n```\n:::\n:::\n\n## Factors and Lists\n\n### Factors\n\nFactors are a special type of vector used to represent categorical data. They are particularly useful in statistical modeling and data visualization. Think of them as sorting your Star Wars action figures by type: Jedi, Sith, droids, etc.\n\n#### Creating Factors\n\nFactors are created using the `factor()` function. By default, R will sort the levels alphabetically, but you can specify a custom order if needed.\n\n```r\n# Create a basic factor\njedi_or_sith <- factor(c(\"Jedi\", \"Sith\", \"Sith\", \"Jedi\", \"Jedi\"))\njedi_or_sith  # Levels: Jedi Sith\n\n# Specify custom levels (including order)\nforce_alignment <- factor(c(\"Light\", \"Dark\", \"Grey\", \"Light\", \"Dark\"), \n                     levels = c(\"Light\", \"Grey\", \"Dark\"))\nforce_alignment  # Levels: Light Grey Dark\n```\n\n#### Working with Factors\n\nFactors are useful for:\n\n1. **Ensuring data consistency**: Only values in the defined levels are allowed (no \"Gungan\" in your Jedi/Sith classification)\n2. **Controlling the order of categories**: Important for plots and tables (Light side always comes first!)\n3. **Efficient storage**: Factors store integers internally with a lookup table\n4. **Statistical modeling**: Proper handling of categorical variables\n\nCommon functions used with factors:\n\n```r\n# Get the levels of a factor\nlevels(jedi_or_sith)  # Returns \"Jedi\" \"Sith\"\n\n# Count occurrences of each level\ntable(jedi_or_sith)  # Shows frequency table - how many Jedi vs Sith\n\n# Convert factor to numeric\nas.numeric(force_alignment)  # Returns the underlying integer codes\n\n# Convert factor to character\nas.character(force_alignment)  # Returns the original strings\n```\n\n### Exercise 9: Creating and Working with Factors\n\nCreate and manipulate factors:\n\n\n\n::: {.cell exercise='ex_factors_1'}\n```{webr}\n#| exercise: ex_factors_1\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_factors_1\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nFactors are used to represent categorical data. Use the `factor()` function to create factors. You can specify the levels using the `levels` parameter. It's like organizing your Marvel heroes by team affiliation!\n:::\n:::\n\n::: { .solution exercise=\"ex_factors_1\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Create a vector of Star Wars species\nspecies <- c(\"Human\", \"Wookiee\", \"Droid\", \"Human\", \"Twi'lek\", \"Droid\", \"Human\")\n\n# Convert to factor\nspecies_factor <- factor(species)\nspecies_factor\n\n# Check levels\nlevels(species_factor)\n\n# Create Hogwarts houses factor with specified levels\nhogwarts_houses <- factor(c(\"Gryffindor\", \"Slytherin\", \"Hufflepuff\", \"Ravenclaw\", \"Gryffindor\"), \n                 levels = c(\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\"))\nhogwarts_houses\n\n# Count occurrences\ntable(species_factor)\ntable(hogwarts_houses)\n```\n:::\n:::\n\n### Lists\n\nLists are a versatile data structure in R that can hold elements of different types, including other lists. This makes them ideal for hierarchical or heterogeneous data. Think of a list as your utility belt - it can hold all sorts of gadgets (data types) at once!\n\n#### Creating Lists\n\nLists are created using the `list()` function. Each element can have a name for easier access.\n\n```r\n# Create a basic list\nbatmans_utility_belt <- list(100, \"Batarang\", TRUE, c(1, 2, 3))\n\n# Create a named list\nhan_solo <- list(\n  name = \"Han Solo\",\n  age = 32,\n  ships = c(\"Millennium Falcon\", \"Stolen Imperial Shuttle\"),\n  is_scoundrel = TRUE\n)\n```\n\n#### Accessing List Elements\n\nThere are multiple ways to access elements in a list:\n\n1. **Using double square brackets `[[]]`** for a single element:\n   ```r\n   han_solo[[1]]        # Returns \"Han Solo\"\n   han_solo[[\"name\"]]   # Returns \"Han Solo\"\n   ```\n\n2. **Using the dollar sign `$`** for named elements:\n   ```r\n   han_solo$name        # Returns \"Han Solo\"\n   han_solo$ships[1]    # Returns \"Millennium Falcon\"\n   ```\n\n3. **Using single square brackets `[]`** to get a sublist:\n   ```r\n   han_solo[1:2]        # Returns a list with name and age\n   han_solo[\"ships\"]    # Returns a list with just the ships element\n   ```\n\n#### Modifying Lists\n\nLists are mutable, so you can change them after creation:\n\n```r\n# Add a new element\nhan_solo$friends <- c(\"Luke\", \"Leia\", \"Chewie\")\n\n# Change an existing element\nhan_solo$age <- 35\n\n# Remove an element\nhan_solo$is_scoundrel <- NULL  # Han's grown up a bit\n```\n\n### Exercise 10: Working with Lists\n\nCreate and manipulate lists:\n\n\n\n::: {.cell exercise='ex_lists_1'}\n```{webr}\n#| exercise: ex_lists_1\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_lists_1\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nLists can contain elements of different types. Use the `list()` function to create lists. Access elements using `[[]]` or `$` for named elements. Think of it as creating a character profile for your favorite superhero or villain!\n:::\n:::\n\n::: { .solution exercise=\"ex_lists_1\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Create a list with different types\ndarth_vader <- list(\n  name = \"Anakin Skywalker\",\n  sith_name = \"Darth Vader\",\n  age = 45,\n  midi_chlorian_count = c(27000, 23000, 20000),  # decreasing over time\n  is_lukes_father = TRUE\n)\n\n# Display the list\ndarth_vader\n\n# Access elements\ndarth_vader[[1]]  # First element\ndarth_vader$sith_name  # Element by name\ndarth_vader$midi_chlorian_count[1]  # Element within element\n\n# Add element to list\ndarth_vader$famous_line <- \"I am your father\"\ndarth_vader\n```\n:::\n:::\n\n## Data Frames\n\nData frames are the most common data structure for tabular data in R. They're similar to tables in a database, spreadsheets, or CSV files. Think of them as the Galactic Senate records - neatly organized information about various entities.\n\n### Key Features of Data Frames\n\n- Rectangular data (rows and columns)\n- Each column can be a different data type\n- All columns must have the same length\n- Each column has a name\n- Rows can be named (but often aren't)\n\n### Creating Data Frames\n\nData frames are created using the `data.frame()` function:\n\n```r\n# Create a data frame of Star Wars characters\nstar_wars_chars <- data.frame(\n  name = c(\"Luke\", \"Leia\", \"Han\", \"Chewie\"),\n  species = c(\"Human\", \"Human\", \"Human\", \"Wookiee\"),\n  force_sensitive = c(TRUE, TRUE, FALSE, FALSE),\n  age = c(19, 19, 29, 200)\n)\n```\n\nYou can also create data frames from external sources using functions like:\n- `read.csv()` - read from CSV files\n- `read.table()` - read from text files\n- `read_excel()` - read from Excel files (requires the readxl package)\n\n### Examining Data Frames\n\nR provides several functions to examine data frames:\n\n```r\n# View the structure of a data frame\nstr(star_wars_chars)\n\n# Show the first few rows\nhead(star_wars_chars)\n\n# Show the last few rows\ntail(star_wars_chars)\n\n# Get a summary of the data frame\nsummary(star_wars_chars)\n\n# Get the dimensions (rows, columns)\ndim(star_wars_chars)\n\n# Get the column names\nnames(star_wars_chars)\n```\n\n### Exercise 11: Creating Data Frames\n\nCreate a data frame to store structured data:\n\n\n\n::: {.cell exercise='ex_df_1'}\n```{webr}\n#| exercise: ex_df_1\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_df_1\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nA data frame is a table-like structure where each column can contain data of a different type. Use the `data.frame()` function to create data frames. It's like creating your own superhero database!\n:::\n:::\n\n::: { .solution exercise=\"ex_df_1\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Create a data frame of Avengers\navengers <- data.frame(\n  name = c(\"Iron Man\", \"Captain America\", \"Thor\", \"Hulk\"),\n  real_name = c(\"Tony Stark\", \"Steve Rogers\", \"Thor Odinson\", \"Bruce Banner\"),\n  age = c(40, 95, 1500, 42),\n  is_original = c(TRUE, TRUE, TRUE, TRUE)\n)\n\n# Display the data frame\navengers\n\n# Structure of data frame\nstr(avengers)\n\n# Summary statistics\nsummary(avengers)\n```\n:::\n:::\n\n### Accessing Data Frame Elements\n\nYou can access elements of a data frame in several ways:\n\n#### 1. Using column names with the `$` operator:\n\n```r\n# Get an entire column\nstar_wars_chars$name  # Returns c(\"Luke\", \"Leia\", \"Han\", \"Chewie\")\n\n# Get a specific element\nstar_wars_chars$age[2]  # Returns 19 (Leia's age)\n```\n\n#### 2. Using square brackets `[row, column]`:\n\n```r\n# Get a specific cell (row 2, column 3)\nstar_wars_chars[2, 3]  # Returns TRUE (Leia's force sensitivity)\n\n# Get multiple rows/columns\nstar_wars_chars[1:2, c(\"name\", \"age\")]  # First two characters, name and age only\n\n# Get all rows of a column\nstar_wars_chars[, \"name\"]  # All names\n\n# Get all columns for a row\nstar_wars_chars[2, ]  # All data for Leia\n```\n\n#### 3. Filtering data frames with logical conditions:\n\n```r\n# Get rows where age is over 25\nstar_wars_chars[star_wars_chars$age > 25, ]\n\n# Get rows where character is force sensitive\nstar_wars_chars[star_wars_chars$force_sensitive == TRUE, ]\n\n# Combine conditions\nstar_wars_chars[star_wars_chars$species == \"Human\" & star_wars_chars$force_sensitive == TRUE, ]\n```\n\n### Modifying Data Frames\n\nData frames can be modified after creation:\n\n```r\n# Add a new column\nstar_wars_chars$weapon <- c(\"Lightsaber\", \"Blaster\", \"Blaster\", \"Bowcaster\")\n\n# Change a value\nstar_wars_chars$age[3] <- 30\n\n# Add a new row\nnew_character <- data.frame(\n  name = \"Yoda\",\n  species = \"Unknown\",\n  force_sensitive = TRUE,\n  age = 900,\n  weapon = \"Lightsaber\"\n)\nstar_wars_chars <- rbind(star_wars_chars, new_character)\n```\n\n### Exercise 12: Accessing Data Frames\n\nAccess and manipulate data frames:\n\n\n\n::: {.cell exercise='ex_df_2'}\n```{webr}\n#| exercise: ex_df_2\n# Pre-defined data frame\nstar_trek_crew <- data.frame(\n  name = c(\"Kirk\", \"Spock\", \"McCoy\", \"Uhura\", \"Scotty\"),\n  role = c(\"Captain\", \"Science Officer\", \"Doctor\", \"Communications\", \"Engineer\"),\n  species = c(\"Human\", \"Vulcan\", \"Human\", \"Human\", \"Human\"),\n  age = c(35, 40, 38, 32, 45),\n  stardate_joined = as.Date(c(\"2265-01-15\", \"2265-01-15\", \"2265-02-10\", \n                         \"2265-01-20\", \"2265-03-05\"))\n)\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_df_2\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nAccess data frame columns using `$` notation or by specifying rows and columns with `[row, column]` notation. Filter rows using logical conditions. It's like accessing the Starfleet database!\n:::\n:::\n\n::: { .solution exercise=\"ex_df_2\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Pre-defined data frame\nstar_trek_crew <- data.frame(\n  name = c(\"Kirk\", \"Spock\", \"McCoy\", \"Uhura\", \"Scotty\"),\n  role = c(\"Captain\", \"Science Officer\", \"Doctor\", \"Communications\", \"Engineer\"),\n  species = c(\"Human\", \"Vulcan\", \"Human\", \"Human\", \"Human\"),\n  age = c(35, 40, 38, 32, 45),\n  stardate_joined = as.Date(c(\"2265-01-15\", \"2265-01-15\", \"2265-02-10\", \n                         \"2265-01-20\", \"2265-03-05\"))\n)\n\n# Display the full data frame\nstar_trek_crew\n\n# Access column by name\nstar_trek_crew$name\n\n# Access specific rows and columns\nstar_trek_crew[2, 3]  # Row 2, Column 3 (Spock's species)\nstar_trek_crew[1:3, c(\"name\", \"role\")]  # First three crew, name and role only\n\n# Filter data frame\nnon_humans <- star_trek_crew[star_trek_crew$species != \"Human\", ]\nnon_humans\n\n# Calculate average age\nmean(star_trek_crew$age)\n\n# Sort data frame by age\nstar_trek_crew[order(star_trek_crew$age), ]\n\n# Find the oldest crew member\nstar_trek_crew[which.max(star_trek_crew$age), ]\n```\n:::\n::: ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}