{
  "hash": "53bd634fb6a6a537a7c2828a6839e383",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R Language Basics I\"\nauthor: \"David Munoz Tord\"\ndescription: \"Fundamentals of R programming covering introductory concepts to data frames\"\nengine: knitr\nformat: live-html\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n## Introduction to R\n\nR is a powerful programming language for statistical computing and data analysis. Originally developed by statisticians Ross Ihaka and Robert Gentleman at the University of Auckland in the 1990s, R has become a leading tool for data science, statistical analysis, and data visualization.\n\n### Key Features of R:\n\n- **Statistical Focus**: R was built specifically for statistical analysis and offers a vast array of statistical methods and tests.\n- **Graphics Capabilities**: Excellent for creating high-quality visualizations with packages like ggplot2.\n- **Extensibility**: Thousands of packages available through CRAN (Comprehensive R Archive Network) extend R's functionality.\n- **Open Source**: Free and open-source, with a strong community of users and developers.\n- **Interactive Environment**: The R console provides immediate feedback, making it ideal for data exploration.\n\n### The R Console and Basic Operations\n\nWhen you start R, you're presented with a console where you can enter commands. The console interprets each command and returns results immediately.\n\nR functions as a sophisticated calculator, capable of handling basic arithmetic operations and much more. Here are some basic operations you can perform:\n\n```r\n# Addition\n5 + 3  # Returns 8\n\n# Subtraction\n10 - 4  # Returns 6\n\n# Multiplication\n6 * 7  # Returns 42\n\n# Division\n20 / 5  # Returns 4\n\n# Exponentiation (Power)\n2^3  # Returns 8\n```\n\n### Exercise 1: Basic R Operations\n\nPerform the following operations in R:\n1. Add 25 and 75\n2. Multiply 10 by 5\n3. Divide 100 by 4\n\n\n\n::: {.cell exercise='ex_intro_1'}\n```{webr}\n#| exercise: ex_intro_1\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_intro_1\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nUse the standard arithmetic operators: `+` for addition, `*` for multiplication, and `/` for division.\n:::\n:::\n\n::: { .solution exercise=\"ex_intro_1\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Addition\n25 + 75\n\n# Multiplication\n10 * 5\n\n# Division\n100 / 4\n```\n:::\n:::\n\n### Comments and Output in R\n\nR allows you to add comments to your code to explain what it does. Comments start with the `#` symbol and are ignored by R when executing code.\n\nR automatically prints the result of a calculation or command if it's not assigned to a variable. This feature is useful for quick calculations and checking intermediate results.\n\nYou can also explicitly print values using the `print()` function, which is especially useful when working with scripts where automatic printing doesn't occur.\n\n```r\n# This is a comment that R ignores\n\n# Automatic printing example\n42  # R will output 42\n\n# Print function example\nprint(\"Hello\")  # Explicitly prints \"Hello\"\n```\n\n### Exercise 2: Printing and Comments\n\nPractice printing values and adding comments to your code.\n\n\n\n::: {.cell exercise='ex_intro_2'}\n```{webr}\n#| exercise: ex_intro_2\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_intro_2\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nUse `#` to add comments. R will automatically print the result of an expression if it's not assigned to a variable. You can also use the `print()` function.\n:::\n:::\n\n::: { .solution exercise=\"ex_intro_2\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# This is a comment - it won't be executed\n\n# Automatic printing\n42\n\n# Print function\nprint(\"Hello, R world!\")\n\n# Multiple operations\n2 + 2\nprint(10 * 5)\n```\n:::\n:::\n\n## Names and Assignment\n\nIn R, you can store values in variables for later use. This is done using the assignment operator, which can be either `<-` or `=`. The `<-` operator is more commonly used in R programming.\n\n### Variable Assignment\n\nWhen you assign a value to a variable, R stores that value in memory. You can then use the variable name to refer to that value in subsequent operations.\n\n```r\n# Assign value 10 to variable x\nx <- 10\n\n# Use x in a calculation\nx + 5  # Returns 15\n\n# Reassign x to a new value\nx <- 20\nx  # Now returns 20\n```\n\nWhile both `<-` and `=` work for assignment in most contexts, `<-` is preferred in R programming because it clearly distinguishes assignment from the `==` equality test and because it works in all contexts.\n\n### Variable Names\n\nGood variable names are essential for readable code. In R:\n\n- Variable names can contain letters, numbers, dots (`.`), and underscores (`_`)\n- Names must start with a letter or a dot not followed by a number\n- Names are case-sensitive (`count` and `Count` are different variables)\n- Names should be descriptive of what they contain\n\n```r\n# Valid variable names\nage <- 30\nstudent.name <- \"John\"\ntest_score <- 95\n\n# Invalid variable names (would cause errors)\n# 2ndPlace <- \"Silver\"  # Can't start with a number\n# test-score <- 95      # Can't contain hyphens\n```\n\n### Exercise 3: Variable Assignment\n\nCreate variables for the following:\n1. Assign the value 42 to a variable named `answer`\n2. Assign the text \"R Programming\" to a variable named `course`\n3. Assign the result of 25 * 4 to a variable named `result`\n\n\n\n::: {.cell exercise='ex_assign_1'}\n```{webr}\n#| exercise: ex_assign_1\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_assign_1\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nUse the assignment operator `<-` to assign values to variables. You can also use `=`, but `<-` is more common in R.\n:::\n:::\n\n::: { .solution exercise=\"ex_assign_1\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Assign numeric value\nanswer <- 42\n\n# Assign text (character) value\ncourse <- \"R Programming\"\n\n# Assign result of calculation\nresult <- 25 * 4\n\n# Print the variables\nanswer\ncourse\nresult\n```\n:::\n:::\n\n### Data Types in R\n\nR has several basic data types:\n\n1. **Numeric**: Decimal numbers (`1.5`, `42.0`)\n2. **Integer**: Whole numbers (`1L`, `42L`, where the `L` indicates an integer)\n3. **Character**: Text, enclosed in quotes (`\"hello\"`, `'R is fun'`)\n4. **Logical**: Boolean values (`TRUE` or `FALSE`)\n5. **Complex**: Complex numbers with real and imaginary parts (`1+2i`)\n6. **Date**: Date values (`as.Date(\"2023-01-15\")`)\n\nYou can check the type of any variable using the `class()` function.\n\n```r\n# Numeric\nx <- 10.5\nclass(x)  # Returns \"numeric\"\n\n# Integer\ny <- 10L\nclass(y)  # Returns \"integer\"\n\n# Character\nname <- \"R Language\"\nclass(name)  # Returns \"character\"\n\n# Logical\nis_valid <- TRUE\nclass(is_valid)  # Returns \"logical\"\n\n# Date\ntoday <- as.Date(\"2023-01-15\")\nclass(today)  # Returns \"Date\"\n```\n\n### Exercise 4: Variable Types\n\nCreate variables of different types and check their class:\n\n\n\n::: {.cell exercise='ex_assign_2'}\n```{webr}\n#| exercise: ex_assign_2\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_assign_2\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nUse the `class()` function to check the type of a variable. Create variables of different types and check their class.\n:::\n:::\n\n::: { .solution exercise=\"ex_assign_2\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Numeric variable\nnum_var <- 1000\nclass(num_var)\n\n# Integer variable (note the L suffix)\nint_var <- 1000L\nclass(int_var)\n\n# Character variable\nchar_var <- \"Hello\"\nclass(char_var)\n\n# Logical variable\nlogic_var <- TRUE\nclass(logic_var)\n\n# Date variable\ndate_var <- as.Date(\"2023-01-15\")\nclass(date_var)\n```\n:::\n:::\n\n## Vectors\n\nVectors are one of the most basic and important data structures in R. A vector is a sequence of data elements of the same type. It's like a collection of values stored together.\n\n### Creating Vectors\n\nThere are several ways to create vectors in R:\n\n1. **Using the `c()` function** (combine function):\n   ```r\n   # Create a numeric vector\n   numbers <- c(1, 2, 3, 4, 5)\n   \n   # Create a character vector\n   colors <- c(\"red\", \"green\", \"blue\")\n   ```\n\n2. **Using the colon operator `:` for sequences**:\n   ```r\n   # Create a sequence from 1 to 10\n   seq_1_10 <- 1:10  # Contains 1, 2, 3, ..., 10\n   ```\n\n3. **Using the `seq()` function for more complex sequences**:\n   ```r\n   # Create a sequence from 0 to 1 with 0.1 steps\n   seq_0_1 <- seq(0, 1, by = 0.1)  # 0, 0.1, 0.2, ..., 1\n   ```\n\n4. **Using the `rep()` function to repeat values**:\n   ```r\n   # Repeat the value 5 four times\n   rep_values <- rep(5, times = 4)  # 5, 5, 5, 5\n   ```\n\n### Vector Types\n\nAll elements in a vector must be of the same type. The main vector types are:\n\n- **Numeric vectors**: contain numbers (`c(1.5, 2.0, 3.5)`)\n- **Integer vectors**: contain whole numbers (`c(1L, 2L, 3L)`)\n- **Character vectors**: contain text (`c(\"apple\", \"banana\")`)\n- **Logical vectors**: contain `TRUE` or `FALSE` values (`c(TRUE, FALSE, TRUE)`)\n- **Date vectors**: contain date values\n\n### Exercise 5: Creating Vectors\n\nCreate vectors using different methods:\n\n\n\n::: {.cell exercise='ex_vector_1'}\n```{webr}\n#| exercise: ex_vector_1\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_vector_1\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nUse `c()` to combine values into a vector. Use `:` for a sequence of consecutive numbers.\n:::\n:::\n\n::: { .solution exercise=\"ex_vector_1\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Create a numeric vector using c()\nnumbers <- c(10, 20, 30, 40, 50)\nnumbers\n\n# Create a sequence using :\nsequence <- 1:10\nsequence\n\n# Create a character vector\nfruits <- c(\"apple\", \"banana\", \"orange\")\nfruits\n\n# Create a logical vector\nflags <- c(TRUE, FALSE, TRUE, TRUE)\nflags\n```\n:::\n:::\n\n### Vector Operations\n\nR is designed to work efficiently with vectors. Most operations are \"vectorized,\" meaning they apply to each element of the vector automatically.\n\n#### Arithmetic with Vectors\n\nWhen you perform arithmetic operations on vectors, R applies the operation to each element:\n\n```r\n# Vector addition\nc(1, 2, 3) + c(4, 5, 6)  # Returns c(5, 7, 9)\n\n# Vector multiplication\nc(1, 2, 3) * 2  # Returns c(2, 4, 6)\n```\n\n#### Vector Recycling\n\nIf vectors have different lengths, R \"recycles\" the shorter vector to match the length of the longer one:\n\n```r\n# Vector of length 3 plus vector of length 1\nc(1, 2, 3) + 10  # Returns c(11, 12, 13)\n\n# Vector of length 3 plus vector of length 2\nc(1, 2, 3) + c(10, 20)  # Returns c(11, 22, 13), with warning\n```\n\n#### Vector Functions\n\nR has many built-in functions for working with vectors:\n\n```r\nx <- c(2, 4, 6, 8, 10)\n\nlength(x)    # Returns 5 (number of elements)\nsum(x)       # Returns 30 (sum of all elements)\nmean(x)      # Returns 6 (average of elements)\nmedian(x)    # Returns 6 (median value)\nmin(x)       # Returns 2 (minimum value)\nmax(x)       # Returns 10 (maximum value)\nsort(x)      # Returns sorted vector\nrev(x)       # Returns reversed vector\n```\n\n### Exercise 6: Vector Operations\n\nPerform operations on vectors:\n\n\n\n::: {.cell exercise='ex_vector_2'}\n```{webr}\n#| exercise: ex_vector_2\n# Pre-defined vectors\nvec1 <- c(1, 2, 3, 4, 5)\nvec2 <- c(6, 7, 8, 9, 10)\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_vector_2\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nYou can perform arithmetic operations on vectors element-by-element. Use functions like `length()`, `sum()`, `mean()`, etc. to get information about vectors.\n:::\n:::\n\n::: { .solution exercise=\"ex_vector_2\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Pre-defined vectors\nvec1 <- c(1, 2, 3, 4, 5)\nvec2 <- c(6, 7, 8, 9, 10)\n\n# Vector addition\nvec1 + vec2\n\n# Vector multiplication\nvec1 * vec2\n\n# Vector length\nlength(vec1)\n\n# Sum of vector elements\nsum(vec1)\n\n# Mean of vector elements\nmean(vec2)\n\n# Min and max\nmin(vec1)\nmax(vec2)\n```\n:::\n:::\n\n## Operators\n\nOperators are symbols that tell R to perform specific mathematical or logical operations. R has a rich set of operators that allow you to perform various calculations and comparisons.\n\n### Arithmetic Operators\n\nArithmetic operators perform mathematical calculations:\n\n| Operator | Description | Example | Result |\n|----------|-------------|---------|--------|\n| `+` | Addition | `5 + 3` | `8` |\n| `-` | Subtraction | `5 - 3` | `2` |\n| `*` | Multiplication | `5 * 3` | `15` |\n| `/` | Division | `5 / 3` | `1.666667` |\n| `^` | Exponentiation | `5 ^ 3` | `125` |\n| `%%` | Modulus (remainder) | `5 %% 3` | `2` |\n| `%/%` | Integer Division | `5 %/% 3` | `1` |\n\nThese operators can work on single values or vectors, applying the operation to each element of the vector.\n\n```r\n# Vector arithmetic\nc(1, 2, 3) + c(4, 5, 6)  # Returns c(5, 7, 9)\nc(1, 2, 3) * 2           # Returns c(2, 4, 6)\n```\n\n### Exercise 7: Arithmetic Operators\n\nUse various arithmetic operators in R:\n\n\n\n::: {.cell exercise='ex_operators_1'}\n```{webr}\n#| exercise: ex_operators_1\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_operators_1\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nCommon arithmetic operators in R include: `+` (addition), `-` (subtraction), `*` (multiplication), `/` (division), `^` (exponentiation), `%%` (modulo), `%/%` (integer division).\n:::\n:::\n\n::: { .solution exercise=\"ex_operators_1\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Addition\n10 + 5\n\n# Subtraction\n10 - 5\n\n# Multiplication\n10 * 5\n\n# Division\n10 / 3\n\n# Exponentiation\n2 ^ 3\n\n# Modulo (remainder)\n10 %% 3\n\n# Integer division\n10 %/% 3\n```\n:::\n:::\n\n### Comparison Operators\n\nComparison operators compare values and return logical (TRUE/FALSE) results:\n\n| Operator | Description | Example | Result |\n|----------|-------------|---------|--------|\n| `==` | Equal to | `5 == 3` | `FALSE` |\n| `!=` | Not equal to | `5 != 3` | `TRUE` |\n| `<` | Less than | `5 < 3` | `FALSE` |\n| `>` | Greater than | `5 > 3` | `TRUE` |\n| `<=` | Less than or equal to | `5 <= 5` | `TRUE` |\n| `>=` | Greater than or equal to | `5 >= 6` | `FALSE` |\n\nThese operators are essential for filtering data and controlling program flow with conditionals.\n\n### Logical Operators\n\nLogical operators combine logical (TRUE/FALSE) values:\n\n| Operator | Description | Example | Result |\n|----------|-------------|---------|--------|\n| `&` | Element-wise AND | `c(TRUE, FALSE) & c(TRUE, TRUE)` | `c(TRUE, FALSE)` |\n| `|` | Element-wise OR | `c(TRUE, FALSE) | c(FALSE, TRUE)` | `c(TRUE, TRUE)` |\n| `!` | NOT | `!TRUE` | `FALSE` |\n| `&&` | AND (single value) | `TRUE && FALSE` | `FALSE` |\n| `||` | OR (single value) | `TRUE || FALSE` | `TRUE` |\n\nThe element-wise operators (`&`, `|`) work on vectors, while the single-value operators (`&&`, `||`) only evaluate the first element of vectors.\n\n```r\n# Element-wise AND\nc(TRUE, FALSE, TRUE) & c(TRUE, TRUE, FALSE)  # Returns c(TRUE, FALSE, FALSE)\n\n# Single-value AND (uses only first element)\nc(TRUE, FALSE, TRUE) && c(TRUE, TRUE, FALSE)  # Returns TRUE\n```\n\n### Exercise 8: Comparison Operators\n\nUse comparison operators and logical operators:\n\n\n\n::: {.cell exercise='ex_operators_2'}\n```{webr}\n#| exercise: ex_operators_2\nx <- 10\ny <- 7\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_operators_2\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nComparison operators include: `==` (equal), `!=` (not equal), `>` (greater than), `<` (less than), `>=` (greater than or equal), `<=` (less than or equal).\nLogical operators include: `&` (AND), `|` (OR), `!` (NOT).\n:::\n:::\n\n::: { .solution exercise=\"ex_operators_2\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\nx <- 10\ny <- 7\n\n# Comparison operators\nx == y  # Equal to\nx != y  # Not equal to\nx > y   # Greater than\nx < y   # Less than\nx >= y  # Greater than or equal to\nx <= y  # Less than or equal to\n\n# Logical operators\n(x > 5) & (y > 5)  # AND\n(x > 15) | (y > 5)  # OR\n!(x == 10)  # NOT\n```\n:::\n:::\n\n## Factors and Lists\n\n### Factors\n\nFactors are a special type of vector used to represent categorical data. They are particularly useful in statistical modeling and data visualization.\n\n#### Creating Factors\n\nFactors are created using the `factor()` function. By default, R will sort the levels alphabetically, but you can specify a custom order if needed.\n\n```r\n# Create a basic factor\ngender <- factor(c(\"Male\", \"Female\", \"Female\", \"Male\", \"Male\"))\ngender  # Levels: Female Male\n\n# Specify custom levels (including order)\nblood_type <- factor(c(\"A\", \"B\", \"AB\", \"O\", \"A\"), \n                     levels = c(\"O\", \"A\", \"B\", \"AB\"))\nblood_type  # Levels: O A B AB\n```\n\n#### Working with Factors\n\nFactors are useful for:\n\n1. **Ensuring data consistency**: Only values in the defined levels are allowed\n2. **Controlling the order of categories**: Important for plots and tables\n3. **Efficient storage**: Factors store integers internally with a lookup table\n4. **Statistical modeling**: Proper handling of categorical variables\n\nCommon functions used with factors:\n\n```r\n# Get the levels of a factor\nlevels(gender)  # Returns \"Female\" \"Male\"\n\n# Count occurrences of each level\ntable(gender)  # Shows frequency table\n\n# Convert factor to numeric\nas.numeric(blood_type)  # Returns the underlying integer codes\n\n# Convert factor to character\nas.character(blood_type)  # Returns the original strings\n```\n\n### Exercise 9: Creating and Working with Factors\n\nCreate and manipulate factors:\n\n\n\n::: {.cell exercise='ex_factors_1'}\n```{webr}\n#| exercise: ex_factors_1\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_factors_1\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nFactors are used to represent categorical data. Use the `factor()` function to create factors. You can specify the levels using the `levels` parameter.\n:::\n:::\n\n::: { .solution exercise=\"ex_factors_1\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Create a vector\nblood_types <- c(\"A\", \"B\", \"AB\", \"O\", \"A\", \"O\", \"B\")\n\n# Convert to factor\nblood_factor <- factor(blood_types)\nblood_factor\n\n# Check levels\nlevels(blood_factor)\n\n# Create a factor with specified levels\ngender <- factor(c(\"M\", \"F\", \"F\", \"M\", \"F\"), \n                 levels = c(\"M\", \"F\"))\ngender\n\n# Count occurrences\ntable(blood_factor)\ntable(gender)\n```\n:::\n:::\n\n### Lists\n\nLists are a versatile data structure in R that can hold elements of different types, including other lists. This makes them ideal for hierarchical or heterogeneous data.\n\n#### Creating Lists\n\nLists are created using the `list()` function. Each element can have a name for easier access.\n\n```r\n# Create a basic list\nmy_list <- list(100, \"Hello\", TRUE, c(1, 2, 3))\n\n# Create a named list\nstudent <- list(\n  name = \"John Smith\",\n  age = 21,\n  grades = c(85, 92, 78, 90),\n  passed = TRUE\n)\n```\n\n#### Accessing List Elements\n\nThere are multiple ways to access elements in a list:\n\n1. **Using double square brackets `[[]]`** for a single element:\n   ```r\n   student[[1]]        # Returns \"John Smith\"\n   student[[\"name\"]]   # Returns \"John Smith\"\n   ```\n\n2. **Using the dollar sign `$`** for named elements:\n   ```r\n   student$name        # Returns \"John Smith\"\n   student$grades[2]   # Returns 92 (second element of grades)\n   ```\n\n3. **Using single square brackets `[]`** to get a sublist:\n   ```r\n   student[1:2]        # Returns a list with name and age\n   student[\"grades\"]   # Returns a list with just the grades element\n   ```\n\n#### Modifying Lists\n\nLists are mutable, so you can change them after creation:\n\n```r\n# Add a new element\nstudent$email <- \"john@example.com\"\n\n# Change an existing element\nstudent$age <- 22\n\n# Remove an element\nstudent$passed <- NULL\n```\n\n### Exercise 10: Working with Lists\n\nCreate and manipulate lists:\n\n\n\n::: {.cell exercise='ex_lists_1'}\n```{webr}\n#| exercise: ex_lists_1\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_lists_1\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nLists can contain elements of different types. Use the `list()` function to create lists. Access elements using `[[]]` or `$` for named elements.\n:::\n:::\n\n::: { .solution exercise=\"ex_lists_1\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Create a list with different types\nmy_list <- list(\n  name = \"John\",\n  age = 30,\n  scores = c(85, 90, 78),\n  passed = TRUE\n)\n\n# Display the list\nmy_list\n\n# Access elements\nmy_list[[1]]  # First element\nmy_list$name  # Element by name\nmy_list$scores[2]  # Element within element\n\n# Add element to list\nmy_list$address <- \"123 R Street\"\nmy_list\n```\n:::\n:::\n\n## Data Frames\n\nData frames are the most common data structure for tabular data in R. They're similar to tables in a database, spreadsheets, or CSV files.\n\n### Key Features of Data Frames\n\n- Rectangular data (rows and columns)\n- Each column can be a different data type\n- All columns must have the same length\n- Each column has a name\n- Rows can be named (but often aren't)\n\n### Creating Data Frames\n\nData frames are created using the `data.frame()` function:\n\n```r\n# Create a data frame\nstudents <- data.frame(\n  name = c(\"Alice\", \"Bob\", \"Charlie\", \"David\"),\n  age = c(22, 25, 21, 24),\n  grade = c(85, 92, 78, 95),\n  pass = c(TRUE, TRUE, FALSE, TRUE)\n)\n```\n\nYou can also create data frames from external sources using functions like:\n- `read.csv()` - read from CSV files\n- `read.table()` - read from text files\n- `read_excel()` - read from Excel files (requires the readxl package)\n\n### Examining Data Frames\n\nR provides several functions to examine data frames:\n\n```r\n# View the structure of a data frame\nstr(students)\n\n# Show the first few rows\nhead(students)\n\n# Show the last few rows\ntail(students)\n\n# Get a summary of the data frame\nsummary(students)\n\n# Get the dimensions (rows, columns)\ndim(students)\n\n# Get the column names\nnames(students)\n```\n\n### Exercise 11: Creating Data Frames\n\nCreate a data frame to store structured data:\n\n\n\n::: {.cell exercise='ex_df_1'}\n```{webr}\n#| exercise: ex_df_1\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_df_1\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nA data frame is a table-like structure where each column can contain data of a different type. Use the `data.frame()` function to create data frames.\n:::\n:::\n\n::: { .solution exercise=\"ex_df_1\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Create a data frame\nstudents <- data.frame(\n  name = c(\"Alice\", \"Bob\", \"Charlie\", \"David\"),\n  age = c(22, 24, 21, 23),\n  gpa = c(3.8, 3.2, 3.9, 3.5),\n  graduated = c(TRUE, TRUE, FALSE, TRUE)\n)\n\n# Display the data frame\nstudents\n\n# Structure of data frame\nstr(students)\n\n# Summary statistics\nsummary(students)\n```\n:::\n:::\n\n### Accessing Data Frame Elements\n\nYou can access elements of a data frame in several ways:\n\n#### 1. Using column names with the `$` operator:\n\n```r\n# Get an entire column\nstudents$name  # Returns c(\"Alice\", \"Bob\", \"Charlie\", \"David\")\n\n# Get a specific element\nstudents$age[2]  # Returns 25 (Bob's age)\n```\n\n#### 2. Using square brackets `[row, column]`:\n\n```r\n# Get a specific cell (row 2, column 3)\nstudents[2, 3]  # Returns 92 (Bob's grade)\n\n# Get multiple rows/columns\nstudents[1:2, c(\"name\", \"age\")]  # First two students, name and age only\n\n# Get all rows of a column\nstudents[, \"name\"]  # All names\n\n# Get all columns for a row\nstudents[2, ]  # All data for Bob\n```\n\n#### 3. Filtering data frames with logical conditions:\n\n```r\n# Get rows where age is over 22\nstudents[students$age > 22, ]\n\n# Get rows where student passed\nstudents[students$pass == TRUE, ]\n\n# Combine conditions\nstudents[students$age > 22 & students$pass == TRUE, ]\n```\n\n### Modifying Data Frames\n\nData frames can be modified after creation:\n\n```r\n# Add a new column\nstudents$email <- c(\"alice@example.com\", \"bob@example.com\", \n                   \"charlie@example.com\", \"david@example.com\")\n\n# Change a value\nstudents$age[3] <- 22\n\n# Add a new row\nnew_student <- data.frame(\n  name = \"Eve\",\n  age = 23,\n  grade = 88,\n  pass = TRUE,\n  email = \"eve@example.com\"\n)\nstudents <- rbind(students, new_student)\n```\n\n### Exercise 12: Accessing Data Frames\n\nAccess and manipulate data frames:\n\n\n\n::: {.cell exercise='ex_df_2'}\n```{webr}\n#| exercise: ex_df_2\n# Pre-defined data frame\nemployees <- data.frame(\n  name = c(\"Smith\", \"Johnson\", \"Williams\", \"Jones\", \"Brown\"),\n  department = c(\"HR\", \"IT\", \"Finance\", \"IT\", \"HR\"),\n  salary = c(55000, 65000, 70000, 68000, 52000),\n  hire_date = as.Date(c(\"2018-03-15\", \"2019-07-10\", \"2017-11-28\", \n                         \"2020-01-05\", \"2018-06-20\"))\n)\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_df_2\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nAccess data frame columns using `$` notation or by specifying rows and columns with `[row, column]` notation.\n:::\n:::\n\n::: { .solution exercise=\"ex_df_2\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Pre-defined data frame\nemployees <- data.frame(\n  name = c(\"Smith\", \"Johnson\", \"Williams\", \"Jones\", \"Brown\"),\n  department = c(\"HR\", \"IT\", \"Finance\", \"IT\", \"HR\"),\n  salary = c(55000, 65000, 70000, 68000, 52000),\n  hire_date = as.Date(c(\"2018-03-15\", \"2019-07-10\", \"2017-11-28\", \n                         \"2020-01-05\", \"2018-06-20\"))\n)\n\n# Display the full data frame\nemployees\n\n# Access column by name\nemployees$name\n\n# Access specific rows and columns\nemployees[2, 3]  # Row 2, Column 3\nemployees[1:3, c(\"name\", \"salary\")]  # Rows 1-3, name and salary columns\n\n# Filter data frame\nit_employees <- employees[employees$department == \"IT\", ]\nit_employees\n\n# Calculate average salary\nmean(employees$salary)\n\n# Sort data frame\nemployees[order(employees$salary), ]\n```\n:::\n::: ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
