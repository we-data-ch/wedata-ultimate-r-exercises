{
  "hash": "cb0264840e8b63ad2a02ce179417a7cf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Methods Workshop in Quantitative Text Analysis Translated in R\nauthor:\n  - name: Jisu Kim\n    url: https://github.com/jisukimmmm\n  - name: Vestin Hategekimana (translator)\n    url: https://github.com/CyuHat\ndate: \"21/03/2024\"\nengine: knitr\nformat: live-html\nwebr:\n  packages:\n    - dplyr\n    - ggplot2\n    - readr\nresources:\n  - data\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# Preface\n\nThis work is a translation of the a Python tutorial from the following repository: [https://github.com/jisukimmmm/NCCR_MWQTA_2024](https://github.com/jisukimmmm/NCCR_MWQTA_2024)\n\nIt was then transformed in an interactive tutorial.\n\n# Introduction to R language - exercises & answers\n\n## Basic Syntax and Operations:\n\n### 1. Calculate the area of a triangle:\n\nWrite a program to calculate the area of a triangle given its base and height.\n\n\n\n::: {.cell autorun='false' exercise='ex_1'}\n```{webr}\n#| autorun: false\n#| exercise: ex_1\n# answer:\nbase <- 10\nheight <- 3\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_1\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nThe area of a triangle is calculated using the formula: (base * height) / 2\n:::\n:::\n\n::: { .solution exercise=\"ex_1\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\nbase <- 10\nheight <- 3\n\ntriangle <- base * height / 2\n\npaste(\"This is the area:\", triangle)\n```\n:::\n:::\n\n### 2. Speed Conversion\n\nCreate a program that converts kilometers per hour to meters per second.\n\n\n\n::: {.cell autorun='false' exercise='ex_2'}\n```{webr}\n#| autorun: false\n#| exercise: ex_2\n# answer:\nkmph <- 100\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_2\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nTo convert km/h to m/s:\n1. Multiply by 1000 to convert km to m\n2. Divide by 3600 to convert hours to seconds\n:::\n:::\n\n::: { .solution exercise=\"ex_2\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\nkmph <- 100\nms <- kmph * 1000 / 3600\npaste(\"The answer is\", ms)\n```\n:::\n:::\n\n### 3. String Reversal\n\nWrite an R script that takes a string as input and prints its reverse.\n\n\n\n::: {.cell autorun='false' exercise='ex_3'}\n```{webr}\n#| autorun: false\n#| exercise: ex_3\n# answer:\nmy_text <- \"This is a text\"\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_3\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nUse `strsplit()` to split the string into characters, `rev()` to reverse them, and `paste()` with `collapse` to join them back.\n:::\n:::\n\n::: { .solution exercise=\"ex_3\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\nmy_text <- \"This is a text\"\nrev_text <- paste(rev(strsplit(my_text, NULL)[[1]]), collapse = \"\")\nrev_text\n```\n:::\n:::\n\n## Conditional Statements and Loops:\n\n### 1. Leap Year Check\n\nCreate a program that checks whether a given year is a leap year or not.\n\n\n\n::: {.cell autorun='false' exercise='ex_4'}\n```{webr}\n#| autorun: false\n#| exercise: ex_4\n# answer:\nyear <- 3000\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_4\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nA year is a leap year if:\n- It's divisible by 4 AND not divisible by 100\n- OR it's divisible by 400\nUse the modulo operator `%%` to check divisibility\n:::\n:::\n\n::: { .solution exercise=\"ex_4\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\nyear <- 3000\nif ((year %% 4 == 0 && year %% 100 != 0) | (year %% 400 == 0)) {\n  \"This is a leap year\"\n} else {\n  \"This is not a leap year\"\n}\n```\n:::\n:::\n\n### 2. Sum of Multiples\n\nWrite an R script to find the sum of all numbers between 1 and 1000 that are divisible by both 3 and 5.\n\n\n\n::: {.cell autorun='false' exercise='ex_5'}\n```{webr}\n#| autorun: false\n#| exercise: ex_5\n# answer:\nnumbers <- 1:1000\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_5\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\n1. Create a sequence from 1 to 1000\n2. Use vector operations with modulo to find numbers divisible by both 3 and 5\n3. Use `sum()` to add them up\n:::\n:::\n\n::: { .solution exercise=\"ex_5\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\nnumbers <- 1:1000\nbag <- numbers[numbers %% 3 == 0 & numbers %% 5 == 0]\nsum(bag)\n```\n:::\n:::\n\n### 3. Geometric Progression\n\nImplement a program to print the first 10 terms of the geometric progression series: 2, 6, 18, 54, ...\n\n\n\n::: {.cell autorun='false' exercise='ex_6'}\n```{webr}\n#| autorun: false\n#| exercise: ex_6\n# answer:\ncommon_ratio <- 3\ngp_series <- 2\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_6\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\n1. Create a numeric vector to store the series\n2. First term is given\n3. Each subsequent term is previous term multiplied by common ratio\n:::\n:::\n\n::: { .solution exercise=\"ex_6\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\ncommon_ratio <- 3\ngp_series <- 2\n\nfor (i in 2:10) {\n  gp_series[i] <- gp_series[i-1] * common_ratio\n}\ngp_series\n```\n:::\n:::\n\n## Lists and List Operations:\n\n### 1. Largest and Smallest Elements\n\nCreate a program to find the largest and smallest elements in a list.\n\n\n\n::: {.cell autorun='false' exercise='ex_7'}\n```{webr}\n#| autorun: false\n#| exercise: ex_7\n# answer:\nnumber_list <- c(2, 5, 1, 67, 4, 7)\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_7\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nUse R's built-in functions:\n- `min()` for smallest element\n- `max()` for largest element\n:::\n:::\n\n::: { .solution exercise=\"ex_7\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\nnumber_list <- c(2, 5, 1, 67, 4, 7)\nmini <- min(number_list)\nmaxi <- max(number_list)\npaste(\"Min:\", mini, \"Max:\", maxi)\n```\n:::\n:::\n\n### 2. List Intersection\n\nWrite an R script to find the intersection of two lists.\n\n\n\n::: {.cell autorun='false' exercise='ex_8'}\n```{webr}\n#| autorun: false\n#| exercise: ex_8\n# answer:\nlist1 <- c(1, 2, 3, 4, 5)\nlist2 <- c(4, 5, 6, 7, 8)\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_8\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nUse the `intersect()` function to find common elements between two vectors\n:::\n:::\n\n::: { .solution exercise=\"ex_8\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\nlist1 <- c(1, 2, 3, 4, 5)\nlist2 <- c(4, 5, 6, 7, 8)\nintersection <- intersect(list1, list2)\nintersection\n```\n:::\n:::\n\n### 3. Program to shuffle a deck of cards (x)\n\nImplement a program to shuffle a deck of cards represented as a list.\n\n\n\n::: {.cell autorun='false' exercise='ex_9'}\n```{webr}\n#| autorun: false\n#| exercise: ex_9\n# answer:\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_9\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nUse the `sample()` function to randomly shuffle elements in a vector. First create a vector with all cards.\n:::\n:::\n\n::: { .solution exercise=\"ex_9\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\ndeck <- c(\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\")\nshuffled_deck <- sample(deck)\n\nprint(shuffled_deck)\n```\n:::\n:::\n\n## Strings and String Operations:\n\n### 1. Capitalize the first letter of each word (x)\n\nWrite an R script to capitalize the first letter of each word in a sentence.\n\n\n\n::: {.cell autorun='false' exercise='ex_10'}\n```{webr}\n#| autorun: false\n#| exercise: ex_10\n# answer:\nsentence <- \"this is a sentence\"\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_10\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nThe `tools::toTitleCase()` function can capitalize the first letter of each word in a string.\n:::\n:::\n\n::: { .solution exercise=\"ex_10\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\nsentence <- \"this is a sentence\"\ncapitalized_sentence <- tools::toTitleCase(sentence)\n\nprint(capitalized_sentence)\n```\n:::\n:::\n\n### 2. Most Frequent Character (x)\n\nCreate a program to find the most frequent character in a given string.\n\n\n\n::: {.cell autorun='false' exercise='ex_11'}\n```{webr}\n#| autorun: false\n#| exercise: ex_11\n# answer:\nstring <- \"this is a string\"\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_11\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\n1. Split the string into characters using `strsplit()`\n2. Create a frequency table with `table()`\n3. Sort in descending order and get the first element\n:::\n:::\n\n::: { .solution exercise=\"ex_11\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\nstring <- \"this is a string\"\nmost_frequent_char <- names(sort(table(strsplit(string, NULL)[[1]]), \n                               decreasing = TRUE))[1]\nmost_frequent_char\n```\n:::\n:::\n\n### 3. Check if a string contains only digits\n\nImplement a program to check if a given string contains only digits.\n\n\n\n::: {.cell autorun='false' exercise='ex_12'}\n```{webr}\n#| autorun: false\n#| exercise: ex_12\n# answer:\nstring <- \"123456\"\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_12\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\n- Use `grepl()` function with a regular expression pattern\n- The pattern `^[0-9]+$` means:\n  - `^` start of string\n  - `[0-9]` any digit\n  - `+` one or more occurrences\n  - `$` end of string\n:::\n:::\n\n::: { .solution exercise=\"ex_12\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\nstring <- \"123456\"\n\nis_digits <- grepl(\"^[0-9]+$\", string)\n\nprint(paste(\"Does the string contain only digits?\", is_digits))\n```\n:::\n:::\n\n## Functions:\n\n### 1. Perfect Square Check\n\nCreate a function to check whether a given number is a perfect square or not.\n\n\n\n::: {.cell autorun='false' exercise='ex_13'}\n```{webr}\n#| autorun: false\n#| exercise: ex_13\n# answer:\nis_perfect_square <- function(x) {\n  # ...\n}\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_13\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\n1. Take the square root of the number\n2. Check if the square root is equal to its floor value\n3. Return TRUE/FALSE accordingly\n:::\n:::\n\n::: { .solution exercise=\"ex_13\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\nis_perfect_square <- function(x) {\n  sqrt_x <- sqrt(x)\n  return(sqrt_x == floor(sqrt_x))\n}\n\n# Test the function\nis_perfect_square(16)  # Should return TRUE\nis_perfect_square(15)  # Should return FALSE\n```\n:::\n:::\n\n### 2. Reverse the elements of a vector\n\nImplement a function to reverse the elements of a list in place.\n\n\n\n::: {.cell autorun='false' exercise='ex_14'}\n```{webr}\n#| autorun: false\n#| exercise: ex_14\n# answer:\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_14\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nYou can use R's built-in `rev()` function to reverse a list or vector. Alternatively, you could write a loop that swaps elements from the beginning and end moving towards the middle.\n:::\n:::\n\n::: { .solution exercise=\"ex_14\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\nreverse_list <- function(lst) {\n  return(rev(lst))\n}\n\n# Test the function\nmy_list <- c(1, 2, 3, 4, 5)\nreversed <- reverse_list(my_list)\nprint(reversed)\n```\n:::\n:::\n\n### 3. Calculate the mean of a list of numbers\n\nCreate a function to calculate the mean (average) of a list of numbers.\n\n\n\n::: {.cell autorun='false' exercise='ex_15'}\n```{webr}\n#| autorun: false\n#| exercise: ex_15\n# answer:\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_15\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nThe mean is calculated by summing all numbers and dividing by the count of numbers. In R, you can use the built-in `mean()` function or implement it using `sum()` and `length()`.\n:::\n:::\n\n::: { .solution exercise=\"ex_15\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\ncalculate_mean <- function(numbers) {\n  return(mean(numbers))\n}\n\n# Test the function\nnumbers <- c(1, 2, 3, 4, 5)\navg <- calculate_mean(numbers)\nprint(paste(\"The mean is:\", avg))\n```\n:::\n:::\n\n## File Handling:\n\n### 1. CSV Data Analysis (x)\n\nCreate a program to read a CSV file containing student scores and calculate their average.\n\n\n\n::: {.cell autorun='false' envir='myenv' exercise='ex_16'}\n```{webr}\n#| autorun: false\n#| envir: myenv\n#| exercise: ex_16\n# answer:\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_16\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\n1. Use `readr::read_csv()` to read the CSV file\n2. Access the score column using `$`\n3. Calculate mean using `mean()`\n:::\n:::\n\n::: { .solution exercise=\"ex_16\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\n# Method 1\nstudent_scores <- read.csv(\"data/student_scores.csv\")\nmean(student_scores$score)\n\n# Method 2\nlibrary(readr)\nstudent_scores <- read_csv(\"data/student_scores.csv\")\nmean(student_scores$score)\n```\n:::\n:::\n\n### 2. Find lines containing a specific word in a text file (x)\n\nWrite a Python script to find and print all lines containing a specific word in a text file.\n\n\n\n::: {.cell autorun='false' envir='myenv' exercise='ex_17'}\n```{webr}\n#| autorun: false\n#| envir: myenv\n#| exercise: ex_17\n# answer:\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_17\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nUse `readLines()` to read the file content and `grep()` to search for matching lines. The `grep()` function with `value=TRUE` returns the actual matching lines.\n:::\n:::\n\n::: { .solution exercise=\"ex_17\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\nfind_lines_with_word <- function(file_path, word) {\n  lines <- readLines(file_path)\n  matching_lines <- grep(word, lines, value = TRUE)\n  return(matching_lines)\n}\n\n# Example usage\n# find_lines_with_word(\"example.txt\", \"specific_word\")\n```\n:::\n:::\n\n### 3. Count words in a text file\n\nImplement a program to count the number of words in a text file.\n\n\n\n::: {.cell autorun='false' envir='myenv' exercise='ex_18'}\n```{webr}\n#| autorun: false\n#| envir: myenv\n#| exercise: ex_18\n# answer:\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_18\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nBreak this down into steps:\n1. Read the file using `readLines()`\n2. Split the text into words using `strsplit()` with whitespace as delimiter\n3. Count the total words using `length()`\n:::\n:::\n\n::: { .solution exercise=\"ex_18\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\ncount_words_in_file <- function(file_path) {\n  lines <- readLines(file_path)\n  words <- unlist(strsplit(lines, \"\\\\s+\"))\n  return(length(words))\n}\n\n# Example usage\n# count_words_in_file(\"example.txt\")\n```\n:::\n:::\n\n## Plotting:\n\n### 1. Histogram\n\nHistogram of Student Scores: Create a histogram showing the distribution of student scores.\n\n\n\n::: {.cell autorun='false' envir='myenv' exercise='ex_19'}\n```{webr}\n#| autorun: false\n#| envir: myenv\n#| exercise: ex_19\n# answer:\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_19\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\n1. Load ggplot2\n2. Use `geom_histogram()`\n3. Set appropriate binwidth\n4. Add proper labels\n:::\n:::\n\n::: { .solution exercise=\"ex_19\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution:\n```r\nlibrary(ggplot2)\nggplot(student_scores, aes(x = score)) +\n  geom_histogram(binwidth = 5) +\n  labs(title = \"Histogram of Student Scores\", \n       x = \"Score\", \n       y = \"Frequency\")\n```\n:::\n:::\n\n### 2. Create a Boxplot of Student Scores\n\nBoxplot of Student Scores: Generate a boxplot to visualize the spread and central tendency of student scores.\n\n\n\n::: {.cell autorun='false' envir='myenv' exercise='ex_20'}\n```{webr}\n#| autorun: false\n#| envir: myenv\n#| exercise: ex_20\n# answer:\n\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_20\"}\n::: { .callout-note collapse=\"false\"}\n## Hint \nUse `ggplot()` with `geom_boxplot()`. The data should be mapped to the y-axis since we want a vertical boxplot. Don't forget to add appropriate labels.\n:::\n:::\n\n::: { .solution exercise=\"ex_20\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution\n```r\nggplot(student_scores, aes(y = score)) +\n  geom_boxplot() +\n  labs(title = \"Boxplot of Student Scores\", y = \"Score\")\n```\n:::\n:::\n\n### 3. Create a Scatter Plot of Student Scores\n\nScatter Plot of Student Scores: Create a scatter plot to explore the relationship between student scores and student IDs.\n\n\n\n::: {.cell autorun='false' envir='myenv' exercise='ex_21'}\n```{webr}\n#| autorun: false\n#| envir: myenv\n#| exercise: ex_21\n# answer:\nibrary(ggplot2)\nggplot(student_scores)\n```\n:::\n\n\n\n::: { .hint exercise=\"ex_21\"}\n::: { .callout-note collapse=\"false\"}\n## Hint\nUse `ggplot()` with `geom_point()`. Map student_id to x-axis and score to y-axis. Remember to include appropriate axis labels.\n:::\n:::\n\n::: { .solution exercise=\"ex_21\" }\n::: { .callout-tip collapse=\"false\"}\n## Solution\n```r\nggplot(student_scores, aes(x = student_id, y = score)) +\n  geom_point() +\n  labs(title = \"Scatter Plot of Student Scores\", x = \"Student ID\", y = \"Score\")\n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}