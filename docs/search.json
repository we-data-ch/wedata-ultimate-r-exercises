[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "WeData’s ultimate exercises",
    "section": "",
    "text": "The aim of this website is to be a compendium of knowledge on R made by members of the WeData association. It should serve both as a reference for knowledge, and as an exercise interface. We hope to highlight some important themes in this book.\n\n\n\n\nIt is free\nData analysis and statics ecosystem\nBeautiful visualization capabilities\nAmazing reporting tools\nWeb application development\nVibrant and nice community\nWidely used in research\nKey tools in specific sectors\n\n\n\n\nWhy this website? To complete existing resources with exercises. In fact, there are already numerous free or paid resources on R scattered on the internet. The main concern is not about knowing if a resource exists but about finding it. Rarely do collaborative projects try to bring together various R resources in the form of a book or website. Here are some notable examples I know of (there are probably more):\n\nThe big book of R\nBookdown\nPyofile (R and Python books)\n\nIt is amusing to find excellent resources hidden in Rmarkdown and Quarto galleries. We believe that despite the dissemination of resources, the community is doing a fantastic job trying to consolidate them, and I strongly encourage anyone interested in contributing to this effort to feed the sources mentioned earlier. However, another problem remains: there is a glaring lack of exercises and interactive resources. It’s important to note that there are platforms for doing R exercises online to some degree of interactivity. Notable cases include Exercism, Codewars and W3school (for a more comprehensive list, check our blog post). There is also the learnr package, which allows creating interactive R exercises using Rmarkdown. The system is great (at least locally), but when it comes to putting exercises online for use without installing R, it requires an active server, adding more work and concerns, particularly regarding hosting and managing a large number of requests. Our goal would be to create an exercise platform that does not require running R on a server. Is this possible? The answer is yes!\n\nThe advancements in web technologies over the past few years have given us hope to create online interactive exercise platforms without a server, and it was only recently that the idea of reusing a system like learnr within webr (the Quarto extension) surfaced. These developments are very encouraging and have inspired the creation of this platform.\n\nOur association is made up of passionate individuals with varying levels, goals, and interests. But I believe we can create an interactive resource that allows curious people to train. The objective will be to create exercise series and recommend existing resources to help users complete the exercises.\n\nThis is new territory for me, and I don’t know if it will work. Perhaps I’m missing essential elements, or web pages might be unbelievably slow or inefficient. But I believe it’s worth a try!\n\n\n\nAs we said earlier, thanks to webr, it’s now possible to use R in the browser without the need for a server (a computer that’s always running). To be more precise, R is translated into WebAssembly, which runs in the browser. All thanks to webr. If you don’t believe me, you can try R in the browser here. Or you can test it just below using the code or writting yours:\n\n\n\n\n\n\n\n\nMagic! You can use it without an R, even on your cell phone!\nQuarto’s strength lies in its ability to integrate it so seamlessly into its ecosystem. This has enabled the same webr authors to create the quarto-live extension, which adds the elements needed to create online exercises. So we can easily create interactive online exercises simply by hosting our website on a GitHub repository, with no real performance problems.\nWe can thank quarto-live for this feat. Here is an example of an exercise suggested in the documentation:\nFilter the starwars dataset so that only the droid characters are included.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nConsider using the filter() function from dplyr.\nstarwars |&gt; filter(______)\n\n\n\n\n\n\n\n\n\n\n\nHint 2\n\n\n\n\n\nYou should filter the dataset using the species column.\nstarwars |&gt; filter(species == ______)\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\nUse the filter() function from dplyr:\n1starwars |&gt;\n2    filter(species == \"Droid\")\n\n1\n\nTake the starwars dataset, and then,\n\n2\n\nFilter for the “Droid” species.\n\n\n\n\n\n\nFantastic! This allows you to have the capabilities of {learnr} without the need to install R or have a server to hold it all together. Note that quarto-live is still in its infancy and will probably improve over time."
  },
  {
    "objectID": "index.html#goal-of-this-website",
    "href": "index.html#goal-of-this-website",
    "title": "WeData’s ultimate exercises",
    "section": "",
    "text": "The aim of this website is to be a compendium of knowledge on R made by members of the WeData association. It should serve both as a reference for knowledge, and as an exercise interface. We hope to highlight some important themes in this book."
  },
  {
    "objectID": "index.html#why-r",
    "href": "index.html#why-r",
    "title": "WeData’s ultimate exercises",
    "section": "",
    "text": "It is free\nData analysis and statics ecosystem\nBeautiful visualization capabilities\nAmazing reporting tools\nWeb application development\nVibrant and nice community\nWidely used in research\nKey tools in specific sectors"
  },
  {
    "objectID": "index.html#why-this-website",
    "href": "index.html#why-this-website",
    "title": "WeData’s ultimate exercises",
    "section": "",
    "text": "Why this website? To complete existing resources with exercises. In fact, there are already numerous free or paid resources on R scattered on the internet. The main concern is not about knowing if a resource exists but about finding it. Rarely do collaborative projects try to bring together various R resources in the form of a book or website. Here are some notable examples I know of (there are probably more):\n\nThe big book of R\nBookdown\nPyofile (R and Python books)\n\nIt is amusing to find excellent resources hidden in Rmarkdown and Quarto galleries. We believe that despite the dissemination of resources, the community is doing a fantastic job trying to consolidate them, and I strongly encourage anyone interested in contributing to this effort to feed the sources mentioned earlier. However, another problem remains: there is a glaring lack of exercises and interactive resources. It’s important to note that there are platforms for doing R exercises online to some degree of interactivity. Notable cases include Exercism, Codewars and W3school (for a more comprehensive list, check our blog post). There is also the learnr package, which allows creating interactive R exercises using Rmarkdown. The system is great (at least locally), but when it comes to putting exercises online for use without installing R, it requires an active server, adding more work and concerns, particularly regarding hosting and managing a large number of requests. Our goal would be to create an exercise platform that does not require running R on a server. Is this possible? The answer is yes!\n\nThe advancements in web technologies over the past few years have given us hope to create online interactive exercise platforms without a server, and it was only recently that the idea of reusing a system like learnr within webr (the Quarto extension) surfaced. These developments are very encouraging and have inspired the creation of this platform.\n\nOur association is made up of passionate individuals with varying levels, goals, and interests. But I believe we can create an interactive resource that allows curious people to train. The objective will be to create exercise series and recommend existing resources to help users complete the exercises.\n\nThis is new territory for me, and I don’t know if it will work. Perhaps I’m missing essential elements, or web pages might be unbelievably slow or inefficient. But I believe it’s worth a try!"
  },
  {
    "objectID": "index.html#exercice-example-from-quarto-live",
    "href": "index.html#exercice-example-from-quarto-live",
    "title": "WeData’s ultimate exercises",
    "section": "",
    "text": "As we said earlier, thanks to webr, it’s now possible to use R in the browser without the need for a server (a computer that’s always running). To be more precise, R is translated into WebAssembly, which runs in the browser. All thanks to webr. If you don’t believe me, you can try R in the browser here. Or you can test it just below using the code or writting yours:\n\n\n\n\n\n\n\n\nMagic! You can use it without an R, even on your cell phone!\nQuarto’s strength lies in its ability to integrate it so seamlessly into its ecosystem. This has enabled the same webr authors to create the quarto-live extension, which adds the elements needed to create online exercises. So we can easily create interactive online exercises simply by hosting our website on a GitHub repository, with no real performance problems.\nWe can thank quarto-live for this feat. Here is an example of an exercise suggested in the documentation:\nFilter the starwars dataset so that only the droid characters are included.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nConsider using the filter() function from dplyr.\nstarwars |&gt; filter(______)\n\n\n\n\n\n\n\n\n\n\n\nHint 2\n\n\n\n\n\nYou should filter the dataset using the species column.\nstarwars |&gt; filter(species == ______)\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\nUse the filter() function from dplyr:\n1starwars |&gt;\n2    filter(species == \"Droid\")\n\n1\n\nTake the starwars dataset, and then,\n\n2\n\nFilter for the “Droid” species.\n\n\n\n\n\n\nFantastic! This allows you to have the capabilities of {learnr} without the need to install R or have a server to hold it all together. Note that quarto-live is still in its infancy and will probably improve over time."
  },
  {
    "objectID": "intermediate.html",
    "href": "intermediate.html",
    "title": "Intermediate",
    "section": "",
    "text": "Intermediate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidyverse II: Intermediate Data Wrangling\n\n\n\n\n\nDeep dive into joins, pivots, string ops and more with the tidyverse\n\n\n\n\n\nMay 11, 2025\n\n\nDavid Munoz Tord\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Exercises_answers.html",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Exercises_answers.html",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R",
    "section": "",
    "text": "This work is a translation of the a Python tutorial from the following repository: https://github.com/jisukimmmm/NCCR_MWQTA_2024\nIt was then transformed in an interactive tutorial."
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Exercises_answers.html#basic-syntax-and-operations",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Exercises_answers.html#basic-syntax-and-operations",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R",
    "section": "Basic Syntax and Operations:",
    "text": "Basic Syntax and Operations:\n\n1. Calculate the area of a triangle:\nWrite a program to calculate the area of a triangle given its base and height.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nThe area of a triangle is calculated using the formula: (base * height) / 2\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\nbase &lt;- 10\nheight &lt;- 3\n\ntriangle &lt;- base * height / 2\n\npaste(\"This is the area:\", triangle)\n\n\n\n\n\n\n2. Speed Conversion\nCreate a program that converts kilometers per hour to meters per second.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nTo convert km/h to m/s: 1. Multiply by 1000 to convert km to m 2. Divide by 3600 to convert hours to seconds\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\nkmph &lt;- 100\nms &lt;- kmph * 1000 / 3600\npaste(\"The answer is\", ms)\n\n\n\n\n\n\n3. String Reversal\nWrite an R script that takes a string as input and prints its reverse.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse strsplit() to split the string into characters, rev() to reverse them, and paste() with collapse to join them back.\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\nmy_text &lt;- \"This is a text\"\nrev_text &lt;- paste(rev(strsplit(my_text, NULL)[[1]]), collapse = \"\")\nrev_text"
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Exercises_answers.html#conditional-statements-and-loops",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Exercises_answers.html#conditional-statements-and-loops",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R",
    "section": "Conditional Statements and Loops:",
    "text": "Conditional Statements and Loops:\n\n1. Leap Year Check\nCreate a program that checks whether a given year is a leap year or not.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nA year is a leap year if: - It’s divisible by 4 AND not divisible by 100 - OR it’s divisible by 400 Use the modulo operator %% to check divisibility\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\nyear &lt;- 3000\nif ((year %% 4 == 0 && year %% 100 != 0) | (year %% 400 == 0)) {\n  \"This is a leap year\"\n} else {\n  \"This is not a leap year\"\n}\n\n\n\n\n\n\n2. Sum of Multiples\nWrite an R script to find the sum of all numbers between 1 and 1000 that are divisible by both 3 and 5.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n\nCreate a sequence from 1 to 1000\nUse vector operations with modulo to find numbers divisible by both 3 and 5\nUse sum() to add them up\n\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\nnumbers &lt;- 1:1000\nbag &lt;- numbers[numbers %% 3 == 0 & numbers %% 5 == 0]\nsum(bag)\n\n\n\n\n\n\n3. Geometric Progression\nImplement a program to print the first 10 terms of the geometric progression series: 2, 6, 18, 54, …\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n\nCreate a numeric vector to store the series\nFirst term is given\nEach subsequent term is previous term multiplied by common ratio\n\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\ncommon_ratio &lt;- 3\ngp_series &lt;- 2\n\nfor (i in 2:10) {\n  gp_series[i] &lt;- gp_series[i-1] * common_ratio\n}\ngp_series"
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Exercises_answers.html#lists-and-list-operations",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Exercises_answers.html#lists-and-list-operations",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R",
    "section": "Lists and List Operations:",
    "text": "Lists and List Operations:\n\n1. Largest and Smallest Elements\nCreate a program to find the largest and smallest elements in a list.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse R’s built-in functions: - min() for smallest element - max() for largest element\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\nnumber_list &lt;- c(2, 5, 1, 67, 4, 7)\nmini &lt;- min(number_list)\nmaxi &lt;- max(number_list)\npaste(\"Min:\", mini, \"Max:\", maxi)\n\n\n\n\n\n\n2. List Intersection\nWrite an R script to find the intersection of two lists.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the intersect() function to find common elements between two vectors\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\nlist1 &lt;- c(1, 2, 3, 4, 5)\nlist2 &lt;- c(4, 5, 6, 7, 8)\nintersection &lt;- intersect(list1, list2)\nintersection\n\n\n\n\n\n\n3. Program to shuffle a deck of cards (x)\nImplement a program to shuffle a deck of cards represented as a list.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the sample() function to randomly shuffle elements in a vector. First create a vector with all cards.\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\ndeck &lt;- c(\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\")\nshuffled_deck &lt;- sample(deck)\n\nprint(shuffled_deck)"
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Exercises_answers.html#strings-and-string-operations",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Exercises_answers.html#strings-and-string-operations",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R",
    "section": "Strings and String Operations:",
    "text": "Strings and String Operations:\n\n1. Capitalize the first letter of each word (x)\nWrite an R script to capitalize the first letter of each word in a sentence.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nThe tools::toTitleCase() function can capitalize the first letter of each word in a string.\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\nsentence &lt;- \"this is a sentence\"\ncapitalized_sentence &lt;- tools::toTitleCase(sentence)\n\nprint(capitalized_sentence)\n\n\n\n\n\n\n2. Most Frequent Character (x)\nCreate a program to find the most frequent character in a given string.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n\nSplit the string into characters using strsplit()\nCreate a frequency table with table()\nSort in descending order and get the first element\n\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\nstring &lt;- \"this is a string\"\nmost_frequent_char &lt;- names(sort(table(strsplit(string, NULL)[[1]]), \n                               decreasing = TRUE))[1]\nmost_frequent_char\n\n\n\n\n\n\n3. Check if a string contains only digits\nImplement a program to check if a given string contains only digits.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n\nUse grepl() function with a regular expression pattern\nThe pattern ^[0-9]+$ means:\n\n^ start of string\n[0-9] any digit\n+ one or more occurrences\n$ end of string\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\nstring &lt;- \"123456\"\n\nis_digits &lt;- grepl(\"^[0-9]+$\", string)\n\nprint(paste(\"Does the string contain only digits?\", is_digits))"
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Exercises_answers.html#functions",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Exercises_answers.html#functions",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R",
    "section": "Functions:",
    "text": "Functions:\n\n1. Perfect Square Check\nCreate a function to check whether a given number is a perfect square or not.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n\nTake the square root of the number\nCheck if the square root is equal to its floor value\nReturn TRUE/FALSE accordingly\n\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\nis_perfect_square &lt;- function(x) {\n  sqrt_x &lt;- sqrt(x)\n  return(sqrt_x == floor(sqrt_x))\n}\n\n# Test the function\nis_perfect_square(16)  # Should return TRUE\nis_perfect_square(15)  # Should return FALSE\n\n\n\n\n\n\n2. Reverse the elements of a vector\nImplement a function to reverse the elements of a list in place.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nYou can use R’s built-in rev() function to reverse a list or vector. Alternatively, you could write a loop that swaps elements from the beginning and end moving towards the middle.\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\nreverse_list &lt;- function(lst) {\n  return(rev(lst))\n}\n\n# Test the function\nmy_list &lt;- c(1, 2, 3, 4, 5)\nreversed &lt;- reverse_list(my_list)\nprint(reversed)\n\n\n\n\n\n\n3. Calculate the mean of a list of numbers\nCreate a function to calculate the mean (average) of a list of numbers.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nThe mean is calculated by summing all numbers and dividing by the count of numbers. In R, you can use the built-in mean() function or implement it using sum() and length().\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\ncalculate_mean &lt;- function(numbers) {\n  return(mean(numbers))\n}\n\n# Test the function\nnumbers &lt;- c(1, 2, 3, 4, 5)\navg &lt;- calculate_mean(numbers)\nprint(paste(\"The mean is:\", avg))"
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Exercises_answers.html#file-handling",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Exercises_answers.html#file-handling",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R",
    "section": "File Handling:",
    "text": "File Handling:\n\n1. CSV Data Analysis (x)\nCreate a program to read a CSV file containing student scores and calculate their average.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n\nUse readr::read_csv() to read the CSV file\nAccess the score column using $\nCalculate mean using mean()\n\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Method 1\nstudent_scores &lt;- read.csv(\"data/student_scores.csv\")\nmean(student_scores$score)\n\n# Method 2\nlibrary(readr)\nstudent_scores &lt;- read_csv(\"data/student_scores.csv\")\nmean(student_scores$score)\n\n\n\n\n\n\n2. Find lines containing a specific word in a text file (x)\nWrite a Python script to find and print all lines containing a specific word in a text file.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse readLines() to read the file content and grep() to search for matching lines. The grep() function with value=TRUE returns the actual matching lines.\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\nfind_lines_with_word &lt;- function(file_path, word) {\n  lines &lt;- readLines(file_path)\n  matching_lines &lt;- grep(word, lines, value = TRUE)\n  return(matching_lines)\n}\n\n# Example usage\n# find_lines_with_word(\"example.txt\", \"specific_word\")\n\n\n\n\n\n\n3. Count words in a text file\nImplement a program to count the number of words in a text file.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nBreak this down into steps: 1. Read the file using readLines() 2. Split the text into words using strsplit() with whitespace as delimiter 3. Count the total words using length()\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\ncount_words_in_file &lt;- function(file_path) {\n  lines &lt;- readLines(file_path)\n  words &lt;- unlist(strsplit(lines, \"\\\\s+\"))\n  return(length(words))\n}\n\n# Example usage\n# count_words_in_file(\"example.txt\")"
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Exercises_answers.html#plotting",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Exercises_answers.html#plotting",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R",
    "section": "Plotting:",
    "text": "Plotting:\n\n1. Histogram\nHistogram of Student Scores: Create a histogram showing the distribution of student scores.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n\nLoad ggplot2\nUse geom_histogram()\nSet appropriate binwidth\nAdd proper labels\n\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\nlibrary(ggplot2)\nggplot(student_scores, aes(x = score)) +\n  geom_histogram(binwidth = 5) +\n  labs(title = \"Histogram of Student Scores\", \n       x = \"Score\", \n       y = \"Frequency\")\n\n\n\n\n\n\n2. Create a Boxplot of Student Scores\nBoxplot of Student Scores: Generate a boxplot to visualize the spread and central tendency of student scores.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse ggplot() with geom_boxplot(). The data should be mapped to the y-axis since we want a vertical boxplot. Don’t forget to add appropriate labels.\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(student_scores, aes(y = score)) +\n  geom_boxplot() +\n  labs(title = \"Boxplot of Student Scores\", y = \"Score\")\n\n\n\n\n\n\n3. Create a Scatter Plot of Student Scores\nScatter Plot of Student Scores: Create a scatter plot to explore the relationship between student scores and student IDs.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse ggplot() with geom_point(). Map student_id to x-axis and score to y-axis. Remember to include appropriate axis labels.\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(student_scores, aes(x = student_id, y = score)) +\n  geom_point() +\n  labs(title = \"Scatter Plot of Student Scores\", x = \"Student ID\", y = \"Score\")"
  },
  {
    "objectID": "beginner/r-foundations2/foundations_II.html",
    "href": "beginner/r-foundations2/foundations_II.html",
    "title": "R Language Basics II",
    "section": "",
    "text": "Functions in R are like the Force - they give you the power to create reusable code that can be called upon whenever needed. Think of them as your personal Jedi powers that you can use over and over again!\n\n\nFunctions are created using the function() keyword, followed by arguments in parentheses and the function body in curly braces. It’s like creating your own lightsaber - you need the right components and the right technique!\n# Basic function structure\ncalculate_power &lt;- function(base_power, multiplier) {\n  total_power &lt;- base_power * multiplier\n  return(total_power)\n}\n\n# Using the function\njedi_power &lt;- calculate_power(80, 1.5)  # Returns 120\n\n\n\nFunctions can have: - Required arguments (like a lightsaber - you need it!) - Default arguments (like having a backup blaster) - Optional arguments (like that thermal detonator you hope you won’t need)\n# Function with default arguments\ncalculate_force_power &lt;- function(base_power, multiplier = 1.5, is_dark_side = FALSE) {\n  if (is_dark_side) {\n    total_power &lt;- base_power * multiplier * 1.2  # Dark side bonus!\n  } else {\n    total_power &lt;- base_power * multiplier\n  }\n  return(total_power)\n}\n\n# Using with different arguments\nlight_side &lt;- calculate_force_power(80)  # Uses defaults\ndark_side &lt;- calculate_force_power(80, is_dark_side = TRUE)  # Override default\n\n\n\nCreate a function that calculates a character’s total power level based on their base stats and equipment:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nCreate a function that takes base stats and equipment bonuses as arguments. Remember to use the function() keyword and return() statement. It’s like creating your own power calculator!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Create a function to calculate total power\ncalculate_character_power &lt;- function(base_power, weapon_bonus = 0, armor_bonus = 0) {\n  total_power &lt;- base_power + weapon_bonus + armor_bonus\n  return(total_power)\n}\n\n# Test the function\njedi_power &lt;- calculate_character_power(80, 20, 10)  # Base 80 + Lightsaber 20 + Robes 10\nsith_power &lt;- calculate_character_power(85, 25, 15)  # Base 85 + Red Lightsaber 25 + Armor 15\n\n# Print results\nprint(paste(\"Jedi Power Level:\", jedi_power))\nprint(paste(\"Sith Power Level:\", sith_power))"
  },
  {
    "objectID": "beginner/r-foundations2/foundations_II.html#functions-your-codes-superpower",
    "href": "beginner/r-foundations2/foundations_II.html#functions-your-codes-superpower",
    "title": "R Language Basics II",
    "section": "",
    "text": "Functions in R are like the Force - they give you the power to create reusable code that can be called upon whenever needed. Think of them as your personal Jedi powers that you can use over and over again!\n\n\nFunctions are created using the function() keyword, followed by arguments in parentheses and the function body in curly braces. It’s like creating your own lightsaber - you need the right components and the right technique!\n# Basic function structure\ncalculate_power &lt;- function(base_power, multiplier) {\n  total_power &lt;- base_power * multiplier\n  return(total_power)\n}\n\n# Using the function\njedi_power &lt;- calculate_power(80, 1.5)  # Returns 120\n\n\n\nFunctions can have: - Required arguments (like a lightsaber - you need it!) - Default arguments (like having a backup blaster) - Optional arguments (like that thermal detonator you hope you won’t need)\n# Function with default arguments\ncalculate_force_power &lt;- function(base_power, multiplier = 1.5, is_dark_side = FALSE) {\n  if (is_dark_side) {\n    total_power &lt;- base_power * multiplier * 1.2  # Dark side bonus!\n  } else {\n    total_power &lt;- base_power * multiplier\n  }\n  return(total_power)\n}\n\n# Using with different arguments\nlight_side &lt;- calculate_force_power(80)  # Uses defaults\ndark_side &lt;- calculate_force_power(80, is_dark_side = TRUE)  # Override default\n\n\n\nCreate a function that calculates a character’s total power level based on their base stats and equipment:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nCreate a function that takes base stats and equipment bonuses as arguments. Remember to use the function() keyword and return() statement. It’s like creating your own power calculator!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Create a function to calculate total power\ncalculate_character_power &lt;- function(base_power, weapon_bonus = 0, armor_bonus = 0) {\n  total_power &lt;- base_power + weapon_bonus + armor_bonus\n  return(total_power)\n}\n\n# Test the function\njedi_power &lt;- calculate_character_power(80, 20, 10)  # Base 80 + Lightsaber 20 + Robes 10\nsith_power &lt;- calculate_character_power(85, 25, 15)  # Base 85 + Red Lightsaber 25 + Armor 15\n\n# Print results\nprint(paste(\"Jedi Power Level:\", jedi_power))\nprint(paste(\"Sith Power Level:\", sith_power))"
  },
  {
    "objectID": "beginner/r-foundations2/foundations_II.html#control-structures-the-force-of-decision-making",
    "href": "beginner/r-foundations2/foundations_II.html#control-structures-the-force-of-decision-making",
    "title": "R Language Basics II",
    "section": "Control Structures: The Force of Decision Making",
    "text": "Control Structures: The Force of Decision Making\nControl structures in R are like the Jedi Council - they help you make decisions and control the flow of your code. They’re essential for creating complex programs that can adapt to different situations.\n\nIf-Else Statements\nThe if-else structure lets you make decisions based on conditions:\n# Basic if-else\ncheck_force_power &lt;- function(power_level) {\n  if (power_level &gt; 100) {\n    return(\"Master Jedi Level\")\n  } else if (power_level &gt; 50) {\n    return(\"Padawan Level\")\n  } else {\n    return(\"Force Sensitive\")\n  }\n}\n\n# Using if-else\npower_status &lt;- check_force_power(120)  # Returns \"Master Jedi Level\"\n\n\nLoops: The Repetitive Force\nLoops are like having a clone army - they let you repeat actions multiple times!\n\nFor Loops\n# Basic for loop\nfor (i in 1:5) {\n  print(paste(\"Training Day\", i))\n}\n\n# For loop with a vector\njedi_council &lt;- c(\"Yoda\", \"Mace Windu\", \"Obi-Wan\")\nfor (master in jedi_council) {\n  print(paste(master, \"is on the council\"))\n}\n\n\nWhile Loops\n# While loop example\npower_level &lt;- 50\nwhile (power_level &lt; 100) {\n  print(paste(\"Current power level:\", power_level))\n  power_level &lt;- power_level + 10\n}\n\n\n\nExercise 2: Control Structures\nCreate a program that simulates a Jedi training session:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse if-else statements to check power levels and loops to simulate training sessions. Think of it as creating your own Jedi training program!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Function to simulate Jedi training\nsimulate_training &lt;- function(initial_power, training_days) {\n  current_power &lt;- initial_power\n  \n  for (day in 1:training_days) {\n    # Random power increase (like meditation success)\n    power_increase &lt;- sample(1:10, 1)\n    current_power &lt;- current_power + power_increase\n    \n    # Check power level and give feedback\n    if (current_power &gt;= 100) {\n      print(paste(\"Day\", day, \": Master Jedi achieved! Power level:\", current_power))\n    } else if (current_power &gt;= 50) {\n      print(paste(\"Day\", day, \": Padawan level reached! Power level:\", current_power))\n    } else {\n      print(paste(\"Day\", day, \": Still training... Power level:\", current_power))\n    }\n  }\n  \n  return(current_power)\n}\n\n# Run the simulation\nfinal_power &lt;- simulate_training(30, 10)\nprint(paste(\"Final power level:\", final_power))"
  },
  {
    "objectID": "beginner/r-foundations2/foundations_II.html#string-operations-the-power-of-words",
    "href": "beginner/r-foundations2/foundations_II.html#string-operations-the-power-of-words",
    "title": "R Language Basics II",
    "section": "String Operations: The Power of Words",
    "text": "String Operations: The Power of Words\nString operations in R are like having a universal translator - they help you manipulate and transform text in various ways.\n\nBasic String Operations\n# String concatenation\nfirst_name &lt;- \"Luke\"\nlast_name &lt;- \"Skywalker\"\nfull_name &lt;- paste(first_name, last_name)  # Returns \"Luke Skywalker\"\n\n# String length\nnchar(full_name)  # Returns 13\n\n# Substring extraction\nsubstr(full_name, 1, 4)  # Returns \"Luke\"\n\n# Case conversion\ntoupper(full_name)  # Returns \"LUKE SKYWALKER\"\ntolower(full_name)  # Returns \"luke skywalker\"\n\n\nRegular Expressions\nRegular expressions are like having a Force-powered search tool:\n# Basic pattern matching\njedi_names &lt;- c(\"Luke Skywalker\", \"Obi-Wan Kenobi\", \"Yoda\", \"Mace Windu\")\ngrep(\"Sky\", jedi_names)  # Returns 1 (position of \"Luke Skywalker\")\n\n# Pattern replacement\ngsub(\"Sky\", \"Force\", full_name)  # Returns \"Luke Forcewalker\"\n\n# Pattern matching with more detail\ngrepl(\"^[A-Z]\", jedi_names)  # Returns TRUE for names starting with capital letter\n\n\nExercise 3: String Operations\nCreate a function that processes Jedi names and titles:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse string functions like paste(), substr(), gsub(), and regular expressions to manipulate text. It’s like creating your own Jedi name generator!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Function to process Jedi names\nprocess_jedi_name &lt;- function(first_name, last_name, rank = \"Padawan\") {\n  # Create full name\n  full_name &lt;- paste(first_name, last_name)\n  \n  # Add rank title\n  titled_name &lt;- paste(rank, full_name)\n  \n  # Count characters\n  name_length &lt;- nchar(full_name)\n  \n  # Create Jedi code name (first 3 letters of first name + last 2 of last name)\n  code_name &lt;- paste(\n    substr(first_name, 1, 3),\n    substr(last_name, nchar(last_name)-1, nchar(last_name)),\n    sep = \"\"\n  )\n  \n  # Convert to uppercase for dramatic effect\n  code_name &lt;- toupper(code_name)\n  \n  # Return results as a list\n  return(list(\n    full_name = full_name,\n    titled_name = titled_name,\n    name_length = name_length,\n    code_name = code_name\n  ))\n}\n\n# Test the function\njedi_info &lt;- process_jedi_name(\"Luke\", \"Skywalker\", \"Master\")\nprint(jedi_info)"
  },
  {
    "objectID": "beginner/r-foundations2/foundations_II.html#date-and-time-operations-the-force-of-time",
    "href": "beginner/r-foundations2/foundations_II.html#date-and-time-operations-the-force-of-time",
    "title": "R Language Basics II",
    "section": "Date and Time Operations: The Force of Time",
    "text": "Date and Time Operations: The Force of Time\nWorking with dates and times in R is like having a time-traveling DeLorean - it helps you manipulate temporal data with precision!\n\nBasic Date Operations\n# Creating dates\nbirth_date &lt;- as.Date(\"1977-05-25\")  # Star Wars release date\ncurrent_date &lt;- Sys.Date()\n\n# Date arithmetic\ndays_since_release &lt;- current_date - birth_date\n\n# Formatting dates\nformat(birth_date, \"%B %d, %Y\")  # Returns \"May 25, 1977\"\n\n# Extracting components\nyear &lt;- format(birth_date, \"%Y\")\nmonth &lt;- format(birth_date, \"%m\")\nday &lt;- format(birth_date, \"%d\")\n\n\nTime Operations\n# Working with times\ncurrent_time &lt;- Sys.time()\n\n# Formatting times\nformat(current_time, \"%H:%M:%S\")  # Returns current time in HH:MM:SS format\n\n# Time differences\ntime_diff &lt;- difftime(current_time, birth_date, units = \"hours\")\n\n\nExercise 4: Date and Time Operations\nCreate a function that calculates various time-based statistics for a Jedi’s training period:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse as.Date(), Sys.Date(), and date arithmetic functions to work with dates. Think of it as creating a Jedi training timeline!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Function to analyze Jedi training period\nanalyze_training_period &lt;- function(start_date, end_date) {\n  # Convert dates if they're strings\n  start &lt;- as.Date(start_date)\n  end &lt;- as.Date(end_date)\n  \n  # Calculate various time differences\n  total_days &lt;- as.numeric(end - start)\n  total_weeks &lt;- floor(total_days / 7)\n  total_months &lt;- floor(total_days / 30)\n  \n  # Format dates nicely\n  formatted_start &lt;- format(start, \"%B %d, %Y\")\n  formatted_end &lt;- format(end, \"%B %d, %Y\")\n  \n  # Create a summary\n  summary &lt;- list(\n    start_date = formatted_start,\n    end_date = formatted_end,\n    total_days = total_days,\n    total_weeks = total_weeks,\n    total_months = total_months,\n    training_intensity = if(total_days &lt; 30) \"Intensive\" else \"Standard\"\n  )\n  \n  return(summary)\n}\n\n# Test the function\ntraining_stats &lt;- analyze_training_period(\"2024-01-01\", \"2024-03-01\")\nprint(training_stats)"
  },
  {
    "objectID": "beginner/r-foundations2/foundations_II.html#missing-values-the-dark-side-of-data",
    "href": "beginner/r-foundations2/foundations_II.html#missing-values-the-dark-side-of-data",
    "title": "R Language Basics II",
    "section": "Missing Values: The Dark Side of Data",
    "text": "Missing Values: The Dark Side of Data\nMissing values in R are like the dark side of the Force - they’re mysterious and need special handling!\n\nWorking with Missing Values\n# Creating vectors with missing values\npower_readings &lt;- c(80, NA, 95, NA, 88)\n\n# Checking for missing values\nis.na(power_readings)  # Returns logical vector\n\n# Counting missing values\nsum(is.na(power_readings))  # Returns 2\n\n# Removing missing values\nclean_readings &lt;- na.omit(power_readings)\n\n# Replacing missing values\npower_readings[is.na(power_readings)] &lt;- 0  # Replace with 0\npower_readings[is.na(power_readings)] &lt;- mean(power_readings, na.rm = TRUE)  # Replace with mean\n\n\nExercise 5: Handling Missing Values\nCreate a function that processes a dataset with missing values:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse is.na(), na.omit(), and other functions to handle missing values. Think of it as cleaning up corrupted data from a damaged holocron!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Function to process dataset with missing values\nprocess_force_readings &lt;- function(readings) {\n  # Count missing values\n  missing_count &lt;- sum(is.na(readings))\n  \n  # Calculate statistics before cleaning\n  original_mean &lt;- mean(readings, na.rm = TRUE)\n  original_sd &lt;- sd(readings, na.rm = TRUE)\n  \n  # Create cleaned dataset (remove NAs)\n  clean_readings &lt;- na.omit(readings)\n  \n  # Calculate statistics after cleaning\n  clean_mean &lt;- mean(clean_readings)\n  clean_sd &lt;- sd(clean_readings)\n  \n  # Create a summary\n  summary &lt;- list(\n    original_data = readings,\n    missing_count = missing_count,\n    original_stats = list(mean = original_mean, sd = original_sd),\n    clean_stats = list(mean = clean_mean, sd = clean_sd),\n    clean_data = clean_readings\n  )\n  \n  return(summary)\n}\n\n# Test the function\nforce_data &lt;- c(80, NA, 95, NA, 88, 92, NA, 85)\nresults &lt;- process_force_readings(force_data)\nprint(results)"
  },
  {
    "objectID": "beginner/r-foundations2/foundations_II.html#formatting-making-your-data-look-good",
    "href": "beginner/r-foundations2/foundations_II.html#formatting-making-your-data-look-good",
    "title": "R Language Basics II",
    "section": "Formatting: Making Your Data Look Good",
    "text": "Formatting: Making Your Data Look Good\nFormatting in R is like having a protocol droid - it helps you present your data in a clean and organized way!\n\nNumber Formatting\n# Basic number formatting\npi_value &lt;- pi\nformat(pi_value, digits = 2)  # Returns \"3.1\"\nformat(pi_value, digits = 4)  # Returns \"3.142\"\n\n# Currency formatting\nprice &lt;- 42.99\nformat(price, nsmall = 2, prefix = \"$\")  # Returns \"$42.99\"\n\n# Scientific notation\nlarge_number &lt;- 1234567\nformat(large_number, scientific = TRUE)  # Returns \"1.234567e+06\"\n\n\nExercise 6: Data Formatting\nCreate a function that formats various types of data:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse format() function with different parameters to format numbers and text. Think of it as creating your own data presentation protocol!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Function to format various types of data\nformat_data &lt;- function(value, type = \"number\") {\n  if (type == \"number\") {\n    # Format as regular number\n    return(format(value, digits = 2))\n  } else if (type == \"currency\") {\n    # Format as currency\n    return(format(value, nsmall = 2, prefix = \"$\"))\n  } else if (type == \"percentage\") {\n    # Format as percentage\n    return(paste(format(value * 100, digits = 1), \"%\"))\n  } else if (type == \"scientific\") {\n    # Format in scientific notation\n    return(format(value, scientific = TRUE))\n  } else {\n    return(\"Invalid format type\")\n  }\n}\n\n# Test the function\nprint(format_data(3.14159, \"number\"))      # Returns \"3.14\"\nprint(format_data(42.99, \"currency\"))      # Returns \"$42.99\"\nprint(format_data(0.42, \"percentage\"))     # Returns \"42.0%\"\nprint(format_data(1234567, \"scientific\"))  # Returns \"1.234567e+06\""
  },
  {
    "objectID": "beginner/r-foundations2/foundations_II.html#capstone-project-the-ultimate-force-challenge",
    "href": "beginner/r-foundations2/foundations_II.html#capstone-project-the-ultimate-force-challenge",
    "title": "R Language Basics II",
    "section": "Capstone Project: The Ultimate Force Challenge",
    "text": "Capstone Project: The Ultimate Force Challenge\nNow it’s time to combine all your Jedi training into one epic challenge! Create a comprehensive program that processes and analyzes Jedi training data.\n\nExercise 7: Jedi Training Analytics System\nCreate a complete system for analyzing Jedi training data:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nCombine functions, control structures, string operations, date handling, and data formatting to create a comprehensive system. Think of it as building your own Jedi Archives!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Create a comprehensive Jedi training analytics system\njedi_analytics_system &lt;- function() {\n  # Sample data\n  training_data &lt;- data.frame(\n    name = c(\"Luke\", \"Leia\", \"Rey\", \"Anakin\", \"Obi-Wan\"),\n    start_date = as.Date(c(\"2024-01-01\", \"2024-01-15\", \"2024-02-01\", \n                          \"2024-02-15\", \"2024-03-01\")),\n    initial_power = c(30, 35, 40, 45, 50),\n    current_power = c(85, 80, 75, 90, 95),\n    training_days = c(60, 45, 30, 45, 30),\n    completed_trials = c(5, 4, 3, 6, 5)\n  )\n  \n  # Function to calculate training statistics\n  calculate_stats &lt;- function(data) {\n    # Calculate power increase\n    data$power_increase &lt;- data$current_power - data$initial_power\n    \n    # Calculate daily power increase\n    data$daily_increase &lt;- data$power_increase / data$training_days\n    \n    # Calculate trial completion rate\n    data$trial_rate &lt;- data$completed_trials / data$training_days\n    \n    return(data)\n  }\n  \n  # Function to format report\n  format_report &lt;- function(data) {\n    # Calculate overall statistics\n    avg_power_increase &lt;- mean(data$power_increase)\n    max_power_increase &lt;- max(data$power_increase)\n    avg_trial_rate &lt;- mean(data$trial_rate)\n    \n    # Create formatted report\n    report &lt;- list(\n      summary_stats = list(\n        average_power_increase = format_data(avg_power_increase, \"number\"),\n        max_power_increase = format_data(max_power_increase, \"number\"),\n        average_trial_rate = format_data(avg_trial_rate, \"percentage\")\n      ),\n      individual_progress = data.frame(\n        name = data$name,\n        power_increase = format_data(data$power_increase, \"number\"),\n        daily_increase = format_data(data$daily_increase, \"number\"),\n        trial_rate = format_data(data$trial_rate, \"percentage\")\n      )\n    )\n    \n    return(report)\n  }\n  \n  # Process the data\n  processed_data &lt;- calculate_stats(training_data)\n  final_report &lt;- format_report(processed_data)\n  \n  return(final_report)\n}\n\n# Run the analytics system\nresults &lt;- jedi_analytics_system()\nprint(results)"
  },
  {
    "objectID": "beginner/tidyverse-I/index.html",
    "href": "beginner/tidyverse-I/index.html",
    "title": "Tidyverse: I",
    "section": "",
    "text": "Imagine you’re a data wizard with a magic wand. The tidyverse is your spellbook, and each package is a different magical incantation you can use to transform and manipulate data! 🧙‍♂️✨\n# Load the tidyverse - it's like summoning ALL your magic powers at once!\nlibrary(tidyverse)\nThe tidyverse is a collection of R packages that share a common philosophy and are designed to work together harmoniously. Think of it as the Avengers of data science - each package has its own superpower, but together they’re unstoppable!\n\n\n# The main tidyverse packages - your magical toolkit\nlibrary(dplyr)    # Data manipulation - like having telekinesis for data!\nlibrary(ggplot2)  # Data visualization - painting with data!\nlibrary(tidyr)    # Data tidying - Marie Kondo for your datasets!\nlibrary(readr)    # Data import - your portal to other data dimensions!\nlibrary(purrr)    # Functional programming - clone yourself to do multiple tasks!\nlibrary(tibble)   # Modern dataframes - your magical workbench!\nlibrary(stringr)  # String manipulation - speak the language of text!\nlibrary(forcats)  # Factor handling - taming wild categorical variables!\n\n\n\nThe pipe operator %&gt;% is like your magic wand - it allows you to chain spells together in a logical sequence! It takes the output from one function and feeds it as the input to the next function.\n# Without the pipe - nested spells that are hard to read\nround(mean(c(1, 2, 3, NA), na.rm = TRUE), digits = 2)\n\n# With the pipe - a clear sequence of magical steps\nc(1, 2, 3, NA) %&gt;% \n  mean(na.rm = TRUE) %&gt;%\n  round(digits = 2)\n💡 Pro Tip: You can use the keyboard shortcut Ctrl+Shift+M (Windows) or Cmd+Shift+M (Mac) to insert the pipe.\n\n\n\nWhen casting spells, sometimes you need to be specific about which spellbook you’re using:\n# Different packages may have functions with the same name\nstats::filter() # Time series filtering\ndplyr::filter() # Row filtering for dataframes\n\n# Each tidyverse package has consistent prefixes\nreadr::read_csv()   # Reading CSV files\nreadr::write_csv()  # Writing CSV files\nstringr::str_detect() # String detection\nforcats::fct_relevel() # Factor releveling\n\n\n\nLet’s start with a simple spell - creating and exploring a tibble:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse tibble() to create a magical data table, then try exploring it with glimpse(). It’s like having X-ray vision for your data!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Load the tidyverse spellbook\nlibrary(tidyverse)\n\n# Create a magical creature dataset\nmagical_creatures &lt;- tibble(\n  creature = c(\"Dragon\", \"Unicorn\", \"Phoenix\", \"Griffin\", \"Mermaid\"),\n  magic_power = c(95, 80, 90, 75, 60),\n  habitat = c(\"Mountains\", \"Forest\", \"Volcano\", \"Sky\", \"Ocean\"),\n  lifespan = c(1000, 500, 1500, 300, 200)\n)\n\n# Look at our magical dataset\nmagical_creatures\n\n# Use the glimpse spell to see through its structure\nglimpse(magical_creatures)\n\n# Check the data type - it's a tibble, not a plain dataframe!\nclass(magical_creatures)\n\n# Use the pipe to chain operations\nmagical_creatures %&gt;%\n  filter(magic_power &gt; 70) %&gt;%\n  arrange(desc(lifespan))"
  },
  {
    "objectID": "beginner/tidyverse-I/index.html#introduction-welcome-to-the-tidyverse",
    "href": "beginner/tidyverse-I/index.html#introduction-welcome-to-the-tidyverse",
    "title": "Tidyverse: I",
    "section": "",
    "text": "Imagine you’re a data wizard with a magic wand. The tidyverse is your spellbook, and each package is a different magical incantation you can use to transform and manipulate data! 🧙‍♂️✨\n# Load the tidyverse - it's like summoning ALL your magic powers at once!\nlibrary(tidyverse)\nThe tidyverse is a collection of R packages that share a common philosophy and are designed to work together harmoniously. Think of it as the Avengers of data science - each package has its own superpower, but together they’re unstoppable!\n\n\n# The main tidyverse packages - your magical toolkit\nlibrary(dplyr)    # Data manipulation - like having telekinesis for data!\nlibrary(ggplot2)  # Data visualization - painting with data!\nlibrary(tidyr)    # Data tidying - Marie Kondo for your datasets!\nlibrary(readr)    # Data import - your portal to other data dimensions!\nlibrary(purrr)    # Functional programming - clone yourself to do multiple tasks!\nlibrary(tibble)   # Modern dataframes - your magical workbench!\nlibrary(stringr)  # String manipulation - speak the language of text!\nlibrary(forcats)  # Factor handling - taming wild categorical variables!\n\n\n\nThe pipe operator %&gt;% is like your magic wand - it allows you to chain spells together in a logical sequence! It takes the output from one function and feeds it as the input to the next function.\n# Without the pipe - nested spells that are hard to read\nround(mean(c(1, 2, 3, NA), na.rm = TRUE), digits = 2)\n\n# With the pipe - a clear sequence of magical steps\nc(1, 2, 3, NA) %&gt;% \n  mean(na.rm = TRUE) %&gt;%\n  round(digits = 2)\n💡 Pro Tip: You can use the keyboard shortcut Ctrl+Shift+M (Windows) or Cmd+Shift+M (Mac) to insert the pipe.\n\n\n\nWhen casting spells, sometimes you need to be specific about which spellbook you’re using:\n# Different packages may have functions with the same name\nstats::filter() # Time series filtering\ndplyr::filter() # Row filtering for dataframes\n\n# Each tidyverse package has consistent prefixes\nreadr::read_csv()   # Reading CSV files\nreadr::write_csv()  # Writing CSV files\nstringr::str_detect() # String detection\nforcats::fct_relevel() # Factor releveling\n\n\n\nLet’s start with a simple spell - creating and exploring a tibble:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse tibble() to create a magical data table, then try exploring it with glimpse(). It’s like having X-ray vision for your data!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Load the tidyverse spellbook\nlibrary(tidyverse)\n\n# Create a magical creature dataset\nmagical_creatures &lt;- tibble(\n  creature = c(\"Dragon\", \"Unicorn\", \"Phoenix\", \"Griffin\", \"Mermaid\"),\n  magic_power = c(95, 80, 90, 75, 60),\n  habitat = c(\"Mountains\", \"Forest\", \"Volcano\", \"Sky\", \"Ocean\"),\n  lifespan = c(1000, 500, 1500, 300, 200)\n)\n\n# Look at our magical dataset\nmagical_creatures\n\n# Use the glimpse spell to see through its structure\nglimpse(magical_creatures)\n\n# Check the data type - it's a tibble, not a plain dataframe!\nclass(magical_creatures)\n\n# Use the pipe to chain operations\nmagical_creatures %&gt;%\n  filter(magic_power &gt; 70) %&gt;%\n  arrange(desc(lifespan))"
  },
  {
    "objectID": "beginner/tidyverse-I/index.html#tibbles-the-modern-data-workbench",
    "href": "beginner/tidyverse-I/index.html#tibbles-the-modern-data-workbench",
    "title": "Tidyverse: I",
    "section": "Tibbles: The Modern Data Workbench",
    "text": "Tibbles: The Modern Data Workbench\nTibbles are modern reimagined dataframes - they’re like regular dataframes but with superpowers! They don’t change variable names or types, they don’t create row names, and they make printing large datasets much more pleasant.\n\nWhy Use Tibbles?\nRegular dataframes have some quirks that tibbles fix: - They don’t automatically convert strings to factors - They don’t mangle variable names - They show only the first 10 rows and all columns that fit on screen - They have consistent subsetting behavior - They give you better error messages\n# Create a tibble from scratch - building your workbench!\nwizards &lt;- tibble(\n  name = c(\"Gandalf\", \"Dumbledore\", \"Merlin\", \"Dr. Strange\"),\n  specialty = c(\"Fireworks\", \"Transfiguration\", \"Time Magic\", \"Reality Warping\"),\n  power_level = c(95, 90, 99, 85)\n)\n\n# Convert existing dataframe to tibble - upgrade your workbench!\ndata(mtcars)\nmtcars_tibble &lt;- as_tibble(mtcars, rownames = \"car_model\")\n\n# Creating a tibble row-by-row (like SAS CARDS/DATALINES)\nspells &lt;- tribble(\n  ~spell_name,    ~power, ~element,    ~casting_time,\n  \"Fireball\",       80,   \"Fire\",       3,\n  \"Ice Lance\",      65,   \"Water\",      1,\n  \"Earthquake\",     90,   \"Earth\",      5,\n  \"Lightning Bolt\", 75,   \"Air\",        2\n)\nspells\n\n\nTibble Subsetting\nTibbles maintain consistent output types, which helps prevent errors in your code:\n# Single bracket [ ] always returns a tibble\nwizards[\"name\"]        # Still a tibble with 1 column\nwizards[1:2, \"name\"]   # Still a tibble with 1 column\n\n# Double bracket [[ ]] or $ extracts a single column as a vector\nwizards[[\"name\"]]      # Character vector\nwizards$name           # Character vector\n\n\nExercise 2: Tibble Transformation\nTransform this plain old dataframe into a shiny new tibble:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse as_tibble() to convert a dataframe to a tibble. For extra magic, use rownames_to_column() to preserve row names!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Load the tidyverse\nlibrary(tidyverse)\n\n# Create a regular dataframe - the old rusty workbench\ndata(iris)\nhead(iris)\n\n# Convert to tibble with as_tibble()\niris_tibble &lt;- as_tibble(iris)\niris_tibble\n\n# Another way - if your dataframe has rownames you want to keep\ndata(mtcars)\nmtcars_tibble &lt;- as_tibble(mtcars, rownames = \"car_model\")\n\n# Or using rownames_to_column()\nmtcars_tibble2 &lt;- mtcars %&gt;% \n  rownames_to_column(\"car_model\") %&gt;%\n  as_tibble()\n\n# Print to see the difference\nmtcars_tibble\n\n# Create a tibble from scratch with tribble\npotion_ingredients &lt;- tribble(\n  ~potion,         ~ingredient,        ~amount, ~unit,\n  \"Health Potion\", \"Red Mushroom\",     3,       \"pieces\",\n  \"Health Potion\", \"Spring Water\",     100,     \"ml\",\n  \"Mana Potion\",   \"Blue Flower\",      2,       \"pieces\",\n  \"Mana Potion\",   \"Moon Water\",       100,     \"ml\",\n  \"Strength Potion\",\"Dragon Scale\",    1,       \"piece\",\n  \"Strength Potion\",\"Volcano Ash\",     50,      \"g\"\n)\npotion_ingredients"
  },
  {
    "objectID": "beginner/tidyverse-I/index.html#data-import-export-opening-portals-to-other-dimensions",
    "href": "beginner/tidyverse-I/index.html#data-import-export-opening-portals-to-other-dimensions",
    "title": "Tidyverse: I",
    "section": "Data Import & Export: Opening Portals to Other Dimensions",
    "text": "Data Import & Export: Opening Portals to Other Dimensions\nThe tidyverse makes it super easy to import and export data from various file formats. It’s like having a magical portal that connects to many different data dimensions!\n\nReading Data with readr\nThe readr package provides a fast and friendly way to read rectangular data files:\n# Reading data - opening a portal!\n# CSV files\nmy_data &lt;- read_csv(\"data.csv\")\n\n# TSV files\nmy_tsv_data &lt;- read_tsv(\"data.tsv\")\n\n# Fixed width files\nmy_fixed_data &lt;- read_fwf(\"data.txt\", \n                         col_positions = fwf_widths(c(10, 5, 8)))\n\n# Delimited files with any delimiter\nmy_delim_data &lt;- read_delim(\"data.txt\", delim = \"|\")\n\n\nControlling Column Types\nYou can specify the types of columns you’re reading to ensure your data comes through the portal correctly:\n# Specify column types\npotions_data &lt;- read_csv(\"potions.csv\",\n  col_types = cols(\n    name = col_character(),\n    power = col_double(),\n    ingredients = col_integer(),\n    is_legendary = col_logical(),\n    discovery_date = col_date(format = \"%Y-%m-%d\")\n  )\n)\n\n# Preview the column specification without reading the file\nspec_csv(\"potions.csv\")\n\n\nWriting Data\nSending your magical creations to other dimensions is just as easy:\n# Writing data\nwrite_csv(my_data, \"new_data.csv\")\nwrite_tsv(my_data, \"new_data.tsv\")\nwrite_delim(my_data, \"new_data.txt\", delim = \"|\")\n\n# Save R objects\nsaveRDS(my_data, \"my_data.rds\")\n\n\nOther File Formats\nThe tidyverse ecosystem can also connect with other magical realms:\n# Excel files (requires readxl package)\nlibrary(readxl)\nexcel_data &lt;- read_excel(\"spellbook.xlsx\", sheet = \"Potions\")\n\n# Writing Excel files (requires writexl package)\nlibrary(writexl)\nwrite_xlsx(my_data, \"spellbook.xlsx\")\n\n# SAS files (requires haven package)\nlibrary(haven)\nsas_data &lt;- read_sas(\"wizard_data.sas7bdat\")\n\n\nExercise 3: Data Portal Mastery\nPractice your portal creation skills by importing and exporting data:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse read_csv() to import CSV data and write_csv() to export it. Don’t forget to peek at your data with head() or glimpse()!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Load the tidyverse\nlibrary(tidyverse)\n\n# Create some sample data to export\npotion_recipes &lt;- tibble(\n  potion_name = c(\"Invisibility\", \"Strength\", \"Healing\", \"Flying\", \"Wisdom\"),\n  primary_ingredient = c(\"Ghost Orchid\", \"Dragon Scale\", \"Phoenix Tear\", \"Eagle Feather\", \"Ancient Scroll\"),\n  brewing_time_hours = c(12, 3, 8, 24, 72),\n  potency = c(8, 7, 10, 6, 9)\n)\n\n# Export our potion recipes to CSV\nwrite_csv(potion_recipes, \"potion_recipes.csv\")\n\n# Now import it back\nimported_potions &lt;- read_csv(\"potion_recipes.csv\")\n\n# Let's check if our portal worked correctly\nidentical(potion_recipes, imported_potions)\n\n# Take a peek at our imported data\nglimpse(imported_potions)\n\n# Create a custom column specification\nmy_col_types &lt;- cols(\n  potion_name = col_character(),\n  primary_ingredient = col_character(),\n  brewing_time_hours = col_integer(),\n  potency = col_double()\n)\n\n# Import with specification\nimported_potions_spec &lt;- read_csv(\"potion_recipes.csv\", col_types = my_col_types)\nglimpse(imported_potions_spec)"
  },
  {
    "objectID": "beginner/tidyverse-I/index.html#subsetting-and-sorting-finding-what-you-need",
    "href": "beginner/tidyverse-I/index.html#subsetting-and-sorting-finding-what-you-need",
    "title": "Tidyverse: I",
    "section": "Subsetting and Sorting: Finding What You Need",
    "text": "Subsetting and Sorting: Finding What You Need\nSubsetting and sorting data is like having a magical filter and organizer for your data. With just a few spell words, you can find exactly what you need!\n\nFiltering Rows with filter()\nfilter() allows you to select rows based on their values - it’s like having a magic sieve that only lets through the data you want!\n# Load a dataset to play with\ndata(starwars, package = \"dplyr\")\nstarwars_tibble &lt;- as_tibble(starwars)\n\n# Filter for humans only - separating humans from aliens!\nhumans &lt;- starwars_tibble %&gt;% \n  filter(species == \"Human\")\n\n# Multiple conditions - finding very tall droids!\ntall_droids &lt;- starwars_tibble %&gt;% \n  filter(species == \"Droid\", height &gt; 100)\n  \n# More complex conditions with logical operators\npowerful_humans &lt;- starwars_tibble %&gt;%\n  filter(species == \"Human\" & (mass &gt; 80 | height &gt; 180))\n  \n# Excluding values\nnon_droids &lt;- starwars_tibble %&gt;%\n  filter(species != \"Droid\")\n  \n# Checking for multiple values\ntatooine_naboo &lt;- starwars_tibble %&gt;%\n  filter(homeworld %in% c(\"Tatooine\", \"Naboo\"))\n\n\nSlicing Rows\nSometimes you want to select rows by position rather than by values:\n# Get the first 5 rows\nstarwars_tibble %&gt;% slice(1:5)\n\n# Get specific rows\nstarwars_tibble %&gt;% slice(c(1, 3, 5))\n\n# Get the last 5 rows\nstarwars_tibble %&gt;% slice_tail(n = 5)\n\n# Get 3 random rows\nstarwars_tibble %&gt;% slice_sample(n = 3)\n\n# Get 10% of the rows randomly\nstarwars_tibble %&gt;% slice_sample(prop = 0.1)\n\n# Get the 3 tallest characters\nstarwars_tibble %&gt;% slice_max(height, n = 3)\n\n# Get the 3 lightest characters with known mass\nstarwars_tibble %&gt;% slice_min(mass, n = 3, na.rm = TRUE)\n\n\nSelecting Columns with select()\nselect() lets you focus on just the variables you need - it’s like having a magical lens that only shows you what’s important!\n# Select only certain columns - focusing your magical lens!\nnames_heights &lt;- starwars_tibble %&gt;% \n  select(name, height, mass)\n\n# Remove columns - banishing unwanted information!\nno_homeworld &lt;- starwars_tibble %&gt;% \n  select(-homeworld, -species)\n  \n# Select columns by position\nfirst_three &lt;- starwars_tibble %&gt;%\n  select(1:3)\n  \n# Use helper functions to select columns matching patterns\nmeasurements &lt;- starwars_tibble %&gt;%\n  select(starts_with(\"h\"), contains(\"mass\"))\n  \n# Select columns by data type\nnumeric_cols &lt;- starwars_tibble %&gt;%\n  select(where(is.numeric))\n  \n# Rename columns while selecting\nrenamed &lt;- starwars_tibble %&gt;%\n  select(character_name = name, height, weight = mass)\n\n\nSelection Helpers\nThere are many helper functions that make selecting variables easier:\n# Different ways to select variables\nstarwars_tibble %&gt;% select(starts_with(\"h\"))  # Starts with \"h\"\nstarwars_tibble %&gt;% select(ends_with(\"s\"))    # Ends with \"s\"\nstarwars_tibble %&gt;% select(contains(\"o\"))     # Contains \"o\"\nstarwars_tibble %&gt;% select(matches(\"..r.\"))   # Matches regex pattern\nstarwars_tibble %&gt;% select(everything())      # All columns\nstarwars_tibble %&gt;% select(last_col())        # Last column\n\n\nArranging Rows with arrange()\narrange() allows you to reorder your rows based on the values of selected columns:\n# Sort by height - from shortest to tallest!\nby_height &lt;- starwars_tibble %&gt;% \n  arrange(height)\n\n# Sort by descending mass - heaviest first!\nby_mass_desc &lt;- starwars_tibble %&gt;% \n  arrange(desc(mass))\n  \n# Multiple sort criteria - sort by species, then by height within species\nby_species_height &lt;- starwars_tibble %&gt;%\n  arrange(species, height)\n  \n# Sort by species descending, then by height ascending\ncomplex_sort &lt;- starwars_tibble %&gt;%\n  arrange(desc(species), height)\n\n\nRenaming and Relocating Columns\nTidyverse also provides tools to rename or reposition your variables:\n# Rename columns\nstarwars_tibble %&gt;%\n  rename(character = name, weight = mass)\n  \n# Rename using a function (convert to uppercase)\nstarwars_tibble %&gt;%\n  rename_with(toupper)\n  \n# Rename only some columns\nstarwars_tibble %&gt;%\n  rename_with(toupper, starts_with(\"h\"))\n  \n# Move columns to different positions\nstarwars_tibble %&gt;%\n  relocate(species, homeworld, .before = name)\n  \nstarwars_tibble %&gt;%\n  relocate(name, species, .after = last_col())\n\n\nExercise 4: The Magic of Subsetting\nUse your magical powers to find and sort specific creatures:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse filter() to find rows meeting certain conditions, select() to choose columns, and arrange() to sort. Combine them with the magical %&gt;% pipe!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Load the tidyverse\nlibrary(tidyverse)\n\n# We'll use the built-in starwars dataset\ndata(starwars, package = \"dplyr\")\nstarwars_tibble &lt;- as_tibble(starwars)\n\n# Find all characters taller than 200 cm\ngiants &lt;- starwars_tibble %&gt;% \n  filter(height &gt; 200)\ngiants\n\n# Select only the name, homeworld, and species of characters from Tatooine\ntatooine_chars &lt;- starwars_tibble %&gt;% \n  filter(homeworld == \"Tatooine\") %&gt;%\n  select(name, species, height, mass)\ntatooine_chars\n\n# Find the 5 heaviest characters with known mass\nheaviest_chars &lt;- starwars_tibble %&gt;% \n  filter(!is.na(mass)) %&gt;%\n  arrange(desc(mass)) %&gt;%\n  slice(1:5)\nheaviest_chars\n\n# Find all humans and sort them by height (tallest first)\nsorted_humans &lt;- starwars_tibble %&gt;% \n  filter(species == \"Human\") %&gt;%\n  arrange(desc(height))\nsorted_humans\n\n# Find characters from the same homeworld as Luke Skywalker\nluke_homeworld &lt;- starwars_tibble %&gt;%\n  filter(name == \"Luke Skywalker\") %&gt;%\n  pull(homeworld)\n\nluke_neighbors &lt;- starwars_tibble %&gt;%\n  filter(homeworld == luke_homeworld) %&gt;%\n  select(name, species, height) %&gt;%\n  arrange(species, desc(height))\nluke_neighbors\n\n# Complex pipeline combining multiple operations\nstarwars_analysis &lt;- starwars_tibble %&gt;%\n  # Keep only characters with complete height and mass data\n  filter(!is.na(height), !is.na(mass)) %&gt;%\n  # Calculate BMI\n  mutate(bmi = mass / ((height / 100)^2)) %&gt;%\n  # Select relevant columns\n  select(name, species, gender, height, mass, bmi) %&gt;%\n  # Sort by BMI\n  arrange(desc(bmi)) %&gt;%\n  # Take top 10\n  slice_head(n = 10)\nstarwars_analysis"
  },
  {
    "objectID": "beginner/tidyverse-I/index.html#creating-variables-brewing-new-data-potions",
    "href": "beginner/tidyverse-I/index.html#creating-variables-brewing-new-data-potions",
    "title": "Tidyverse: I",
    "section": "Creating Variables: Brewing New Data Potions",
    "text": "Creating Variables: Brewing New Data Potions\nSometimes you need to create new variables based on existing ones. This is like brewing a new potion by combining ingredients you already have!\n\nTransforming Variables with mutate()\nmutate() lets you create new variables while preserving existing ones - it’s like adding new magical properties to your potion without changing its base ingredients!\n# Add a new column - brewing a new data potion!\nstarwars_bmi &lt;- starwars_tibble %&gt;% \n  filter(!is.na(height), !is.na(mass)) %&gt;%\n  mutate(bmi = mass / ((height / 100)^2))\n\n# Create multiple columns at once - advanced potion brewing!\nstarwars_stats &lt;- starwars_tibble %&gt;% \n  mutate(\n    height_m = height / 100,\n    height_ft = height / 30.48,\n    heavy = mass &gt; 100\n  )\n\n\nConditional Transformations\nYou can create variables with values that depend on conditions:\n# Simple if-else condition\nstarwars_tibble %&gt;%\n  mutate(size_category = if_else(height &gt; 180, \"Tall\", \"Short\", missing = \"Unknown\"))\n\n# Multiple conditions with case_when\nstarwars_tibble %&gt;%\n  mutate(\n    size_category = case_when(\n      is.na(height) ~ \"Unknown\",\n      height &gt; 200 ~ \"Very Tall\",\n      height &gt; 180 ~ \"Tall\",\n      height &gt; 160 ~ \"Average\",\n      TRUE ~ \"Short\"\n    )\n  )\n\n\nWorking Across Multiple Columns\nApply the same transformation to multiple columns at once:\n# Apply the same function to multiple columns\nstarwars_tibble %&gt;%\n  mutate(across(c(height, mass), ~ . / mean(., na.rm = TRUE)))\n\n# Apply different functions to different columns\nstarwars_tibble %&gt;%\n  mutate(across(where(is.numeric), ~ round(., 1)))\n\n# Apply multiple functions to the same columns\nstarwars_tibble %&gt;%\n  mutate(across(\n    c(height, mass),\n    list(\n      centered = ~ . - mean(., na.rm = TRUE),\n      scaled = ~ . / sd(., na.rm = TRUE)\n    )\n  ))\n\n\nReplacing or Creating New Data Frames\nSometimes you want to completely replace your variables instead of adding to them:\n# Replace variables with transmute\nstarwars_tibble %&gt;%\n  transmute(\n    name,\n    height_in_meters = height / 100,\n    weight_in_pounds = mass * 2.2\n  )\n\n\nSpecial Transformation Functions\nThe tidyverse provides many functions for common transformations:\n# Ranking\nstarwars_tibble %&gt;%\n  mutate(\n    height_rank = min_rank(height),\n    height_dense_rank = dense_rank(height),\n    height_percent_rank = percent_rank(height)\n  )\n\n# Offset values\nstarwars_tibble %&gt;%\n  mutate(\n    next_mass = lead(mass),\n    prev_mass = lag(mass)\n  )\n\n# Cumulative calculations\nstarwars_tibble %&gt;%\n  mutate(\n    cumulative_mass = cumsum(mass),\n    running_avg = cummean(mass)\n  )\n\n\nExercise 5: Potion Brewing with mutate()\nBrew some new variables from existing data:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse mutate() to create new columns based on existing ones. You can create as many new columns as you want in a single mutate() spell!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Load the tidyverse\nlibrary(tidyverse)\n\n# Let's create a magical creatures dataset\ncreatures &lt;- tibble(\n  name = c(\"Dragon\", \"Griffin\", \"Phoenix\", \"Unicorn\", \"Basilisk\"),\n  age = c(250, 75, 500, 150, 200),\n  max_age = c(1000, 300, 2000, 500, 800),\n  weight_kg = c(2500, 450, 15, 350, 800),\n  magical_power = c(95, 75, 90, 80, 85)\n)\n\n# Now let's brew some new potions... I mean variables!\ncreatures_enhanced &lt;- creatures %&gt;%\n  mutate(\n    # Calculate age as percentage of maximum lifespan\n    age_percentage = (age / max_age) * 100,\n    \n    # Classify creatures as ancient (over 50% of lifespan) or young\n    age_category = if_else(age_percentage &gt; 50, \"Ancient\", \"Young\"),\n    \n    # Calculate power-to-weight ratio (magical efficiency)\n    power_efficiency = magical_power / weight_kg * 100,\n    \n    # Create a magical threat level\n    threat_level = case_when(\n      magical_power &gt; 90 & weight_kg &gt; 1000 ~ \"Extreme\",\n      magical_power &gt; 80 | weight_kg &gt; 500 ~ \"High\",\n      magical_power &gt; 70 ~ \"Moderate\",\n      TRUE ~ \"Low\"\n    ),\n    \n    # Power rank compared to other creatures\n    power_rank = min_rank(desc(magical_power)),\n    \n    # Normalized power (percentage of max)\n    power_normalized = magical_power / max(magical_power) * 100,\n    \n    # Estimated years left to live\n    years_remaining = max_age - age,\n    \n    # Calculate a weighted magical score\n    magical_score = (magical_power * 0.6) + (power_efficiency * 0.4)\n  )\n\n# Let's see our enhanced creatures dataset!\ncreatures_enhanced %&gt;%\n  arrange(power_rank)"
  },
  {
    "objectID": "beginner/tidyverse-I/index.html#summaries-distilling-magical-essences",
    "href": "beginner/tidyverse-I/index.html#summaries-distilling-magical-essences",
    "title": "Tidyverse: I",
    "section": "Summaries: Distilling Magical Essences",
    "text": "Summaries: Distilling Magical Essences\nSummarizing data is like distilling the essence of your dataset down to its most powerful components. It reveals the hidden patterns and secrets!\n\nSummarizing with summarize()\nsummarize() (or summarise(), if you prefer British spelling) reduces your dataset to a single row of summary statistics:\n# Calculate basic summaries - distilling the essence!\nheight_summary &lt;- starwars_tibble %&gt;%\n  summarize(\n    avg_height = mean(height, na.rm = TRUE),\n    max_height = max(height, na.rm = TRUE),\n    min_height = min(height, na.rm = TRUE),\n    sd_height = sd(height, na.rm = TRUE),\n    n_characters = n(),\n    n_with_height = sum(!is.na(height))\n  )\n\n# Counting values - counting magical artifacts!\nspecies_count &lt;- starwars_tibble %&gt;%\n  count(species, sort = TRUE)\n\n\nCommon Summary Functions\nHere are some useful functions for creating summaries:\n# Statistical functions\nstarwars_tibble %&gt;%\n  summarize(\n    mean_height = mean(height, na.rm = TRUE),\n    median_height = median(height, na.rm = TRUE),\n    sd_height = sd(height, na.rm = TRUE),\n    var_height = var(height, na.rm = TRUE),\n    min_height = min(height, na.rm = TRUE),\n    max_height = max(height, na.rm = TRUE),\n    q25_height = quantile(height, 0.25, na.rm = TRUE),\n    q75_height = quantile(height, 0.75, na.rm = TRUE)\n  )\n\n# Counting functions\nstarwars_tibble %&gt;%\n  summarize(\n    n_rows = n(),\n    n_species = n_distinct(species),\n    n_homeworlds = n_distinct(homeworld)\n  )\n\n# First, last, and nth values\nstarwars_tibble %&gt;%\n  summarize(\n    first_character = first(name),\n    last_character = last(name),\n    tenth_character = nth(name, 10)\n  )\n\n\nSummarizing Multiple Columns\nYou can summarize multiple columns at once using across():\n# Apply the same summary function to multiple columns\nstarwars_tibble %&gt;%\n  summarize(across(c(height, mass), mean, na.rm = TRUE))\n\n# Apply different summary functions to different columns\nstarwars_tibble %&gt;%\n  summarize(\n    across(c(height, mass), list(avg = mean, med = median), na.rm = TRUE),\n    across(species, list(n = n_distinct))\n  )\n\n\nExercise 6: The Art of Summary Magic\nPractice your summarizing skills on this dataset:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse summarize() to calculate statistics across the entire dataset, or group_by() then summarize() to get statistics for each group. The count() spell is great for quick frequency tables!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Load the tidyverse\nlibrary(tidyverse)\n\n# Let's work with the built-in mpg dataset\ndata(mpg)\nmpg_tibble &lt;- as_tibble(mpg)\n\n# Overall summary statistics for continuous variables\noverall_summary &lt;- mpg_tibble %&gt;%\n  summarize(\n    avg_mpg = mean(hwy),\n    max_mpg = max(hwy),\n    min_mpg = min(hwy),\n    median_mpg = median(hwy),\n    sd_mpg = sd(hwy),\n    total_cars = n(),\n    efficiency_ratio = mean(hwy) / mean(cty)\n  )\noverall_summary\n\n# Count the number of cars by manufacturer\nmanufacturer_counts &lt;- mpg_tibble %&gt;%\n  count(manufacturer, sort = TRUE)\nmanufacturer_counts\n\n# Group by class and find average mpg\nclass_mpg &lt;- mpg_tibble %&gt;%\n  group_by(class) %&gt;%\n  summarize(\n    avg_city_mpg = mean(cty),\n    avg_hwy_mpg = mean(hwy),\n    mpg_difference = mean(hwy - cty),\n    car_count = n(),\n    manufacturers = n_distinct(manufacturer)\n  ) %&gt;%\n  arrange(desc(avg_hwy_mpg))\nclass_mpg\n\n# Find the most fuel-efficient car in each class\nbest_in_class &lt;- mpg_tibble %&gt;%\n  group_by(class) %&gt;%\n  slice_max(order_by = hwy, n = 1) %&gt;%\n  select(class, manufacturer, model, hwy) %&gt;%\n  arrange(desc(hwy))\nbest_in_class\n\n# Create a comprehensive efficiency report by manufacturer\nmanufacturer_report &lt;- mpg_tibble %&gt;%\n  group_by(manufacturer) %&gt;%\n  summarize(\n    models = n_distinct(model),\n    avg_city = mean(cty),\n    avg_hwy = mean(hwy),\n    best_hwy = max(hwy),\n    worst_hwy = min(hwy),\n    range = max(hwy) - min(hwy),\n    total_cars = n()\n  ) %&gt;%\n  # Only include manufacturers with at least 3 cars\n  filter(total_cars &gt;= 3) %&gt;%\n  # Sort by average highway MPG\n  arrange(desc(avg_hwy))\nmanufacturer_report"
  },
  {
    "objectID": "beginner/tidyverse-I/index.html#group-operations-organizing-your-magical-creatures",
    "href": "beginner/tidyverse-I/index.html#group-operations-organizing-your-magical-creatures",
    "title": "Tidyverse: I",
    "section": "Group Operations: Organizing Your Magical Creatures",
    "text": "Group Operations: Organizing Your Magical Creatures\nGrouping allows you to perform operations on subsets of your data. It’s like organizing your magical creatures by species before studying them!\n\nGrouping with group_by()\ngroup_by() transforms your data frame into a grouped data frame, where operations are performed “by group”:\n# Group by species and find average height/mass\nspecies_stats &lt;- starwars_tibble %&gt;%\n  group_by(species) %&gt;%\n  summarize(\n    count = n(),\n    avg_height = mean(height, na.rm = TRUE),\n    avg_mass = mean(mass, na.rm = TRUE)\n  ) %&gt;%\n  filter(count &gt; 1)  # Only include species with more than 1 character\n\n# Find max height by gender and homeworld\nmax_heights &lt;- starwars_tibble %&gt;%\n  group_by(homeworld, gender) %&gt;%\n  summarize(\n    tallest = max(height, na.rm = TRUE),\n    n = n()\n  ) %&gt;%\n  filter(!is.na(tallest), !is.na(homeworld))\n\n\nGrouping by Multiple Variables\nYou can group by multiple variables to create nested groups:\n# Group by species and gender\nstarwars_tibble %&gt;%\n  group_by(species, gender) %&gt;%\n  summarize(\n    count = n(),\n    avg_height = mean(height, na.rm = TRUE)\n  )\n\n# Getting the number of groups\nstarwars_tibble %&gt;%\n  group_by(species, gender) %&gt;%\n  summarize(count = n()) %&gt;%\n  nrow()\n\n# Getting information about the groups\nstarwars_groups &lt;- starwars_tibble %&gt;% group_by(species, gender)\ngroup_keys(starwars_groups)\nn_groups(starwars_groups)\n\n\nGroup Mutations\nYou can use group_by() with mutate() to compute values within each group:\n# Calculate z-scores within species groups\nstarwars_tibble %&gt;%\n  group_by(species) %&gt;%\n  filter(n() &gt; 1) %&gt;%  # Only species with multiple members\n  mutate(\n    height_avg = mean(height, na.rm = TRUE),\n    height_sd = sd(height, na.rm = TRUE),\n    height_z = (height - height_avg) / height_sd\n  ) %&gt;%\n  select(name, species, height, height_avg, height_z) %&gt;%\n  arrange(species, desc(height_z))\n\n# Rank heights within each species\nstarwars_tibble %&gt;%\n  group_by(species) %&gt;%\n  filter(n() &gt; 1) %&gt;%\n  mutate(height_rank = min_rank(desc(height))) %&gt;%\n  select(name, species, height, height_rank) %&gt;%\n  arrange(species, height_rank)\n\n\nManaging Groups\nYou can add or remove grouping variables:\n# Add a grouping variable\nstarwars_tibble %&gt;%\n  group_by(species) %&gt;%\n  group_by(gender, .add = TRUE)  # Keep species grouping and add gender\n\n# Remove all grouping\nstarwars_tibble %&gt;%\n  group_by(species, gender) %&gt;%\n  ungroup()\n\n\nRow-wise Operations\nFor operations across rows (rather than down columns), use rowwise():\n# Calculate the sum of height and mass for each character\nstarwars_tibble %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    height_plus_mass = sum(c(height, mass), na.rm = TRUE)\n  )\n\n# Find the maximum value across several columns\nstarwars_tibble %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    max_value = max(c(height, mass), na.rm = TRUE)\n  )\n\n\nExercise 7: The Power of Grouping\nUse grouping to analyze this dataset of magical creatures:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse group_by() followed by summarize() to calculate statistics for each group. Try grouping by multiple variables to dig deeper!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Load the tidyverse\nlibrary(tidyverse)\n\n# Create a dataset of potions sold at a magical marketplace\npotions_sales &lt;- tibble(\n  potion_type = rep(c(\"Healing\", \"Strength\", \"Invisibility\", \"Love\", \"Wisdom\"), each = 20),\n  merchant = rep(c(\"Elixir Emporium\", \"Witch's Brew\", \"Magical Mixtures\", \"Cauldron Creations\"), times = 25),\n  price = c(\n    # Healing potions prices\n    runif(20, 10, 20),\n    # Strength potions prices\n    runif(20, 15, 30),\n    # Invisibility potions prices\n    runif(20, 25, 50),\n    # Love potions prices\n    runif(20, 5, 15),\n    # Wisdom potions prices\n    runif(20, 20, 40)\n  ),\n  quantity_sold = sample(1:10, 100, replace = TRUE),\n  customer_rating = sample(1:5, 100, replace = TRUE, prob = c(0.05, 0.1, 0.2, 0.4, 0.25))\n)\n\n# Calculate average price by potion type\navg_prices &lt;- potions_sales %&gt;%\n  group_by(potion_type) %&gt;%\n  summarize(\n    avg_price = mean(price),\n    median_price = median(price),\n    min_price = min(price),\n    max_price = max(price),\n    price_range = max_price - min_price,\n    total_sold = sum(quantity_sold),\n    avg_rating = mean(customer_rating)\n  ) %&gt;%\n  arrange(desc(avg_price))\navg_prices\n\n# Find total revenue by merchant and potion type\nmerchant_revenue &lt;- potions_sales %&gt;%\n  mutate(revenue = price * quantity_sold) %&gt;%\n  group_by(merchant, potion_type) %&gt;%\n  summarize(\n    total_revenue = sum(revenue),\n    avg_price = mean(price),\n    total_sold = sum(quantity_sold),\n    avg_rating = mean(customer_rating)\n  ) %&gt;%\n  arrange(merchant, desc(total_revenue))\nmerchant_revenue\n\n# Find the most profitable potion type for each merchant\nbest_potions &lt;- potions_sales %&gt;%\n  mutate(revenue = price * quantity_sold) %&gt;%\n  group_by(merchant, potion_type) %&gt;%\n  summarize(total_revenue = sum(revenue)) %&gt;%\n  ungroup() %&gt;%\n  group_by(merchant) %&gt;%\n  slice_max(order_by = total_revenue, n = 1)\nbest_potions\n\n# Calculate the average rating for each merchant and how it compares to overall average\nrating_analysis &lt;- potions_sales %&gt;%\n  group_by(merchant) %&gt;%\n  summarize(\n    avg_rating = mean(customer_rating),\n    total_ratings = n()\n  ) %&gt;%\n  ungroup() %&gt;%\n  mutate(\n    overall_avg = mean(potions_sales$customer_rating),\n    rating_difference = avg_rating - overall_avg,\n    performance = case_when(\n      rating_difference &gt; 0.5 ~ \"Excellent\",\n      rating_difference &gt; 0 ~ \"Above Average\",\n      rating_difference &gt; -0.5 ~ \"Average\",\n      TRUE ~ \"Below Average\"\n    )\n  ) %&gt;%\n  arrange(desc(avg_rating))\nrating_analysis\n\n# Advanced analysis: Find which merchants are specialized in certain potions\nspecialization_analysis &lt;- potions_sales %&gt;%\n  group_by(merchant, potion_type) %&gt;%\n  summarize(\n    potion_count = n(),\n    potion_revenue = sum(price * quantity_sold)\n  ) %&gt;%\n  group_by(merchant) %&gt;%\n  mutate(\n    total_potions = sum(potion_count),\n    total_revenue = sum(potion_revenue),\n    potion_percent = potion_count / total_potions * 100,\n    revenue_percent = potion_revenue / total_revenue * 100,\n    is_specialized = potion_percent &gt; 30 | revenue_percent &gt; 40\n  ) %&gt;%\n  filter(is_specialized) %&gt;%\n  select(merchant, potion_type, potion_percent, revenue_percent) %&gt;%\n  arrange(merchant, desc(revenue_percent))\nspecialization_analysis"
  },
  {
    "objectID": "beginner/tidyverse-I/index.html#capstone-project-the-ultimate-tidyverse-spell",
    "href": "beginner/tidyverse-I/index.html#capstone-project-the-ultimate-tidyverse-spell",
    "title": "Tidyverse: I",
    "section": "Capstone Project: The Ultimate Tidyverse Spell",
    "text": "Capstone Project: The Ultimate Tidyverse Spell\nNow it’s time to combine all your tidyverse skills into one magnificent spell! Create a comprehensive analysis of magical creatures and their powers.\n\nThe Complete Tidyverse Wizard\nA true tidyverse wizard can combine all their magical spells - tibbles, importing, filtering, arranging, mutating, summarizing, and grouping - into a single powerful workflow. Let’s put everything together!\nHere’s what your capstone should demonstrate: - Creating and transforming tibbles - Importing and cleaning data - Filtering and selecting relevant information - Creating new variables - Summarizing by groups - Visualizing results (if desired) - Exporting your processed data\n\n\nExercise 8: The Complete Tidyverse Magic System\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nCombine all the magical spells you’ve learned - create tibbles, import/export data, filter, select, arrange, mutate, summarize, and group. Think of it as creating your own complete magical analysis system!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Load the tidyverse - our magical toolkit\nlibrary(tidyverse)\n\n# Create a comprehensive magical creature database\nmagical_creatures &lt;- tibble(\n  species = c(\"Dragon\", \"Phoenix\", \"Unicorn\", \"Griffin\", \"Mermaid\", \"Centaur\", \n              \"Basilisk\", \"Fairy\", \"Troll\", \"Werewolf\", \"Vampire\", \"Ghost\",\n              \"Dragon\", \"Unicorn\", \"Griffin\", \"Fairy\", \"Phoenix\", \"Mermaid\"),\n  name = c(\"Smaug\", \"Fawkes\", \"Twilight\", \"Buckbeak\", \"Ariel\", \"Firenze\", \n           \"Slytherin\", \"Tinkerbell\", \"Grumpy\", \"Remus\", \"Dracula\", \"Casper\",\n           \"Norbert\", \"Silver\", \"Talon\", \"Periwinkle\", \"Ash\", \"Marina\"),\n  age = c(250, 500, 150, 75, 120, 80, 200, 50, 100, 45, 300, 150,\n          100, 50, 120, 25, 300, 80),\n  power_level = c(95, 90, 70, 75, 60, 65, 85, 40, 60, 70, 80, 50,\n                 80, 65, 70, 35, 85, 55),\n  habitat = c(\"Mountain\", \"Volcano\", \"Forest\", \"Mountain\", \"Ocean\", \"Forest\", \n              \"Cave\", \"Forest\", \"Mountain\", \"Forest\", \"Castle\", \"Haunted House\",\n              \"Mountain\", \"Forest\", \"Mountain\", \"Forest\", \"Volcano\", \"Ocean\"),\n  element = c(\"Fire\", \"Fire\", \"Light\", \"Air\", \"Water\", \"Earth\", \n              \"Poison\", \"Light\", \"Earth\", \"Moon\", \"Blood\", \"Spirit\",\n              \"Fire\", \"Light\", \"Air\", \"Light\", \"Fire\", \"Water\"),\n  is_friendly = c(FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, \n                 FALSE, TRUE, FALSE, FALSE, FALSE, TRUE,\n                 FALSE, TRUE, FALSE, TRUE, TRUE, TRUE)\n)\n\n# Export our original dataset to CSV\nwrite_csv(magical_creatures, \"magical_creatures.csv\")\n\n# Re-import and verify (in a real workflow, you might combine these steps)\ncreatures_imported &lt;- read_csv(\"magical_creatures.csv\")\n\n# ===== STEP 1: DATA CLEANING AND ENRICHMENT =====\ncreatures_enhanced &lt;- creatures_imported %&gt;%\n  # Remove duplicates \n  distinct() %&gt;%\n  # Add calculated fields\n  mutate(\n    # Create power categories\n    power_category = case_when(\n      power_level &gt;= 85 ~ \"Supreme\",\n      power_level &gt;= 70 ~ \"High\",\n      power_level &gt;= 50 ~ \"Moderate\",\n      TRUE ~ \"Low\"\n    ),\n    # Age categories\n    age_category = case_when(\n      age &gt;= 200 ~ \"Ancient\",\n      age &gt;= 100 ~ \"Old\",\n      age &gt;= 50 ~ \"Adult\",\n      TRUE ~ \"Young\"\n    ),\n    # Danger assessment\n    danger_level = if_else(\n      power_level &gt; 80 & !is_friendly, \n      \"Extremely Dangerous\",\n      if_else(power_level &gt; 60 & !is_friendly, \"Dangerous\",\n             if_else(!is_friendly, \"Exercise Caution\", \"Generally Safe\"))\n    ),\n    # Normalized power (as a percentage of maximum)\n    power_normalized = round(power_level / max(power_level) * 100, 1),\n    # Create a magical power index\n    magic_index = (power_level * 0.6) + (age * 0.4 / 10)\n  )\n\n# ===== STEP 2: SPECIES ANALYSIS =====\nspecies_analysis &lt;- creatures_enhanced %&gt;%\n  group_by(species) %&gt;%\n  summarize(\n    count = n(),\n    avg_power = mean(power_level),\n    max_power = max(power_level),\n    min_power = min(power_level),\n    power_range = max_power - min_power,\n    avg_age = mean(age),\n    pct_friendly = mean(is_friendly) * 100\n  ) %&gt;%\n  arrange(desc(avg_power))\n\n# ===== STEP 3: HABITAT ANALYSIS =====\nhabitat_analysis &lt;- creatures_enhanced %&gt;%\n  group_by(habitat, element) %&gt;%\n  summarize(\n    creature_count = n(),\n    avg_power = mean(power_level),\n    most_dangerous = max(power_level),\n    pct_friendly = mean(is_friendly) * 100\n  ) %&gt;%\n  arrange(habitat, desc(avg_power))\n\n# ===== STEP 4: ELEMENT CHAMPIONS =====\nelement_champions &lt;- creatures_enhanced %&gt;%\n  group_by(element) %&gt;%\n  slice_max(order_by = power_level, n = 1) %&gt;%\n  select(element, name, species, power_level, danger_level) %&gt;%\n  arrange(desc(power_level))\n\n# ===== STEP 5: FRIENDSHIP ANALYSIS =====\nfriendship_analysis &lt;- creatures_enhanced %&gt;%\n  group_by(power_category, is_friendly) %&gt;%\n  summarize(\n    count = n(),\n    avg_age = mean(age),\n    avg_power = mean(power_level)\n  ) %&gt;%\n  arrange(power_category, desc(is_friendly))\n\n# ===== STEP 6: FEATURE CORRELATION =====\n# Checking relationship between power and age\npower_age_correlation &lt;- cor(creatures_enhanced$power_level, \n                            creatures_enhanced$age,\n                            method = \"pearson\")\n\n# ===== STEP 7: DANGER ASSESSMENT =====\ndanger_assessment &lt;- creatures_enhanced %&gt;% \n  filter(danger_level == \"Extremely Dangerous\") %&gt;% \n  select(name, species, habitat, power_level, element)\n\n# ===== STEP 8: ADVANCED FILTERING =====\n# Find creatures matching specific criteria\nspecial_creatures &lt;- creatures_enhanced %&gt;%\n  filter(\n    (element %in% c(\"Fire\", \"Water\")) &\n    (power_level &gt; 70 | age &gt; 200) &\n    (habitat != \"Cave\")\n  ) %&gt;%\n  select(name, species, element, habitat, power_level, age) %&gt;%\n  arrange(desc(power_level))\n\n# ===== STEP 9: CREATE FINAL REPORT =====\nmagical_report &lt;- list(\n  dataset_summary = list(\n    creature_count = nrow(creatures_enhanced),\n    species_count = n_distinct(creatures_enhanced$species),\n    habitat_count = n_distinct(creatures_enhanced$habitat),\n    element_count = n_distinct(creatures_enhanced$element),\n    avg_power_level = mean(creatures_enhanced$power_level),\n    avg_age = mean(creatures_enhanced$age),\n    friendly_pct = mean(creatures_enhanced$is_friendly) * 100,\n    power_age_correlation = power_age_correlation\n  ),\n  most_powerful = creatures_enhanced %&gt;% \n                  slice_max(order_by = power_level, n = 1) %&gt;% \n                  select(name, species, power_level, element),\n  oldest_creature = creatures_enhanced %&gt;%\n                   slice_max(order_by = age, n = 1) %&gt;%\n                   select(name, species, age, power_level),\n  species_analysis = species_analysis,\n  habitat_analysis = habitat_analysis,\n  element_champions = element_champions,\n  friendship_analysis = friendship_analysis,\n  danger_assessment = danger_assessment,\n  special_creatures = special_creatures\n)\n\n# Show the complete report\nmagical_report"
  },
  {
    "objectID": "beginner/tidyverse-I/index.html#advanced-tidyverse-topics-mastering-the-arcane-arts",
    "href": "beginner/tidyverse-I/index.html#advanced-tidyverse-topics-mastering-the-arcane-arts",
    "title": "Tidyverse: I",
    "section": "Advanced Tidyverse Topics: Mastering the Arcane Arts",
    "text": "Advanced Tidyverse Topics: Mastering the Arcane Arts\nFor those who wish to continue their magical journey, here are some advanced tidyverse topics to explore:\n\nThe Magic of Joins\nCombining datasets is like merging two magical potions to create something even more powerful:\n# Create two datasets\nwizards &lt;- tibble(\n  name = c(\"Gandalf\", \"Dumbledore\", \"Merlin\", \"Elminster\"),\n  element = c(\"Light\", \"Fire\", \"Earth\", \"Air\"),\n  power = c(95, 92, 99, 90)\n)\n\nspells &lt;- tibble(\n  caster = c(\"Gandalf\", \"Gandalf\", \"Dumbledore\", \"Merlin\", \"Unknown\"),\n  spell = c(\"Light Beam\", \"Flame Shield\", \"Phoenix Call\", \"Earth Shake\", \"Tempest\"),\n  power_cost = c(20, 35, 40, 50, 60)\n)\n\n# Inner join - only keeps matching rows\ninner_join(wizards, spells, by = c(\"name\" = \"caster\"))\n\n# Left join - keeps all rows from the left table\nleft_join(wizards, spells, by = c(\"name\" = \"caster\"))\n\n# Right join - keeps all rows from the right table\nright_join(wizards, spells, by = c(\"name\" = \"caster\"))\n\n# Full join - keeps all rows from both tables\nfull_join(wizards, spells, by = c(\"name\" = \"caster\"))\n\n\nThe Art of Pivoting\nReshaping data is like transforming your magical creatures into different forms:\n# Wide to long format\nmeasurements &lt;- tibble(\n  name = c(\"Dragon\", \"Phoenix\", \"Unicorn\"),\n  height = c(300, 120, 180),\n  weight = c(2000, 15, 450),\n  wingspan = c(500, 300, NA)\n)\n\n# Convert to long format\nmeasurements_long &lt;- measurements %&gt;%\n  pivot_longer(\n    cols = c(height, weight, wingspan),\n    names_to = \"measurement\",\n    values_to = \"value\"\n  )\n\n# Long to wide format\nmeasurements_wide &lt;- measurements_long %&gt;%\n  pivot_wider(\n    names_from = measurement,\n    values_from = value\n  )\n\n\nWorking with Nested Data\nNested data is like having magical creatures with smaller creatures inside them:\n# Group and nest data\nnested_creatures &lt;- magical_creatures %&gt;%\n  group_by(species) %&gt;%\n  nest()\n\n# Work with nested data\nnested_creatures %&gt;%\n  mutate(\n    creature_count = map_int(data, nrow),\n    power_stats = map(data, ~ summary(.$power_level)),\n    max_power = map_dbl(data, ~ max(.$power_level))\n  )\n\n# Unnest data\nnested_creatures %&gt;%\n  unnest(data)\nWith these advanced techniques in your magical arsenal, there’s no data enchantment you can’t master!\n\n\nFurther Learning\nTo continue your journey to becoming a tidyverse archmage, consult these magical tomes: - R for Data Science - tidyverse.org - RStudio Cheatsheets"
  },
  {
    "objectID": "contribute.html",
    "href": "contribute.html",
    "title": "How to contribute?",
    "section": "",
    "text": "This is the project of WeData, an association dedicated to the promotion of data science and computer science. We wanted a way of sharing exercises that was as simple, independent and free as possible for as many people as possible. Thanks to the arrival of webr and quarto-live, this was possible!\nNote: quarto-live is still in early stage and further improvement are comming."
  },
  {
    "objectID": "contribute.html#all-contributions-are-welcome",
    "href": "contribute.html#all-contributions-are-welcome",
    "title": "How to contribute?",
    "section": "All contributions are welcome!",
    "text": "All contributions are welcome!\nThis site is based on collaboration and aims to enable anyone wishing to help create interactive exercises to do so. Here are the steps if you want to help build this website by creating exercises:\n\n1. Clone the repository\nGo to the website GitHub repository. After cloning it, your are good to go!\n\n\n2. Create your tutorial\nIn the folder corresponding to the exercises level (currently beginner, intermediate and advanced), create a folder with the name you want. INside it create your quarto file (.qmd) or markdown file (.md) and add at least the following information to your YAML (begining of the file):\n---\n1title: My exercises set\n2author: Me\n3date: \"2024-08-11\"\n4description: \"My description...\"\n5categories:\n  - Category 1\n  - ...\n6image: image.png\n---\n\n1\n\nCompulsary\n\n2\n\nCompulsary\n\n3\n\nCompulsary\n\n4\n\nOptional\n\n5\n\nOptional\n\n6\n\nOptional, but if added it is better to put everything inside a folder\n\n\nThen for quarto file you need to add the following code at the begining after the YAML but before anything in the file:\n{{&lt; include ../../_extensions/r-wasm/live/_knitr.qmd &gt;}}\n\n\n3. Write your tutorial\nYou can follow the tutorials from the official quarto-live website. Pay particular attention to the following chapters (at least the first one):\nFrom the “Exercises Grading” part:\nCreating Exercises - Managing Environements - Grading Solutions - Gradin with {gradethis}\n\n\n4. Send your exercises\nPush your changes if your are a contributer or do a pull requests otherwise."
  },
  {
    "objectID": "advanced.html",
    "href": "advanced.html",
    "title": "Advanced",
    "section": "",
    "text": "Advanced\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "beginner/basics/basics.html",
    "href": "beginner/basics/basics.html",
    "title": "R Language Basics: 0",
    "section": "",
    "text": "Calculate the sum of 15 and 30.\nSolution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the + operator to add two numbers like a machine calculator.\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n15 + 30"
  },
  {
    "objectID": "beginner/basics/basics.html#exercise-1-basic-arithmetic",
    "href": "beginner/basics/basics.html#exercise-1-basic-arithmetic",
    "title": "R Language Basics: 0",
    "section": "",
    "text": "Calculate the sum of 15 and 30.\nSolution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the + operator to add two numbers like a machine calculator.\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n15 + 30"
  },
  {
    "objectID": "beginner/basics/basics.html#exercise-2-variable-assignment",
    "href": "beginner/basics/basics.html#exercise-2-variable-assignment",
    "title": "R Language Basics: 0",
    "section": "Exercise 2: Variable Assignment",
    "text": "Exercise 2: Variable Assignment\nAssign the value 100 to a variable named my_variable and print it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the &lt;- (or =) operator to assign a value to a variable.\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Assign value to a variable\nmy_variable &lt;- 100\n\n# or\nmy_variable = 100\n\n# Print the variable\nmy_variable"
  },
  {
    "objectID": "beginner/basics/basics.html#exercise-3-creating-a-vector",
    "href": "beginner/basics/basics.html#exercise-3-creating-a-vector",
    "title": "R Language Basics: 0",
    "section": "Exercise 3: Creating a Vector",
    "text": "Exercise 3: Creating a Vector\nCreate a vector named my_vector containing the numbers 1, 2, 3, 4, and 5.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the c() function to create a vector.\n\n\n\n\n\n\n\n\n\n\n\nTips\n\n\n\n\n\nAlternatively use the : function to create a vector.\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Create a vector\nc(1, 2, 3, 4, 5)\n\n# or\n1:5"
  },
  {
    "objectID": "beginner/basics/basics.html#exercise-4-basic-function-usage",
    "href": "beginner/basics/basics.html#exercise-4-basic-function-usage",
    "title": "R Language Basics: 0",
    "section": "Exercise 4: Basic Function Usage",
    "text": "Exercise 4: Basic Function Usage\nFind the mean of the numbers 10, 20, 30, 40, and 50.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the mean() function to calculate the average of a set of numbers.\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Calculate the mean\nnumbers &lt;- c(10, 20, 30, 40, 50)\nmean(numbers)"
  },
  {
    "objectID": "beginner/basics/basics.html#exercise-5-conditional-statement",
    "href": "beginner/basics/basics.html#exercise-5-conditional-statement",
    "title": "R Language Basics: 0",
    "section": "Exercise 5: Conditional Statement",
    "text": "Exercise 5: Conditional Statement\nWrite a conditional statement that checks if a number x is greater than 10. If it is, print “Greater than 10”; otherwise, print “10 or less”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse an if statement to perform a conditional check.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nSolution:\nx &lt;- 12\n\n# Conditional statement\nif (x &gt; 10) {\n  print(\"Greater than 10\")\n} else {\n  print(\"10 or less\")\n}"
  },
  {
    "objectID": "beginner/r-foundations/foundations_I.html",
    "href": "beginner/r-foundations/foundations_I.html",
    "title": "R Language Basics I",
    "section": "",
    "text": "R is a powerful programming language for statistical computing and data analysis. Originally developed by statisticians Ross Ihaka and Robert Gentleman at the University of Auckland in the 1990s, R has become a leading tool for data science, statistical analysis, and data visualization.\nThink of R as the Swiss Army knife of the data world – it may not look as flashy as some newer tools, but it’s powerful, reliable, and has a tool for every statistical job imaginable!\n\n\n\nStatistical Focus: R was built specifically for statistical analysis and offers a vast array of statistical methods and tests. It’s like having a statistical superhero at your fingertips!\nGraphics Capabilities: Excellent for creating high-quality visualizations with packages like ggplot2. Your data deserves a glow-up too!\nExtensibility: Thousands of packages available through CRAN (Comprehensive R Archive Network) extend R’s functionality. It’s like the App Store for statistics nerds!\nOpen Source: Free and open-source, with a strong community of users and developers. In a world of expensive software, R is like Robin Hood – taking powerful statistical capabilities from the wealthy software giants and giving them to everyone.\nInteractive Environment: The R console provides immediate feedback, making it ideal for data exploration. It’s like having a conversation with your data!\n\n\n\n\nWhen you start R, you’re presented with a console where you can enter commands. The console interprets each command and returns results immediately.\nR functions as a sophisticated calculator, capable of handling basic arithmetic operations and much more. Here are some basic operations you can perform:\n# Addition: Like when Darth Vader and Luke Skywalker finally team up\n5 + 3  # Returns 8\n\n# Subtraction: Like when you realize how much Starbucks costs monthly\n10 - 4  # Returns 6\n\n# Multiplication: What happens to your problems when you tell your mom\n6 * 7  # Returns 42 (also the answer to the ultimate question of life, the universe, and everything)\n\n# Division: Sharing pizza with friends\n20 / 5  # Returns 4\n\n# Exponentiation (Power): Like when a superhero discovers their abilities\n2^3  # Returns 8\n\n\n\nPerform the following operations in R: 1. Add 25 and 75 2. Multiply 10 by 5 3. Divide 100 by 4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the standard arithmetic operators: + for addition, * for multiplication, and / for division. Even Jar Jar Binks could do this!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Addition\n25 + 75\n\n# Multiplication\n10 * 5\n\n# Division\n100 / 4\n\n\n\n\n\n\n\nR allows you to add comments to your code to explain what it does. Comments start with the # symbol and are ignored by R when executing code, like how everyone ignores the terms and conditions before clicking “I agree.”\nR automatically prints the result of a calculation or command if it’s not assigned to a variable. This feature is useful for quick calculations and checking intermediate results.\nYou can also explicitly print values using the print() function, which is especially useful when working with scripts where automatic printing doesn’t occur.\n# This is a comment that R ignores (like when your cat ignores you)\n\n# Automatic printing example\n42  # R will output 42, the answer to everything according to \"The Hitchhiker's Guide to the Galaxy\"\n\n# Print function example\nprint(\"Help me Obi-Wan Kenobi, you're my only hope\")  # Explicitly prints the message\n\n\n\nPractice printing values and adding comments to your code.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse # to add comments. R will automatically print the result of an expression if it’s not assigned to a variable. You can also use the print() function, which is like using a megaphone for your data.\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# This is a comment - it's like whispering to your code\n\n# Automatic printing\n42  # The answer to life, the universe, and everything\n\n# Print function\nprint(\"I find your lack of comments disturbing\")\n\n# Multiple operations\n2 + 2  # This is the way\nprint(10 * 5)  # May the force be with you"
  },
  {
    "objectID": "beginner/r-foundations/foundations_I.html#introduction-to-r",
    "href": "beginner/r-foundations/foundations_I.html#introduction-to-r",
    "title": "R Language Basics I",
    "section": "",
    "text": "R is a powerful programming language for statistical computing and data analysis. Originally developed by statisticians Ross Ihaka and Robert Gentleman at the University of Auckland in the 1990s, R has become a leading tool for data science, statistical analysis, and data visualization.\nThink of R as the Swiss Army knife of the data world – it may not look as flashy as some newer tools, but it’s powerful, reliable, and has a tool for every statistical job imaginable!\n\n\n\nStatistical Focus: R was built specifically for statistical analysis and offers a vast array of statistical methods and tests. It’s like having a statistical superhero at your fingertips!\nGraphics Capabilities: Excellent for creating high-quality visualizations with packages like ggplot2. Your data deserves a glow-up too!\nExtensibility: Thousands of packages available through CRAN (Comprehensive R Archive Network) extend R’s functionality. It’s like the App Store for statistics nerds!\nOpen Source: Free and open-source, with a strong community of users and developers. In a world of expensive software, R is like Robin Hood – taking powerful statistical capabilities from the wealthy software giants and giving them to everyone.\nInteractive Environment: The R console provides immediate feedback, making it ideal for data exploration. It’s like having a conversation with your data!\n\n\n\n\nWhen you start R, you’re presented with a console where you can enter commands. The console interprets each command and returns results immediately.\nR functions as a sophisticated calculator, capable of handling basic arithmetic operations and much more. Here are some basic operations you can perform:\n# Addition: Like when Darth Vader and Luke Skywalker finally team up\n5 + 3  # Returns 8\n\n# Subtraction: Like when you realize how much Starbucks costs monthly\n10 - 4  # Returns 6\n\n# Multiplication: What happens to your problems when you tell your mom\n6 * 7  # Returns 42 (also the answer to the ultimate question of life, the universe, and everything)\n\n# Division: Sharing pizza with friends\n20 / 5  # Returns 4\n\n# Exponentiation (Power): Like when a superhero discovers their abilities\n2^3  # Returns 8\n\n\n\nPerform the following operations in R: 1. Add 25 and 75 2. Multiply 10 by 5 3. Divide 100 by 4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the standard arithmetic operators: + for addition, * for multiplication, and / for division. Even Jar Jar Binks could do this!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Addition\n25 + 75\n\n# Multiplication\n10 * 5\n\n# Division\n100 / 4\n\n\n\n\n\n\n\nR allows you to add comments to your code to explain what it does. Comments start with the # symbol and are ignored by R when executing code, like how everyone ignores the terms and conditions before clicking “I agree.”\nR automatically prints the result of a calculation or command if it’s not assigned to a variable. This feature is useful for quick calculations and checking intermediate results.\nYou can also explicitly print values using the print() function, which is especially useful when working with scripts where automatic printing doesn’t occur.\n# This is a comment that R ignores (like when your cat ignores you)\n\n# Automatic printing example\n42  # R will output 42, the answer to everything according to \"The Hitchhiker's Guide to the Galaxy\"\n\n# Print function example\nprint(\"Help me Obi-Wan Kenobi, you're my only hope\")  # Explicitly prints the message\n\n\n\nPractice printing values and adding comments to your code.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse # to add comments. R will automatically print the result of an expression if it’s not assigned to a variable. You can also use the print() function, which is like using a megaphone for your data.\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# This is a comment - it's like whispering to your code\n\n# Automatic printing\n42  # The answer to life, the universe, and everything\n\n# Print function\nprint(\"I find your lack of comments disturbing\")\n\n# Multiple operations\n2 + 2  # This is the way\nprint(10 * 5)  # May the force be with you"
  },
  {
    "objectID": "beginner/r-foundations/foundations_I.html#names-and-assignment",
    "href": "beginner/r-foundations/foundations_I.html#names-and-assignment",
    "title": "R Language Basics I",
    "section": "Names and Assignment",
    "text": "Names and Assignment\nIn R, you can store values in variables for later use. This is done using the assignment operator, which can be either &lt;- or =. The &lt;- operator is more commonly used in R programming.\n\nVariable Assignment\nWhen you assign a value to a variable, R stores that value in memory. You can then use the variable name to refer to that value in subsequent operations. It’s like giving a name to your pet dragon so you can call it later.\n# Assign value 10 to variable x\nx &lt;- 10\n\n# Use x in a calculation\nx + 5  # Returns 15\n\n# Reassign x to a new value\nx &lt;- 20\nx  # Now returns 20, because x had a change of heart\nWhile both &lt;- and = work for assignment in most contexts, &lt;- is preferred in R programming because it clearly distinguishes assignment from the == equality test and because it works in all contexts. It’s like the difference between “your” and “you’re” - both sound the same, but using the wrong one can lead to confusion!\n\n\nVariable Names\nGood variable names are essential for readable code. In R:\n\nVariable names can contain letters, numbers, dots (.), and underscores (_)\nNames must start with a letter or a dot not followed by a number\nNames are case-sensitive (jedi and Jedi are different variables)\nNames should be descriptive of what they contain\n\n# Valid variable names\nage_of_yoda &lt;- 900\nharry.potter &lt;- \"The Boy Who Lived\"\nvader_rage_level &lt;- 95\n\n# Invalid variable names (would cause errors)\n# 2fast2furious &lt;- \"Great movie\"  # Can't start with a number\n# iron-man &lt;- \"Tony Stark\"      # Can't contain hyphens\n\n\nExercise 3: Variable Assignment\nCreate variables for the following: 1. Assign the value 42 to a variable named answer_to_everything 2. Assign the text “May the Force be with you” to a variable named jedi_greeting 3. Assign the result of 25 * 4 to a variable named lightsaber_power\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the assignment operator &lt;- to assign values to variables. Even a young padawan can master this skill!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Assign numeric value\nanswer_to_everything &lt;- 42\n\n# Assign text (character) value\njedi_greeting &lt;- \"May the Force be with you\"\n\n# Assign result of calculation\nlightsaber_power &lt;- 25 * 4\n\n# Print the variables\nanswer_to_everything\njedi_greeting\nlightsaber_power\n\n\n\n\n\n\nData Types in R\nR has several basic data types:\n\nNumeric: Decimal numbers (1.5, 42.0) - like counting how many times Thanos snaps\nInteger: Whole numbers (1L, 42L, where the L indicates an integer) - like counting Stormtroopers\nCharacter: Text, enclosed in quotes (\"hello\", 'R is fun') - like famous movie quotes\nLogical: Boolean values (TRUE or FALSE) - like asking “Is Darth Vader Luke’s father?”\nComplex: Complex numbers with real and imaginary parts (1+2i) - like quantum physics that powers Iron Man’s suit\nDate: Date values (as.Date(\"2023-01-15\")) - like keeping track of when the Death Star was destroyed\n\nYou can check the type of any variable using the class() function.\n# Numeric\ndeath_star_diameter &lt;- 160.0\nclass(death_star_diameter)  # Returns \"numeric\"\n\n# Integer\nstormtrooper_count &lt;- 10000L\nclass(stormtrooper_count)  # Returns \"integer\"\n\n# Character\nyoda_quote &lt;- \"Do or do not, there is no try\"\nclass(yoda_quote)  # Returns \"character\"\n\n# Logical\nis_vader_lukes_father &lt;- TRUE\nclass(is_vader_lukes_father)  # Returns \"logical\"\n\n# Date\nalderaan_destruction &lt;- as.Date(\"1977-05-25\")\nclass(alderaan_destruction)  # Returns \"Date\"\n\n\nExercise 4: Variable Types\nCreate variables of different types and check their class:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the class() function to check the type of a variable. Create variables of different types and check their class. It’s like figuring out if someone is a Jedi, Sith, or just a regular human.\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Numeric variable\nmillennium_falcon_speed &lt;- 1050\nclass(millennium_falcon_speed)\n\n# Integer variable (note the L suffix)\nrebel_fighters &lt;- 30L\nclass(rebel_fighters)\n\n# Character variable\nvader_quote &lt;- \"I am your father\"\nclass(vader_quote)\n\n# Logical variable\nhan_shot_first &lt;- TRUE\nclass(han_shot_first)\n\n# Date variable\nendgame_release &lt;- as.Date(\"2019-04-26\")\nclass(endgame_release)"
  },
  {
    "objectID": "beginner/r-foundations/foundations_I.html#vectors",
    "href": "beginner/r-foundations/foundations_I.html#vectors",
    "title": "R Language Basics I",
    "section": "Vectors",
    "text": "Vectors\nVectors are one of the most basic and important data structures in R. A vector is a sequence of data elements of the same type. It’s like a collection of values stored together - think of it as your collection of Star Wars action figures, but all of the same type (all Jedi, all Sith, etc.).\n\nCreating Vectors\nThere are several ways to create vectors in R:\n\nUsing the c() function (combine function):\n# Create a numeric vector\njedi_power_levels &lt;- c(80, 95, 75, 99, 60)\n\n# Create a character vector\nhogwarts_houses &lt;- c(\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\")\nUsing the colon operator : for sequences:\n# Create a sequence from 1 to 10\ncountdown_to_blastoff &lt;- 10:1  # Contains 10, 9, 8, ..., 1\nUsing the seq() function for more complex sequences:\n# Create a sequence from 0 to 1 with 0.1 steps\nlightsaber_power_settings &lt;- seq(0, 1, by = 0.1)  # 0, 0.1, 0.2, ..., 1\nUsing the rep() function to repeat values:\n# Repeat \"I am Groot\" five times\ngroot_dialogue &lt;- rep(\"I am Groot\", times = 5)  # I am Groot, I am Groot, I am Groot...\n\n\n\nVector Types\nAll elements in a vector must be of the same type. The main vector types are:\n\nNumeric vectors: contain numbers (c(3.14, 2.718, 1.618)) - like the scores in Olympic lightsaber throwing\nInteger vectors: contain whole numbers (c(1L, 2L, 3L)) - like counting Infinity Stones\nCharacter vectors: contain text (c(\"Luke\", \"Leia\", \"Han\")) - like your favorite Star Wars characters\nLogical vectors: contain TRUE or FALSE values (c(TRUE, FALSE, TRUE)) - like whether each Avenger survived “the snap”\nDate vectors: contain date values - like important Star Wars movie release dates\n\n\n\nExercise 5: Creating Vectors\nCreate vectors using different methods:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse c() to combine values into a vector. Use : for a sequence of consecutive numbers. It’s not rocket science… well, maybe it is if you’re building vectors for the Death Star trajectory.\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Create a numeric vector using c()\njedi_council_power &lt;- c(95, 88, 92, 99, 85)\njedi_council_power\n\n# Create a sequence using :\norder_66_victims &lt;- 1:10\norder_66_victims\n\n# Create a character vector\nrebel_alliance &lt;- c(\"Luke\", \"Leia\", \"Han\", \"Chewie\", \"R2-D2\")\nrebel_alliance\n\n# Create a logical vector\nsurvived_death_star &lt;- c(TRUE, TRUE, TRUE, FALSE, TRUE)\nsurvived_death_star\n\n\n\n\n\n\nVector Operations\nR is designed to work efficiently with vectors. Most operations are “vectorized,” meaning they apply to each element of the vector automatically. This is like having Force powers that affect multiple objects at once!\n\nArithmetic with Vectors\nWhen you perform arithmetic operations on vectors, R applies the operation to each element:\n# Vector addition\nc(1, 2, 3) + c(4, 5, 6)  # Returns c(5, 7, 9)\n\n# Vector multiplication - like calculating damage multipliers in a video game\nc(1, 2, 3) * 2  # Returns c(2, 4, 6)\n\n\nVector Recycling\nIf vectors have different lengths, R “recycles” the shorter vector to match the length of the longer one:\n# Vector of length 3 plus vector of length 1\n# Like adding a power-up to each character in a game\nc(1, 2, 3) + 10  # Returns c(11, 12, 13)\n\n# Vector of length 3 plus vector of length 2\n# Like trying to pair Jedi with lightsabers when you don't have enough lightsabers\nc(1, 2, 3) + c(10, 20)  # Returns c(11, 22, 13), with warning\n\n\nVector Functions\nR has many built-in functions for working with vectors:\nx &lt;- c(2, 4, 6, 8, 10)  # Midi-chlorian counts for different Jedi\n\nlength(x)    # Returns 5 (number of Jedi)\nsum(x)       # Returns 30 (total midi-chlorian count)\nmean(x)      # Returns 6 (average midi-chlorian count)\nmedian(x)    # Returns 6 (median midi-chlorian count)\nmin(x)       # Returns 2 (lowest midi-chlorian count)\nmax(x)       # Returns 10 (highest midi-chlorian count)\nsort(x)      # Returns sorted vector (arranging Jedi by power)\nrev(x)       # Returns reversed vector (from most to least powerful)\n\n\n\nExercise 6: Vector Operations\nPerform operations on vectors:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nYou can perform arithmetic operations on vectors element-by-element. Use functions like length(), sum(), mean(), etc. to get information about vectors. It’s like comparing the power levels of Jedi and Sith!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Pre-defined vectors\njedi_power &lt;- c(80, 85, 95, 75, 90)\nsith_power &lt;- c(85, 80, 90, 95, 85)\n\n# Vector addition - combined power\njedi_power + sith_power\n\n# Vector multiplication - power amplification\njedi_power * 1.5\n\n# Vector length - how many Jedi\nlength(jedi_power)\n\n# Sum of vector elements - total Jedi power\nsum(jedi_power)\n\n# Mean of vector elements - average Sith power\nmean(sith_power)\n\n# Min and max - weakest and strongest Jedi\nmin(jedi_power)\nmax(jedi_power)\n\n# Who is more powerful in each matchup?\njedi_power &gt; sith_power"
  },
  {
    "objectID": "beginner/r-foundations/foundations_I.html#operators",
    "href": "beginner/r-foundations/foundations_I.html#operators",
    "title": "R Language Basics I",
    "section": "Operators",
    "text": "Operators\nOperators are symbols that tell R to perform specific mathematical or logical operations. R has a rich set of operators that allow you to perform various calculations and comparisons.\n\nArithmetic Operators\nArithmetic operators perform mathematical calculations:\n\n\n\n\n\n\n\n\n\nOperator\nDescription\nExample\nResult\n\n\n\n\n+\nAddition\n5 + 3\n8 (like combining forces)\n\n\n-\nSubtraction\n5 - 3\n2 (like losing health points)\n\n\n*\nMultiplication\n5 * 3\n15 (like power-ups)\n\n\n/\nDivision\n5 / 3\n1.666667 (like sharing loot)\n\n\n^\nExponentiation\n5 ^ 3\n125 (like leveling up)\n\n\n%%\nModulus (remainder)\n5 %% 3\n2 (like leftover pizza slices)\n\n\n%/%\nInteger Division\n5 %/% 3\n1 (like whole portions in Jakku)\n\n\n\nThese operators can work on single values or vectors, applying the operation to each element of the vector.\n# Vector arithmetic\nc(1, 2, 3) + c(4, 5, 6)  # Returns c(5, 7, 9)\nc(1, 2, 3) * 2           # Returns c(2, 4, 6)\n\n\nExercise 7: Arithmetic Operators\nUse various arithmetic operators in R:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nCommon arithmetic operators in R include: + (addition), - (subtraction), * (multiplication), / (division), ^ (exponentiation), %% (modulo), %/% (integer division). Use the Force, young padawan!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Addition (combining rebel forces)\n10 + 5\n\n# Subtraction (stormtroopers lost in battle)\n10 - 5\n\n# Multiplication (cloning troopers)\n10 * 5\n\n# Division (sharing rations)\n10 / 3\n\n# Exponentiation (power amplification)\n2 ^ 3\n\n# Modulo (remainder after dividing portions)\n10 %% 3\n\n# Integer division (whole portions only)\n10 %/% 3\n\n\n\n\n\n\nComparison Operators\nComparison operators compare values and return logical (TRUE/FALSE) results:\n\n\n\n\n\n\n\n\n\nOperator\nDescription\nExample\nResult\n\n\n\n\n==\nEqual to\nyoda_age == 900\nTRUE\n\n\n!=\nNot equal to\nyoda_species != \"human\"\nTRUE\n\n\n&lt;\nLess than\nluke_power &lt; vader_power\nTRUE (initially)\n\n\n&gt;\nGreater than\nfalcon_speed &gt; tie_fighter_speed\nTRUE\n\n\n&lt;=\nLess than or equal to\nhan_solo_coolness &lt;= chewbacca_coolness\nFALSE\n\n\n&gt;=\nGreater than or equal to\ndeath_star_size &gt;= alderaan_size\nTRUE (unfortunately)\n\n\n\nThese operators are essential for filtering data and controlling program flow with conditionals.\n\n\nLogical Operators\nLogical operators combine logical (TRUE/FALSE) values:\n\n\n\n\n\n\n\n\n\nOperator\nDescription\nExample\nResult\n\n\n\n\n&\nElement-wise AND\nc(TRUE, FALSE) & c(TRUE, TRUE)\nc(TRUE, FALSE)\n\n\n|\nElement-wise OR\nc(TRUE, FALSE) | c(FALSE, TRUE)\nc(TRUE, TRUE)\n\n\n!\nNOT\n!TRUE\nFALSE\n\n\n&&\nAND (single value)\nis_jedi && has_lightsaber\nDepends on values\n\n\n||\nOR (single value)\nis_jedi || is_sith\nDepends on values\n\n\n\nThe element-wise operators (&, |) work on vectors, while the single-value operators (&&, ||) only evaluate the first element of vectors.\n# Element-wise AND\njedi_skills &lt;- c(TRUE, FALSE, TRUE)\nforce_sensitive &lt;- c(TRUE, TRUE, FALSE)\ncan_use_force &lt;- jedi_skills & force_sensitive  # Returns c(TRUE, FALSE, FALSE)\n\n# Single-value AND (uses only first element)\nis_a_jedi &lt;- jedi_skills && force_sensitive  # Returns TRUE\n\n\nExercise 8: Comparison Operators\nUse comparison operators and logical operators:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nComparison operators include: == (equal), != (not equal), &gt; (greater than), &lt; (less than), &gt;= (greater than or equal), &lt;= (less than or equal). Logical operators include: & (AND), | (OR), ! (NOT). Use them to compare the power levels of Vader and Luke!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\nvader_power &lt;- 95\nluke_power &lt;- 85\n\n# Comparison operators\nvader_power == luke_power  # Are they equally powerful?\nvader_power != luke_power  # Are they different in power?\nvader_power &gt; luke_power   # Is Vader more powerful?\nluke_power &lt; vader_power   # Is Luke less powerful?\nvader_power &gt;= 90  # Is Vader's power at least 90?\nluke_power &lt;= 80   # Is Luke's power at most 80?\n\n# Logical operators\n(vader_power &gt; 90) & (luke_power &gt; 80)  # Are both powerful?\n(vader_power &gt; 100) | (luke_power &gt; 80)  # Is at least one very powerful?\n!(vader_power == luke_power)  # Are they not equal in power?"
  },
  {
    "objectID": "beginner/r-foundations/foundations_I.html#factors-and-lists",
    "href": "beginner/r-foundations/foundations_I.html#factors-and-lists",
    "title": "R Language Basics I",
    "section": "Factors and Lists",
    "text": "Factors and Lists\n\nFactors\nFactors are a special type of vector used to represent categorical data. They are particularly useful in statistical modeling and data visualization. Think of them as sorting your Star Wars action figures by type: Jedi, Sith, droids, etc.\n\nCreating Factors\nFactors are created using the factor() function. By default, R will sort the levels alphabetically, but you can specify a custom order if needed.\n# Create a basic factor\njedi_or_sith &lt;- factor(c(\"Jedi\", \"Sith\", \"Sith\", \"Jedi\", \"Jedi\"))\njedi_or_sith  # Levels: Jedi Sith\n\n# Specify custom levels (including order)\nforce_alignment &lt;- factor(c(\"Light\", \"Dark\", \"Grey\", \"Light\", \"Dark\"), \n                     levels = c(\"Light\", \"Grey\", \"Dark\"))\nforce_alignment  # Levels: Light Grey Dark\n\n\nWorking with Factors\nFactors are useful for:\n\nEnsuring data consistency: Only values in the defined levels are allowed (no “Gungan” in your Jedi/Sith classification)\nControlling the order of categories: Important for plots and tables (Light side always comes first!)\nEfficient storage: Factors store integers internally with a lookup table\nStatistical modeling: Proper handling of categorical variables\n\nCommon functions used with factors:\n# Get the levels of a factor\nlevels(jedi_or_sith)  # Returns \"Jedi\" \"Sith\"\n\n# Count occurrences of each level\ntable(jedi_or_sith)  # Shows frequency table - how many Jedi vs Sith\n\n# Convert factor to numeric\nas.numeric(force_alignment)  # Returns the underlying integer codes\n\n# Convert factor to character\nas.character(force_alignment)  # Returns the original strings\n\n\n\nExercise 9: Creating and Working with Factors\nCreate and manipulate factors:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nFactors are used to represent categorical data. Use the factor() function to create factors. You can specify the levels using the levels parameter. It’s like organizing your Marvel heroes by team affiliation!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Create a vector of Star Wars species\nspecies &lt;- c(\"Human\", \"Wookiee\", \"Droid\", \"Human\", \"Twi'lek\", \"Droid\", \"Human\")\n\n# Convert to factor\nspecies_factor &lt;- factor(species)\nspecies_factor\n\n# Check levels\nlevels(species_factor)\n\n# Create Hogwarts houses factor with specified levels\nhogwarts_houses &lt;- factor(c(\"Gryffindor\", \"Slytherin\", \"Hufflepuff\", \"Ravenclaw\", \"Gryffindor\"), \n                 levels = c(\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\"))\nhogwarts_houses\n\n# Count occurrences\ntable(species_factor)\ntable(hogwarts_houses)\n\n\n\n\n\n\nLists\nLists are a versatile data structure in R that can hold elements of different types, including other lists. This makes them ideal for hierarchical or heterogeneous data. Think of a list as your utility belt - it can hold all sorts of gadgets (data types) at once!\n\nCreating Lists\nLists are created using the list() function. Each element can have a name for easier access.\n# Create a basic list\nbatmans_utility_belt &lt;- list(100, \"Batarang\", TRUE, c(1, 2, 3))\n\n# Create a named list\nhan_solo &lt;- list(\n  name = \"Han Solo\",\n  age = 32,\n  ships = c(\"Millennium Falcon\", \"Stolen Imperial Shuttle\"),\n  is_scoundrel = TRUE\n)\n\n\nAccessing List Elements\nThere are multiple ways to access elements in a list:\n\nUsing double square brackets [[]] for a single element:\nhan_solo[[1]]        # Returns \"Han Solo\"\nhan_solo[[\"name\"]]   # Returns \"Han Solo\"\nUsing the dollar sign $ for named elements:\nhan_solo$name        # Returns \"Han Solo\"\nhan_solo$ships[1]    # Returns \"Millennium Falcon\"\nUsing single square brackets [] to get a sublist:\nhan_solo[1:2]        # Returns a list with name and age\nhan_solo[\"ships\"]    # Returns a list with just the ships element\n\n\n\nModifying Lists\nLists are mutable, so you can change them after creation:\n# Add a new element\nhan_solo$friends &lt;- c(\"Luke\", \"Leia\", \"Chewie\")\n\n# Change an existing element\nhan_solo$age &lt;- 35\n\n# Remove an element\nhan_solo$is_scoundrel &lt;- NULL  # Han's grown up a bit\n\n\n\nExercise 10: Working with Lists\nCreate and manipulate lists:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nLists can contain elements of different types. Use the list() function to create lists. Access elements using [[]] or $ for named elements. Think of it as creating a character profile for your favorite superhero or villain!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Create a list with different types\ndarth_vader &lt;- list(\n  name = \"Anakin Skywalker\",\n  sith_name = \"Darth Vader\",\n  age = 45,\n  midi_chlorian_count = c(27000, 23000, 20000),  # decreasing over time\n  is_lukes_father = TRUE\n)\n\n# Display the list\ndarth_vader\n\n# Access elements\ndarth_vader[[1]]  # First element\ndarth_vader$sith_name  # Element by name\ndarth_vader$midi_chlorian_count[1]  # Element within element\n\n# Add element to list\ndarth_vader$famous_line &lt;- \"I am your father\"\ndarth_vader"
  },
  {
    "objectID": "beginner/r-foundations/foundations_I.html#data-frames",
    "href": "beginner/r-foundations/foundations_I.html#data-frames",
    "title": "R Language Basics I",
    "section": "Data Frames",
    "text": "Data Frames\nData frames are the most common data structure for tabular data in R. They’re similar to tables in a database, spreadsheets, or CSV files. Think of them as the Galactic Senate records - neatly organized information about various entities.\n\nKey Features of Data Frames\n\nRectangular data (rows and columns)\nEach column can be a different data type\nAll columns must have the same length\nEach column has a name\nRows can be named (but often aren’t)\n\n\n\nCreating Data Frames\nData frames are created using the data.frame() function:\n# Create a data frame of Star Wars characters\nstar_wars_chars &lt;- data.frame(\n  name = c(\"Luke\", \"Leia\", \"Han\", \"Chewie\"),\n  species = c(\"Human\", \"Human\", \"Human\", \"Wookiee\"),\n  force_sensitive = c(TRUE, TRUE, FALSE, FALSE),\n  age = c(19, 19, 29, 200)\n)\nYou can also create data frames from external sources using functions like: - read.csv() - read from CSV files - read.table() - read from text files - read_excel() - read from Excel files (requires the readxl package)\n\n\nExamining Data Frames\nR provides several functions to examine data frames:\n# View the structure of a data frame\nstr(star_wars_chars)\n\n# Show the first few rows\nhead(star_wars_chars)\n\n# Show the last few rows\ntail(star_wars_chars)\n\n# Get a summary of the data frame\nsummary(star_wars_chars)\n\n# Get the dimensions (rows, columns)\ndim(star_wars_chars)\n\n# Get the column names\nnames(star_wars_chars)\n\n\nExercise 11: Creating Data Frames\nCreate a data frame to store structured data:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nA data frame is a table-like structure where each column can contain data of a different type. Use the data.frame() function to create data frames. It’s like creating your own superhero database!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Create a data frame of Avengers\navengers &lt;- data.frame(\n  name = c(\"Iron Man\", \"Captain America\", \"Thor\", \"Hulk\"),\n  real_name = c(\"Tony Stark\", \"Steve Rogers\", \"Thor Odinson\", \"Bruce Banner\"),\n  age = c(40, 95, 1500, 42),\n  is_original = c(TRUE, TRUE, TRUE, TRUE)\n)\n\n# Display the data frame\navengers\n\n# Structure of data frame\nstr(avengers)\n\n# Summary statistics\nsummary(avengers)\n\n\n\n\n\n\nAccessing Data Frame Elements\nYou can access elements of a data frame in several ways:\n\n1. Using column names with the $ operator:\n# Get an entire column\nstar_wars_chars$name  # Returns c(\"Luke\", \"Leia\", \"Han\", \"Chewie\")\n\n# Get a specific element\nstar_wars_chars$age[2]  # Returns 19 (Leia's age)\n\n\n2. Using square brackets [row, column]:\n# Get a specific cell (row 2, column 3)\nstar_wars_chars[2, 3]  # Returns TRUE (Leia's force sensitivity)\n\n# Get multiple rows/columns\nstar_wars_chars[1:2, c(\"name\", \"age\")]  # First two characters, name and age only\n\n# Get all rows of a column\nstar_wars_chars[, \"name\"]  # All names\n\n# Get all columns for a row\nstar_wars_chars[2, ]  # All data for Leia\n\n\n3. Filtering data frames with logical conditions:\n# Get rows where age is over 25\nstar_wars_chars[star_wars_chars$age &gt; 25, ]\n\n# Get rows where character is force sensitive\nstar_wars_chars[star_wars_chars$force_sensitive == TRUE, ]\n\n# Combine conditions\nstar_wars_chars[star_wars_chars$species == \"Human\" & star_wars_chars$force_sensitive == TRUE, ]\n\n\n\nModifying Data Frames\nData frames can be modified after creation:\n# Add a new column\nstar_wars_chars$weapon &lt;- c(\"Lightsaber\", \"Blaster\", \"Blaster\", \"Bowcaster\")\n\n# Change a value\nstar_wars_chars$age[3] &lt;- 30\n\n# Add a new row\nnew_character &lt;- data.frame(\n  name = \"Yoda\",\n  species = \"Unknown\",\n  force_sensitive = TRUE,\n  age = 900,\n  weapon = \"Lightsaber\"\n)\nstar_wars_chars &lt;- rbind(star_wars_chars, new_character)\n\n\nExercise 12: Accessing Data Frames\nAccess and manipulate data frames:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nAccess data frame columns using $ notation or by specifying rows and columns with [row, column] notation. Filter rows using logical conditions. It’s like accessing the Starfleet database!\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Pre-defined data frame\nstar_trek_crew &lt;- data.frame(\n  name = c(\"Kirk\", \"Spock\", \"McCoy\", \"Uhura\", \"Scotty\"),\n  role = c(\"Captain\", \"Science Officer\", \"Doctor\", \"Communications\", \"Engineer\"),\n  species = c(\"Human\", \"Vulcan\", \"Human\", \"Human\", \"Human\"),\n  age = c(35, 40, 38, 32, 45),\n  stardate_joined = as.Date(c(\"2265-01-15\", \"2265-01-15\", \"2265-02-10\", \n                         \"2265-01-20\", \"2265-03-05\"))\n)\n\n# Display the full data frame\nstar_trek_crew\n\n# Access column by name\nstar_trek_crew$name\n\n# Access specific rows and columns\nstar_trek_crew[2, 3]  # Row 2, Column 3 (Spock's species)\nstar_trek_crew[1:3, c(\"name\", \"role\")]  # First three crew, name and role only\n\n# Filter data frame\nnon_humans &lt;- star_trek_crew[star_trek_crew$species != \"Human\", ]\nnon_humans\n\n# Calculate average age\nmean(star_trek_crew$age)\n\n# Sort data frame by age\nstar_trek_crew[order(star_trek_crew$age), ]\n\n# Find the oldest crew member\nstar_trek_crew[which.max(star_trek_crew$age), ]"
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "",
    "text": "This work is a translation of the a Python tutorial from the following repository: https://github.com/jisukimmmm/NCCR_MWQTA_2024\nIt was then transformed in an interactive tutorial."
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#basic-concepts",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#basic-concepts",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "1. Basic concepts",
    "text": "1. Basic concepts\nR can be used in different text editors, here are from the most preferred to the least preferred:\n\nRstudio\nPositron\nVisual Studio Code\nJupyter lab/notebook\nSublime text /Atom\nNeovim (only if you are experimented)\n\nR can be run in the following documents:\n\nRscripts (.r)\nRmarkdown notebook (.rmd)\nQuarto notebook (.qmd)\nJupyter notebook (.ipynb)\n\nYou need to install the R kernel for Jupyter notebook uses the following tutorial or you can try the ark kernel.\n\n\nRun a line (in a script or notebook) using Ctrl/Cmd+Enter and run code cells (in a notebook) by using Ctrl/Cmd+Shift+Enter or pressing the “Play” button in the toolbar above on the “Run button” or on the cell.\nTo print out results, simply write print() with parentheses, but it is not compulsory in R to output a result.\n\n\n\n\n\n\n\n\nLine 1: In R, comments begin with a #. This statement is ignored by the interpreter and serves as documentation for our code. The short cut for this is Ctrl+Maj+C or Cmd+Maj+C.\nLine 2: print(“Hello World!”) To print something on the console, print() function is used. This function also adds a newline after our message is printed (unlike in C). Note that in R you can also use the cat() function for a more readable version:\n\n\n\n\n\n\n\n\nNote: To see the document related to the function or library in:\n\nRStudio: appears automatically\nVScode: appears automatically or Ctrl+Space or hover the function\nJupyter lab/notebook: Shift+Tab.\n\nCurly brackets: Like many programming languages, R does not care about the spaces because it is always bound to brackets (parentheses, brackets or curly brackets). Indentation is only for aesthetic matter and users are free to indent their code following their taste (unlike Python or Nim that can have an indentation error). For example, the indentation of the second print() does not break the code since it is in the brackets:\n\n\n\n\n\n\n\n\nRstudio:\n\nCode is run inside an environment (R version, project and environment). It can always be stopped by pressing the “Stop” button or Ctrl+C shortcut (inside quarto/rmarkdown notebook or a script).\n\nJupyter lab/notebook:\n\nCode is run in a separate process called the Kernel. The Kernel can be interrupted or restarted. Try running the following cell and then hit the “Stop” button in the toolbar above or by clicking the right button on the script in jupyter Lab.\n\nIndexing in R starts at 1, which means that the first element in a sequence has an index of 1, the second element has an index of 2, and so on as expected.\n\n\n\n\n\n\n\n\nNote: You need a double bracket to have access to a list element (see last lines of code).\nTips: You can generate a continuous vector between two values using the sign : as follows:\n\n\n\n\n\n\n\n\nYou can also decide to use specific steps to get from one value to another using the seq() function:\n\n\n\n\n\n\n\n\nR reserved words\nR has reserved words that you can use as a variable name (except if you surround it by `). Otherwise, R is smart enough to know which element you are talking about even though, function, package and variable names have the same name."
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#variables-and-types",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#variables-and-types",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "2. Variables and types",
    "text": "2. Variables and types\nVariable names in R can contain alphanumerical characters a-z, A-Z, 0-9 and some special characters such as _ and .. Variable names cannot start with a number (e.g., 22list), or cannot be R reserved words (see above), or cannot contain a space or -. If your variable does not respect this rule, you can always surround it with ` and it will works.\nVariables can contain different forms such as character (text), integer, or double (float). The variable can contain mix of these different forms.\nThe assignment operators in R are &lt;-, -&gt; and =. R is a dynamically typed language, so we do not need to specify the type of a variable when we create one!\nAssigning a value to a new variable already creates the variable:\n\n\n\n\n\n\n\n\nIn the last line, we force the creation of integer by adding L after a number.\nSince value were assigned, the result does not appears. to see it you can just call the variable:\n\n\n\n\n\n\n\n\nYou can also have many of them in a single line using ; to separate them.\n\n\n\n\n\n\n\n\nAlthough not explicitly specified, a variable do have a type associated with it. The type is derived from the value it was assigned.\n\n\n\n\n\n\n\n\nIf we assign a new value to a variable, its type can change.\n\n\n\n\n\n\n\n\nNote: Integer: represents positive or negative whole numbers like 3 or -512. Floating point number (double): represents real numbers like 3.14159 or -2.5. Character string: text.\nIf we try to use a variable that has not yet been defined we get an Error:\n\n\n\n\n\n\n\n\nBut we can assign the value to a new variable from an existing variable:"
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#operators-and-comparisons",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#operators-and-comparisons",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "3. Operators and comparisons",
    "text": "3. Operators and comparisons\nMost operators and comparisons in R work as one would expect:\n\nArithmetic operators +, -, *, /, %/% (integer division), ^ power\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe boolean operators are spelled out as words. They are useful for condition (“if it is true or false”) and filtering data.\n\n\n\n\n\n\n\n\n\n\nNote the use of & (and), ! (not) and | (or).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nComparison operators can create booleans: &gt;, &lt;, &gt;= (greater or equal), &lt;= (less or equal), == equality.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote:\n\nand (&): means that both condition most be true to return TRUE\nor (|): means that least one condition need to be true tu return TRUE\n\n\n\n\n\n\n\n\n\n\nIt works with vectors:\n\n\n\n\n\n\n\n\nSo it is possible to filter vectors\n\n\n\n\n\n\n\n\nThere are other"
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#compound-types-strings-list-sets-tuples-and-dictionaries",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#compound-types-strings-list-sets-tuples-and-dictionaries",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "4. Compound types: strings, list, sets, tuples and dictionaries",
    "text": "4. Compound types: strings, list, sets, tuples and dictionaries\n\nStrings\nStrings are the variable type that is used for storing text messages. To declare string variables, include quotes; either single or double. E.g:\n\n\n\n\n\n\n\n\nIn R, characters are one element of a vector. To collect the length of a character, we need to use a specific function (since length() only return on 1 for characters).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can index a character in a string using [] after the function strsplit(character, \"\")[[1]][1]:\n\n\n\n\n\n\n\n\nNote that in R head() allows to do an ordered selection (like []) while tail() do the same backwards.\n\n\n\n\n\n\n\n\nWe can extract a part of a string using the syntax [start:stop], which extracts characters between index start and stop:\n\n\n\n\n\n\n\n\n\n\nList\nLists are very similar to vector, except that each element can be of any type.\nThe syntax for creating lists in R is list(...):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo access variables in a list:\n\n\n\n\n\n\n\n\n\nAdding, inserting, modifying, and removing elements from lists\n\n\n\n\n\n\n\n\nWe can modify lists by assigning new values to elements in the list. In technical jargon, lists are mutable.\n\n\n\n\n\n\n\n\nWe can insert an element at a specific index using append\n\n\n\n\n\n\n\n\nRemove elements with remove\n\n\n\n\n\n\n\n\n\n\n\nList advanced\nLists are not the best method for quick and concise calculations or operations. Vectors are more appropriate. This is because vectors always have the same type, so calculations are easier for the computer (which can anticipate all the steps and therefore optimize). Lists come in handy when we want to have a collection of elements that have different types and names.\nList are also like vectors, except that each element is a key-value pair. The syntax for lists is list(key1 = value1, ...).\n\n\n\n\n\n\n\n\nTo access keys:\n\n\n\n\n\n\n\n\nTo access values of the keys:\n\n\n\n\n\n\n\n\nTo access an item of a key:\n\n\n\n\n\n\n\n\nTo change the value of a key:\n\n\n\n\n\n\n\n\nTo add a new entry:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUser Input\nYou can take an user input using using the readline() function. Not that if you are using it in a chunk you still have to interact with the code in the console:\n\nRun the chunk\nGo to the console\nAnswer the question “what is you names:” with a text\nGo back to the chunk"
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#control-flow",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#control-flow",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "5. Control Flow",
    "text": "5. Control Flow\n\nConditional statements: if, else if, else\nYou can execute your code conditionally by dividing it into different parts and setting conditions for running each specific part.\nThe R syntax for conditional execution of code use the keywords if, else if, else:\n\nYou can play with this by changin the value of statement1 and statement2 by TRUE or FALSE"
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#loops",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#loops",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "Loops",
    "text": "Loops\nIn R, loops can be programmed in a number of different ways. The most common is the for loop, which is used together with iterable objects, such as lists. The basic syntax is:\n\nfor loops:\n\n\n\n\n\n\n\n\nNote that in this case, the function print() is necessary.\nTo iterate over key-value pairs of a list:\n\n\n\n\n\n\n\n\n\n\nwhile loops:\nInstead of passing each element of a list, it is possible to set the condition that a code is executed as long as a specific condition is met. You can run the whole chunk to see it in action:\n\n\n\n\n\n\n\n\nNote that the print(\"done\") statement is not part of the while loop body because of the difference in indentation."
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#functions",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#functions",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "6. Functions",
    "text": "6. Functions\nA function in R is defined using the keyword function, followed by a function name, a signature within parentheses (), and a curly brace {. The following code, with one additional level of indentation, is the function body. It return nothing but the function is available now.\n\n\n\n\n\n\n\n\nYou can use your new function on any value:\n\n\n\n\n\n\n\n\nNote that you are not forced to use the return statement in the function, R will return the last value automatically:\n\n\n\n\n\n\n\n\nYou can even make it shorter by removing the brackets and putting everything in a single line:"
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#modules",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#modules",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "7. Modules",
    "text": "7. Modules\nMost of the functionality in R is provided by packages. The R Standard Library is a large collection of packages that provides cross-platform implementations of common facilities such as access to the operating system, file I/O, string management, network communication, and much more.\nTo use a package in an R program it first has to be installed. A quickest way is to do it here using the install.packages statement. For example, to install the package ggplot2, which is a useful package for plots, we can do:\n\n\n\n\n\n\n\n\nTo use a package in an R program it first has to be imported. A package can be imported using the library statement. For example, to import the package ggplot2, which contains many standard plotting functions, we can do:\n\n\n\n\n\n\n\n\nThis includes the whole package and makes it available for use later in the program.\nNote that R can creat plot without packages. But ggplot2 bring beautiful and modular graphs. Let’s try it! For instance, R have built-in datasets that we can use. For instance we can invoke the cars dataset by simply calling it if it is for a short usecase:\n\n\n\n\n\n\n\n\nThen we can then plot it using the plot() function:\n\n\n\n\n\n\n\n\nggplot allow to do the same:\n\n\n\n\n\n\n\n\nOnce a package is imported, we can list the symbols it provides using the ls function:\n\n\n\n\n\n\n\n\nThe best way to learn about a package is to use its documentation:\n\nMain page\nGet started\nReferences (list of functions and objects from the package)\n\nThere are also great free ressources:\n\nR graphic Cookbook\nData visualization\n\nThere are also great examples…\n\nhttps://r-graph-gallery.com/\n\n… and cool extensions:\n\nhttps://exts.ggplot2.tidyverse.org/gallery/\n\n\nPlotting with ggplot2\n\n\n\n\n\n\n\n\nLet’s create a sequence and plot it against its version plus 1:\n\n\n\n\n\n\n\n\nLet’s create a normal distribution of 500 values using rnorm() and plot it as an histogram:"
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#manipulating-data-with-dplyr",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#manipulating-data-with-dplyr",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "Manipulating data with dplyr",
    "text": "Manipulating data with dplyr\nIt is possible to manipulate dataset (here called data frames) using base R functionalities. However, the dplyr make this manipulation easier. You need to install it firts with install.package(\"dplyr\") then load the library with library(dplyr):\n\n\n\n\n\n\n\n\nTo import a csv you can use the function read.csv() in base R, but the read_csv() in dplyr is faster and import everything as tibble table (an advanced kind of dataframe):\n\n\n\n\n\n\n\n\nNote that to have access to the data, you do not need to write the full path, you can simply press the key Tab inside the quotation mark of a\nDisplay a dataframe:\n\n\n\n\n\n\n\n\nDisplay the size of your dataframe:\n\n\n\n\n\n\n\n\nDisplay the names of columns:\n\n\n\n\n\n\n\n\nCreate a new column the base R way:\n\n\n\n\n\n\n\n\nCreate a new column with Tidyverse (without pipe):\n\n\n\n\n\n\n\n\nR has a super power as a functional programming language. It can use pipes (|&gt; and %&gt;%). Those allows to pass the result of an operation to the next operation and therfore chain multiple operations. It allows to have a more readable code, easier to write and more composable. You can use 2 kinds of pipes:\n\nmagrittr pipe (%&gt;%): Powerful (can do more than the next one), it needs to be installed through a package of the Tidyverse (magrittr, dplyr, rvest, …).\nBase (|&gt;): useful, do not need any libraries\n\nSince we will use the dplyr, we will use magrittr pipe (%&gt;%). No need to write it, simply use the following shortcut Ctrl+Maj+M or Cmd+Maj+M. With a few try, it comes naturally. As said before the pipe use is to pass values through operations. For instance consider the following example printing the value of the variable a:\n\n\n\n\n\n\n\n\nThey both give the same result. However the pipe version is longer. The strength of the secon approach appear when we need more than one operation. For instance, imagine converting a to an integer before printing it:\n\n\n\n\n\n\n\n\nThe first one still looks more concise, but it is in fact slower and harder to write. You have to start by the print() statement (the end) and go backward until the beginning which is counter-intuitive. While with the pipe approach you can consider %&gt;% as a “and”. Writting it looks like, “I start with the variable ‘a’ AND I convert it into an integer AND I print it”.\nThis method scale also really well. Lets take a more extreme example. With the following steps:\n\nTranslate “a” into an integer\nCompute the log10\nCompute the square root\nPrint it\n\n\n\n\n\n\n\n\n\nNote that in this code we can put expressions following a pipe in the next line for more readability. But the whole code is considered by R as only one line. So, you can run the code from whatever line and it will run the whole expression.\nIt is even more complicated with the normal way and less readable. While with pipe you can read it like sentences connected by “AND”. Generally, when operation start to stack, we desagreggate them into multiple steps like this:\n\n\n\n\n\n\n\n\nThis approach is more readable. The issue with this approach is that we have changed the value of a multiple time. But if we want to go back in a step, we need to re-run all the step before. It seems like nothing, but in a longer code and more complex, you can easily be overwhelmed and lost track of the state of your variable. You could improve that by storing new values in different variables:\n\n\n\n\n\n\n\n\nBut then we can create unecessary intermediate variables that have only no usage beside storing value that have no use in the rest of the code. Furthermore, both version are slower to write than the pipe version. Another advantage of the pipe function is that we can iteratively write the code and add and remove steps as needed. The when you are satisfied with the result, you can store it in a final variable:\n\n\n\n\n\n\n\n\nThe pipes in dplyr allows to manipulate data frames steps by steps in a readable manner. But function from the tidyverse bring another strength. They always return data frame, makin the iteratino even easier since you keep everything, so modifying a single column won’t stop you to do other manipulation with other columns in the same chain. Let’s take the earlier example from the df dataframe and compute the mean of Open and Close columns.\n\n\n\n\n\n\n\n\nThe last expression return a data frame and added the new column to the end. Again you are free to put the new result in a new object. Then you can select specific rows:\n\n\n\n\n\n\n\n\nWe can combine it with the previous operation to chain everything. The new dataset has a new column mean_value and is filterd to keep row when Close is bigger than Open:\n\n\n\n\n\n\n\n\nYou can display the summary statistic of a given variable using the summary() function.\n\n\n\n\n\n\n\n\nYou can do the same with the whole data frame:\n\n\n\n\n\n\n\n\nYou can also request specific statistics using the corresponding functions:\n\n\n\n\n\n\n\n\nChaining is useful when we need to answer a specific question without changing the data frame. For instance, you can find the date when Volume was highest:\n\n\n\n\n\n\n\n\nBut sometimes, it is faster to use base R for simple isolated operations. For instance, the Date column in df is note in the date format but in text format. We can change it in one line:\n\n\n\n\n\n\n\n\nIf you want to extract the specific value and not a data frame, you can use the pull() function instead of select():\n\n\n\n\n\n\n\n\nPlots are very easy in ggplot2 with qplot()! But there is another notation that is more used, the layered one:\n\n\n\n\n\n\n\n\nIt looks longer, but it is more flexible. It works like layers. Here is a short explanation of each part: - ggplot() initiate te figure - aes() map the column to different dimensions (x/y axis, color, line type, size, etc.) - geom_*() create a type of geometry - geom_line() create line using value from x and y\nThe aes() part is quite movable. You can decide to put it in a different place to update the graph:\n\n\n\n\n\n\n\n\nWe get the same result. The advantage of using such an approach is that we can really be flexible in the parameter that we are using and also the number of layer that we can create:\n\n\n\n\n\n\n\n\nJust by changing the geom, we can have a large variety of plots. For instance here is a boxplot:\n\n\n\n\n\n\n\n\nNote that the parameters are not compulsary as long as we keep theme in the righ order (x then y):\n\n\n\n\n\n\n\n\nKeeping the same structure, we can have different plots by changing the geom:\n\n\n\n\n\n\n\n\nggplot2 is a whole subject by itself and the Tidyverse ecosystem (dplyr, ggplot2, readr, …) is an even bigger topic. We won’t talk about it here, but in future tutorials."
  },
  {
    "objectID": "beginner.html",
    "href": "beginner.html",
    "title": "Beginner",
    "section": "",
    "text": "Beginner\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR Language Basics: 0\n\n\n\n\n\nExercises for absolute beginners O.o\n\n\n\n\n\nMar 1, 2025\n\n\nVestin Hategekimana\n\n\n\n\n\n\n\n\n\n\n\n\nR Language Basics: I\n\n\n\n\n\nFundamentals of R programming covering introductory concepts to data frames\n\n\n\n\n\nMar 12, 2025\n\n\nDavid Munoz Tord\n\n\n\n\n\n\n\n\n\n\n\n\nR Language Basics: II\n\n\n\n\n\nAdvanced R programming concepts covering functions, control structures, and data manipulation\n\n\n\n\n\nMar 20, 2025\n\n\nDavid Munoz Tord\n\n\n\n\n\n\n\n\n\n\n\n\nTidyverse: I\n\n\n\n\n\nLearn the tidyverse superpowers for data manipulation and transformation\n\n\n\n\n\nMay 5, 2025\n\n\nDavid Munoz Tord\n\n\n\n\n\n\n\n\n\n\n\n\nMethods Workshop in Quantitative Text Analysis Translated in R\n\n\n\n\n\n\n\n\n\n\n\nSep 3, 2025\n\n\nJisu Kim, Vestin Hategekimana (translator)\n\n\n\n\n\n\n\n\n\n\n\n\nMethods Workshop in Quantitative Text Analysis Translated in R - Day 1\n\n\n\n\n\nTutorial from the nccr on the move Workshop on quantitative text analysis\n\n\n\n\n\nSep 3, 2025\n\n\nJisu Kim, Vestin Hategekimana (translator)\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "intermediate/tidyverse-II/index.html",
    "href": "intermediate/tidyverse-II/index.html",
    "title": "Tidyverse II: Intermediate Data Wrangling",
    "section": "",
    "text": "Welcome to Tidyverse II! In this intermediate course, we’ll build upon your existing Tidyverse knowledge to tackle more complex data manipulation tasks. You’ll learn how to effectively combine, reshape, and clean diverse datasets, mastering techniques essential for real-world data analysis.\nWe will cover:\n\nRecap & Setup: A quick refresher on Tidyverse fundamentals and setting up our environment.\nJoins: Combining data from multiple tables.\nPivoting & Reshaping: Transforming data between wide and long formats.\nString Operations: Working with textual data using {stringr}.\nDate-Time Operations: Handling dates and times with {lubridate}. (Coming soon!)\nAdvanced Graphics: Taking {ggplot2} skills to the next level. (Coming soon!)\nFactor Operations: Managing categorical data with {forcats}. (Coming soon!)\nCapstone Project: Applying all learned skills to a comprehensive project. (Coming soon!)\n\nLet’s begin!"
  },
  {
    "objectID": "intermediate/tidyverse-II/index.html#course-overview",
    "href": "intermediate/tidyverse-II/index.html#course-overview",
    "title": "Tidyverse II: Intermediate Data Wrangling",
    "section": "",
    "text": "Welcome to Tidyverse II! In this intermediate course, we’ll build upon your existing Tidyverse knowledge to tackle more complex data manipulation tasks. You’ll learn how to effectively combine, reshape, and clean diverse datasets, mastering techniques essential for real-world data analysis.\nWe will cover:\n\nRecap & Setup: A quick refresher on Tidyverse fundamentals and setting up our environment.\nJoins: Combining data from multiple tables.\nPivoting & Reshaping: Transforming data between wide and long formats.\nString Operations: Working with textual data using {stringr}.\nDate-Time Operations: Handling dates and times with {lubridate}. (Coming soon!)\nAdvanced Graphics: Taking {ggplot2} skills to the next level. (Coming soon!)\nFactor Operations: Managing categorical data with {forcats}. (Coming soon!)\nCapstone Project: Applying all learned skills to a comprehensive project. (Coming soon!)\n\nLet’s begin!"
  },
  {
    "objectID": "intermediate/tidyverse-II/index.html#lesson-1-recap-setup",
    "href": "intermediate/tidyverse-II/index.html#lesson-1-recap-setup",
    "title": "Tidyverse II: Intermediate Data Wrangling",
    "section": "Lesson 1: Recap & Setup",
    "text": "Lesson 1: Recap & Setup\nBefore diving into new material, let’s briefly revisit the core principles of the Tidyverse and ensure our R environment is ready.\nThe Tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. Key packages include:\n\n{dplyr}: For data manipulation (filtering, arranging, selecting, mutating, summarizing).\n{ggplot2}: For creating elegant and informative data visualizations.\n{tidyr}: For tidying data (making it easy to work with).\n{readr}: For reading rectangular data files (like CSVs).\n{purrr}: For functional programming, enhancing your R toolkit.\n{tibble}: For modern, user-friendly data frames.\n{stringr}: For working with strings and regular expressions.\n{forcats}: For handling categorical variables (factors).\n\nA central concept is the pipe operator %&gt;% (or the base R pipe |&gt; from R 4.1+). It allows you to chain operations together in a readable and intuitive way, passing the result of one function as the first argument to the next.\nFor this course, we’ll primarily use RStudio or a similar R environment. Ensure you have the tidyverse package installed. If not, you can install it with install.packages(\"tidyverse\").\n\n# Load the entire tidyverse\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Example: Using the pipe with dplyr\n# Let's inspect the built-in starwars dataset\nstarwars_tibble &lt;- starwars %&gt;% as_tibble()\n\nstarwars_tibble %&gt;%\n  glimpse()\n\nRows: 87\nColumns: 14\n$ name       &lt;chr&gt; \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Darth Vader\", \"Leia Or…\n$ height     &lt;int&gt; 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 180, 2…\n$ mass       &lt;dbl&gt; 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0, 77.…\n$ hair_color &lt;chr&gt; \"blond\", NA, NA, \"none\", \"brown\", \"brown, grey\", \"brown\", N…\n$ skin_color &lt;chr&gt; \"fair\", \"gold\", \"white, blue\", \"white\", \"light\", \"light\", \"…\n$ eye_color  &lt;chr&gt; \"blue\", \"yellow\", \"red\", \"yellow\", \"brown\", \"blue\", \"blue\",…\n$ birth_year &lt;dbl&gt; 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 57.0, …\n$ sex        &lt;chr&gt; \"male\", \"none\", \"none\", \"male\", \"female\", \"male\", \"female\",…\n$ gender     &lt;chr&gt; \"masculine\", \"masculine\", \"masculine\", \"masculine\", \"femini…\n$ homeworld  &lt;chr&gt; \"Tatooine\", \"Tatooine\", \"Naboo\", \"Tatooine\", \"Alderaan\", \"T…\n$ species    &lt;chr&gt; \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Huma…\n$ films      &lt;list&gt; &lt;\"A New Hope\", \"The Empire Strikes Back\", \"Return of the J…\n$ vehicles   &lt;list&gt; &lt;\"Snowspeeder\", \"Imperial Speeder Bike\"&gt;, &lt;&gt;, &lt;&gt;, &lt;&gt;, \"Imp…\n$ starships  &lt;list&gt; &lt;\"X-wing\", \"Imperial shuttle\"&gt;, &lt;&gt;, &lt;&gt;, \"TIE Advanced x1\",…\n\n# A quick dplyr reminder:\n# Find all droids taller than 100cm\nstarwars_tibble %&gt;%\n  filter(species == \"Droid\" & height &gt; 100) %&gt;%\n  select(name, height, mass, homeworld) %&gt;%\n  arrange(desc(height))\n\n# A tibble: 2 × 4\n  name  height  mass homeworld\n  &lt;chr&gt;  &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;    \n1 IG-88    200   140 &lt;NA&gt;     \n2 C-3PO    167    75 Tatooine \n\n\nExercise 1.1: Quick Check\nFamiliarize yourself again with a built-in dataset. 1. Load the tidyverse package. 2. Convert the mtcars dataset to a tibble. 3. Use glimpse() to see its structure. 4. Use head() to view the first few rows. 5. How many cars have more than 4 cylinders and achieve more than 20 miles per gallon (mpg)?"
  },
  {
    "objectID": "intermediate/tidyverse-II/index.html#lesson-2-joins-part-i-ii",
    "href": "intermediate/tidyverse-II/index.html#lesson-2-joins-part-i-ii",
    "title": "Tidyverse II: Intermediate Data Wrangling",
    "section": "Lesson 2: Joins (Part I & II)",
    "text": "Lesson 2: Joins (Part I & II)\nOften, the data you need is spread across multiple tables. Joins are how we combine these tables based on common variables (keys).\n\nPart I: Stacking Tables\nSometimes, you don’t need to match rows based on keys, but rather stack tables on top of each other or side-by-side.\n\nbind_rows(...): Stacks multiple data frames vertically.\n\nIt matches columns by name.\nColumns that don’t exist in one of the tables will be filled with NA.\nYou can use the .id argument to create a new column indicating the original data frame for each row.\n\nbind_cols(...): Stacks multiple data frames horizontally.\n\nThis is less common for typical data analysis workflows because it requires the data frames to have the same number of rows and for those rows to correspond to each other (e.g., same observations in the same order).\nIf column names are duplicated, bind_cols() will automatically rename them.\n\n\nExample: bind_rows()\n\nsales_q1 &lt;- tribble(\n  ~product_id, ~units_sold, ~quarter,\n  \"A101\",      50,          \"Q1\",\n  \"B202\",      75,          \"Q1\"\n)\n\nsales_q2 &lt;- tribble(\n  ~product_id, ~units_sold, ~revenue, ~quarter,\n  \"A101\",      60,          1200,     \"Q2\",\n  \"C303\",      90,          1800,     \"Q2\"\n)\n\nall_sales &lt;- bind_rows(sales_q1, sales_q2, .id = \"source_table_id\")\nprint(all_sales)\n\n# A tibble: 4 × 5\n  source_table_id product_id units_sold quarter revenue\n  &lt;chr&gt;           &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt;\n1 1               A101               50 Q1           NA\n2 1               B202               75 Q1           NA\n3 2               A101               60 Q2         1200\n4 2               C303               90 Q2         1800\n\n\nNotice how revenue is NA for Q1 sales, and source_table_id tells us which original table the row came from.\nExercise 2.1: Stacking Sales Data\nYou have three tibbles representing sales data for different regions. Combine them into a single tibble.\n\n\n\n\n\n\n\n\n\n\nPart II: Relational (dplyr) Joins\nThese joins combine data frames based on matching values in specified “key” columns.\n\nKey Concepts:\n\nPrimary Key: A column (or set of columns) in a table that uniquely identifies each row.\nForeign Key: A column (or set of columns) in one table that refers to the primary key in another table.\nJoins work by matching foreign keys to primary keys.\n\nMutating Joins: Add columns from one table to another.\n\nleft_join(x, y, by = \"key_column\"): Keeps all rows from x and all columns from x and y. Rows in x with no match in y will have NA values in the new columns from y.\nright_join(x, y, by = \"key_column\"): Keeps all rows from y. Rows in y with no match in x will have NA values. (Less common, often you can achieve the same by swapping x and y in a left_join).\ninner_join(x, y, by = \"key_column\"): Keeps only rows from x that have a match in y.\nfull_join(x, y, by = \"key_column\"): Keeps all rows from both x and y. If there are no matches, NAs are inserted.\n\nFiltering Joins: Filter rows from one table based on whether they match in another, but do not add columns.\n\nsemi_join(x, y, by = \"key_column\"): Keeps all rows from x that have a match in y. Does not duplicate rows in x if there are multiple matches in y.\nanti_join(x, y, by = \"key_column\"): Keeps all rows from x that do not have a match in y. Useful for finding unmatched records.\n\n\nSpecifying Keys with by: * by = \"key_col\": If the key column has the same name in both tables. * by = c(\"key_col_x\" = \"key_col_y\"): If key columns have different names. * by = c(\"key1\", \"key2\"): For multiple key columns (composite key), all with same names. * by = join_by(col_x == col_y, another_x == another_y): A more flexible dplyr 1.1.0+ syntax for complex joins, including inequality or rolling joins (though we focus on equality here).\nExample: left_join and inner_join\n\npatients &lt;- tribble(\n  ~patient_id, ~name,\n  1,           \"Alice\",\n  2,           \"Bob\",\n  3,           \"Charlie\"\n)\n\nvisits &lt;- tribble(\n  ~visit_id, ~patient_id, ~visit_date,\n  101,       1,           \"2023-01-15\",\n  102,       2,           \"2023-01-20\",\n  103,       1,           \"2023-02-10\",\n  104,       4,           \"2023-02-15\" # Patient 4 not in patients table\n)\n\n# Left Join: Keep all patients, add visit info if available\npatients_left_visits &lt;- left_join(patients, visits, by = \"patient_id\")\nprint(\"Left Join (patients to visits):\")\n\n[1] \"Left Join (patients to visits):\"\n\nprint(patients_left_visits) # Charlie will have NAs for visit_id, visit_date\n\n# A tibble: 4 × 4\n  patient_id name    visit_id visit_date\n       &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;     \n1          1 Alice        101 2023-01-15\n2          1 Alice        103 2023-02-10\n3          2 Bob          102 2023-01-20\n4          3 Charlie       NA &lt;NA&gt;      \n\n# Inner Join: Keep only patients who had visits\npatients_inner_visits &lt;- inner_join(patients, visits, by = \"patient_id\")\nprint(\"Inner Join (patients to visits):\")\n\n[1] \"Inner Join (patients to visits):\"\n\nprint(patients_inner_visits) # Charlie and Patient 4 from visits are excluded\n\n# A tibble: 3 × 4\n  patient_id name  visit_id visit_date\n       &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;     \n1          1 Alice      101 2023-01-15\n2          1 Alice      103 2023-02-10\n3          2 Bob        102 2023-01-20\n\n# Anti Join: Which patients had no visits?\npatients_no_visits &lt;- anti_join(patients, visits, by = \"patient_id\")\nprint(\"Anti Join (patients with no visits):\")\n\n[1] \"Anti Join (patients with no visits):\"\n\nprint(patients_no_visits) # Should show Charlie\n\n# A tibble: 1 × 2\n  patient_id name   \n       &lt;dbl&gt; &lt;chr&gt;  \n1          3 Charlie\n\n# Semi Join: Which patients had at least one visit? (returns columns of patients only)\npatients_with_visits_semi &lt;- semi_join(patients, visits, by = \"patient_id\")\nprint(\"Semi Join (patients with visits):\")\n\n[1] \"Semi Join (patients with visits):\"\n\nprint(patients_with_visits_semi) # Should show Alice and Bob\n\n# A tibble: 2 × 2\n  patient_id name \n       &lt;dbl&gt; &lt;chr&gt;\n1          1 Alice\n2          2 Bob  \n\n\nExercise 2.2: Joining Orders and Customers\nYou have two tibbles: customers and orders. 1. Perform a left_join() to combine orders with customers data. Which orders don’t have customer information? 2. Perform an inner_join() to see only orders with valid customer information. 3. Use anti_join() to find customers who have not placed any orders."
  },
  {
    "objectID": "intermediate/tidyverse-II/index.html#lesson-3-pivoting-reshaping-data",
    "href": "intermediate/tidyverse-II/index.html#lesson-3-pivoting-reshaping-data",
    "title": "Tidyverse II: Intermediate Data Wrangling",
    "section": "Lesson 3: Pivoting & Reshaping Data",
    "text": "Lesson 3: Pivoting & Reshaping Data\nData often comes in formats that are not ideal for analysis or plotting. Pivoting is the process of changing the shape of your data by turning: * Wide data into long data (pivot_longer()): This is often needed when some column names are actually values of a variable. * Long data into wide data (pivot_wider()): This is useful for creating summary tables or when variables are stored in rows.\nThe goal is often to achieve “tidy data” where: 1. Each variable forms a column. 2. Each observation forms a row. 3. Each type of observational unit forms a table.\n\npivot_longer()\nUse pivot_longer() when you have data spread across multiple columns, and those column names themselves represent values of a variable.\nKey arguments: * data: The data frame to reshape. * cols: The columns to pivot (gather). You can use dplyr select helpers like starts_with(), ends_with(), everything(), c(col1, col2), etc. * names_to: A string specifying the name of the new column that will store the names of the pivoted columns. * values_to: A string specifying the name of the new column that will store the values from the pivoted columns. * names_prefix: (Optional) A string prefix to remove from the column names before they become values in the names_to column. * names_sep or names_pattern: (Optional) For more complex scenarios where column names encode multiple variables. * values_drop_na = TRUE: (Optional) To drop rows where the value in the values_to column is NA.\nExample: pivot_longer()\n\nwide_data &lt;- tribble(\n  ~student_id, ~test1_score, ~test2_score, ~test3_score,\n  \"S101\",      85,           90,           88,\n  \"S102\",      78,           82,           80,\n  \"S103\",      92,           88,           95\n)\nprint(\"Wide Data:\")\n\n[1] \"Wide Data:\"\n\nprint(wide_data)\n\n# A tibble: 3 × 4\n  student_id test1_score test2_score test3_score\n  &lt;chr&gt;            &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n1 S101                85          90          88\n2 S102                78          82          80\n3 S103                92          88          95\n\nlong_data &lt;- wide_data %&gt;%\n  pivot_longer(\n    cols = starts_with(\"test\"), # or c(test1_score, test2_score, test3_score)\n    names_to = \"test_name\",\n    values_to = \"score\",\n    names_prefix = \"test\" # removes \"test\" from \"test1_score\" -&gt; \"1_score\"\n    # A better approach for names_prefix or names_transform might be needed for cleaner test_name\n  )\n\n# For cleaner test names, we can use names_transform or further mutate\nlong_data_cleaner &lt;- wide_data %&gt;%\n  pivot_longer(\n    cols = -student_id, # pivot all columns except student_id\n    names_to = \"test_name_raw\",\n    values_to = \"score\"\n  ) %&gt;%\n  mutate(test_number = str_extract(test_name_raw, \"\\\\d+\")) %&gt;% # Extract number\n  select(student_id, test_number, score)\n\n\nprint(\"Long Data (Simpler):\")\n\n[1] \"Long Data (Simpler):\"\n\nlong_data_simple_names &lt;- wide_data %&gt;%\n  pivot_longer(cols = c(test1_score, test2_score, test3_score),\n               names_to = \"test_id\",\n               values_to = \"score\")\nprint(long_data_simple_names)\n\n# A tibble: 9 × 3\n  student_id test_id     score\n  &lt;chr&gt;      &lt;chr&gt;       &lt;dbl&gt;\n1 S101       test1_score    85\n2 S101       test2_score    90\n3 S101       test3_score    88\n4 S102       test1_score    78\n5 S102       test2_score    82\n6 S102       test3_score    80\n7 S103       test1_score    92\n8 S103       test2_score    88\n9 S103       test3_score    95\n\nprint(\"Long Data (using names_prefix):\")\n\n[1] \"Long Data (using names_prefix):\"\n\nlong_data_prefix &lt;- wide_data %&gt;%\n  pivot_longer(\n    cols = starts_with(\"test\"),\n    names_to = \"test_number_suffix\",\n    values_to = \"score\",\n    names_prefix = \"test\" # results in \"1_score\", \"2_score\" etc.\n  )\nprint(long_data_prefix)\n\n# A tibble: 9 × 3\n  student_id test_number_suffix score\n  &lt;chr&gt;      &lt;chr&gt;              &lt;dbl&gt;\n1 S101       1_score               85\n2 S101       2_score               90\n3 S101       3_score               88\n4 S102       1_score               78\n5 S102       2_score               82\n6 S102       3_score               80\n7 S103       1_score               92\n8 S103       2_score               88\n9 S103       3_score               95\n\nprint(\"Long Data (using names_pattern for more complex extraction):\")\n\n[1] \"Long Data (using names_pattern for more complex extraction):\"\n\n# If columns were like test_1_score, test_2_score\n# wide_data_complex_names &lt;- tribble(\n#   ~student_id, ~test_1_score, ~test_2_score,\n#   \"S101\",      85,           90,\n# )\n# long_data_pattern &lt;- wide_data_complex_names %&gt;%\n#   pivot_longer(\n#     cols = starts_with(\"test\"),\n#     names_to = c(\".value\", \"test_number\"), # .value takes part before _\n#     names_pattern = \"test_([0-9]+)_(.*)\", # Captures number and \"score\"\n#     # This is more advanced; for now, focus on simpler names_to/values_to\n#   )\n# print(long_data_pattern)\n\nExercise 3.1: Long Format for Lab Results\nYou have a tibble lab_results_wide where each row is a patient, and columns represent different lab tests taken on different days (e.g., glucose_day1, hgb_day1, glucose_day7, hgb_day7). Convert this to a long format with columns: patient_id, test_type, day, value.\n\n\n\n\n\n\n\n\n\n\npivot_wider()\nUse pivot_wider() when you have observations scattered across multiple rows, and you want to consolidate them into a wider format. This is the inverse of pivot_longer().\nKey arguments: * data: The data frame to reshape. * names_from: The column whose values will become new column names. * values_from: The column whose values will fill the new columns. * values_fill: (Optional) A value to use if a combination of id_cols and names_from doesn’t exist (to fill explicit NAs). * id_cols: (Optional) Columns that uniquely identify each observation unit, which will be kept as is. If not specified, all columns not used in names_from or values_from are used.\nExample: pivot_wider()\n\nlong_sensor_data &lt;- tribble(\n  ~timestamp,          ~sensor_id, ~metric, ~value,\n  \"2023-03-15 10:00:00\", \"SensorA\",  \"temp\",  25.5,\n  \"2023-03-15 10:00:00\", \"SensorA\",  \"humid\", 60.1,\n  \"2023-03-15 10:00:00\", \"SensorB\",  \"temp\",  26.1,\n  \"2023-03-15 10:00:00\", \"SensorB\",  \"humid\", 58.5,\n  \"2023-03-15 10:01:00\", \"SensorA\",  \"temp\",  25.6,\n  \"2023-03-15 10:01:00\", \"SensorA\",  \"humid\", 60.3\n)\nprint(\"Long Sensor Data:\")\n\n[1] \"Long Sensor Data:\"\n\nprint(long_sensor_data)\n\n# A tibble: 6 × 4\n  timestamp           sensor_id metric value\n  &lt;chr&gt;               &lt;chr&gt;     &lt;chr&gt;  &lt;dbl&gt;\n1 2023-03-15 10:00:00 SensorA   temp    25.5\n2 2023-03-15 10:00:00 SensorA   humid   60.1\n3 2023-03-15 10:00:00 SensorB   temp    26.1\n4 2023-03-15 10:00:00 SensorB   humid   58.5\n5 2023-03-15 10:01:00 SensorA   temp    25.6\n6 2023-03-15 10:01:00 SensorA   humid   60.3\n\nwide_sensor_data &lt;- long_sensor_data %&gt;%\n  pivot_wider(\n    id_cols = c(timestamp, sensor_id), # Columns to keep as identifiers for rows\n    names_from = metric,\n    values_from = value\n  )\nprint(\"Wide Sensor Data:\")\n\n[1] \"Wide Sensor Data:\"\n\nprint(wide_sensor_data)\n\n# A tibble: 3 × 4\n  timestamp           sensor_id  temp humid\n  &lt;chr&gt;               &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1 2023-03-15 10:00:00 SensorA    25.5  60.1\n2 2023-03-15 10:00:00 SensorB    26.1  58.5\n3 2023-03-15 10:01:00 SensorA    25.6  60.3\n\n\nExercise 3.2: Reconstruct Summary Table\nYou have long_summary_data with columns country, year, metric_name, value. Convert this to a wide format where each metric_name becomes a column."
  },
  {
    "objectID": "intermediate/tidyverse-II/index.html#lesson-4-string-operations-with-stringr",
    "href": "intermediate/tidyverse-II/index.html#lesson-4-string-operations-with-stringr",
    "title": "Tidyverse II: Intermediate Data Wrangling",
    "section": "Lesson 4: String Operations with {stringr}",
    "text": "Lesson 4: String Operations with {stringr}\nText data is ubiquitous. The {stringr} package provides a cohesive set of functions for common string manipulations, often wrapping base R string functions or those from the stringi package in a more consistent and pipe-friendly way. Most stringr functions start with str_.\n\nDetecting and Subsetting Patterns\n\nstr_detect(string, pattern): Detects the presence of a pattern in a string. Returns a logical vector.\n\npattern can be a literal string or a regular expression.\n\nstr_subset(string, pattern): Returns only the elements of string that match the pattern.\nstr_count(string, pattern): Counts the number of matches of pattern in each string.\n\nExample:\n\nfruit &lt;- c(\"apple\", \"banana\", \"pear\", \"pineapple\")\n\nstr_detect(fruit, \"a\")        # TRUE TRUE TRUE TRUE\n\n[1] TRUE TRUE TRUE TRUE\n\nstr_detect(fruit, \"^a\")       # TRUE FALSE FALSE FALSE (starts with 'a')\n\n[1]  TRUE FALSE FALSE FALSE\n\nstr_detect(fruit, \"a$\")       # FALSE TRUE FALSE FALSE (ends with 'a')\n\n[1] FALSE  TRUE FALSE FALSE\n\nstr_detect(fruit, \"[aeiou]\") # TRUE TRUE TRUE TRUE (contains any vowel)\n\n[1] TRUE TRUE TRUE TRUE\n\nstr_subset(fruit, \"apple\")    # \"apple\" \"pineapple\"\n\n[1] \"apple\"     \"pineapple\"\n\nstr_subset(fruit, \"^p\")       # \"pear\" \"pineapple\"\n\n[1] \"pear\"      \"pineapple\"\n\nstr_count(fruit, \"p\")         # 2 0 1 2\n\n[1] 2 0 1 3\n\nstr_count(fruit, \"[aeiou]\")   # 2 3 2 4\n\n[1] 2 3 2 4\n\n\n\n\nReplacing Patterns\n\nstr_replace(string, pattern, replacement): Replaces the first occurrence of pattern with replacement.\nstr_replace_all(string, pattern, replacement): Replaces all occurrences of pattern.\n\nYou can use a named vector for pattern and replacement to perform multiple replacements simultaneously.\n\nstr_remove(string, pattern): Shortcut for str_replace(string, pattern, \"\").\nstr_remove_all(string, pattern): Shortcut for str_replace_all(string, pattern, \"\").\n\nExample:\n\ntext_data &lt;- c(\"Color: Red\", \"Colour: Blue\", \"Color: Green\")\n\nstr_replace(text_data, \"Color\", \"Colour\") # Only first match in each string\n\n[1] \"Colour: Red\"   \"Colour: Blue\"  \"Colour: Green\"\n\nstr_replace_all(text_data, \"Colou?r\", \"Hue\") # Using regex ? for optional 'u'\n\n[1] \"Hue: Red\"   \"Hue: Blue\"  \"Hue: Green\"\n\nids &lt;- c(\"ID_123\", \"ID_456\", \"REF_789\")\nstr_remove_all(ids, \"ID_|_\") # \"123\" \"456\" \"REF789\"\n\n[1] \"123\"    \"456\"    \"REF789\"\n\nstr_remove_all(ids, \"ID_?|REF_?\") # \"123\" \"456\" \"789\" (more precise)\n\n[1] \"123\" \"456\" \"789\"\n\n\n\n\nSplitting Strings\n\nstr_split(string, pattern, n = Inf, simplify = FALSE): Splits strings into pieces based on pattern.\n\nReturns a list by default.\nIf simplify = TRUE, returns a character matrix (useful if pattern yields same number of pieces for each string).\n\nstr_split_fixed(string, pattern, n): A variation that always returns a character matrix, splitting into exactly n pieces. If fewer pieces are found, fills with \"\". If more, the n-th piece contains the rest of the string.\n\nExample:\n\nfilenames &lt;- c(\"report_2023_final.docx\", \"data_2022_raw.csv\", \"image.png\")\n\nstr_split(filenames, pattern = \"_\") # Returns a list\n\n[[1]]\n[1] \"report\"     \"2023\"       \"final.docx\"\n\n[[2]]\n[1] \"data\"    \"2022\"    \"raw.csv\"\n\n[[3]]\n[1] \"image.png\"\n\nstr_split(filenames, pattern = \"_\", n = 2, simplify = TRUE) # Matrix, splits at first \"_\"\n\n     [,1]        [,2]             \n[1,] \"report\"    \"2023_final.docx\"\n[2,] \"data\"      \"2022_raw.csv\"   \n[3,] \"image.png\" \"\"               \n\nstr_split_fixed(filenames, pattern = \"\\\\.\", n = 2) # Split at literal \".\"\n\n     [,1]                [,2]  \n[1,] \"report_2023_final\" \"docx\"\n[2,] \"data_2022_raw\"     \"csv\" \n[3,] \"image\"             \"png\" \n\n\n\n\nWhitespace and Case\n\nstr_trim(string, side = \"both\"): Removes leading and/or trailing whitespace. side can be “left”, “right”, or “both”.\nstr_squish(string): Removes all excess whitespace: leading/trailing, and reduces internal consecutive whitespace to a single space.\nstr_to_lower(string), str_to_upper(string), str_to_title(string): Convert case.\n\nExample:\n\nmessy_text &lt;- \"  Hello   World!  \"\nstr_trim(messy_text)    # \"Hello   World!\"\n\n[1] \"Hello   World!\"\n\nstr_squish(messy_text)  # \"Hello World!\"\n\n[1] \"Hello World!\"\n\nstr_to_upper(\"Hello World\") # \"HELLO WORLD\"\n\n[1] \"HELLO WORLD\"\n\n\n\n\nA Brief Note on Regular Expressions (Regex)\nMany stringr functions accept regular expressions for pattern. Regex is a powerful mini-language for describing text patterns. * .: Matches any single character (except newline). * ^: Matches the start of the string. * $: Matches the end of the string. * *: Matches the preceding item 0 or more times. * +: Matches the preceding item 1 or more times. * ?: Matches the preceding item 0 or 1 time (optional). * \\\\d: Matches a digit. \\\\D matches non-digit. * \\\\s: Matches whitespace. \\\\S matches non-whitespace. * [abc]: Matches ‘a’, ‘b’, or ‘c’. * [^abc]: Matches any character except ‘a’, ‘b’, or ‘c’. * (pattern): Groups a pattern. Useful for str_extract or backreferences. * \\\\: Escape special characters (e.g., \\\\. to match a literal dot).\nLearning regex takes time but is incredibly useful for complex text processing.\nExercise 4.1: Clean Up Product Descriptions\nYou have a tibble with a product_desc column containing messy descriptions. 1. Convert all descriptions to lowercase. 2. Remove any leading/trailing whitespace. 3. Replace multiple internal spaces with a single space. 4. Remove all punctuation (e.g., !, ., ,).\n\n\n\n\n\n\n\n\nExercise 4.2: Extract Information from Log Entries\nYou have log entries like \"INFO:2023-03-15:User_JohnDoe:Logged_In\". Extract the date, user_id, and action into separate columns."
  },
  {
    "objectID": "intermediate/tidyverse-II/index.html#lesson-5-date-time-operations-with-lubridate",
    "href": "intermediate/tidyverse-II/index.html#lesson-5-date-time-operations-with-lubridate",
    "title": "Tidyverse II: Intermediate Data Wrangling",
    "section": "Lesson 5: Date-Time Operations with {lubridate}",
    "text": "Lesson 5: Date-Time Operations with {lubridate}\nWorking with dates and times can be notoriously tricky. The {lubridate} package, part of the Tidyverse, makes it significantly easier by providing intuitive functions to parse, manipulate, and compute with date-time objects.\nKey features of {lubridate}: * Easy Parsing: Functions like ymd(), mdy(), dmy(), ymd_hms() can automatically parse dates and times from strings in various formats. * Accessing Components: Functions like year(), month(), day(), hour(), minute(), second(), wday() (day of the week), yday() (day of the year) allow easy extraction of specific components. * Time Spans: {lubridate} defines three types of time spans: * Durations: Exact number of seconds (e.g., dseconds(), dminutes(), ddays()). * Periods: Human-readable units that account for irregularities like leap years and daylight saving (e.g., seconds(), minutes(), days(), months(), years()). * Intervals: A time span between two specific date-times. * Arithmetic: Perform arithmetic directly on date-times (e.g., adding days, finding differences).\nExample: Parsing and Components\n\nlibrary(lubridate)\n\ndate_string1 &lt;- \"2024-07-15\"\ndate_string2 &lt;- \"July 15, 2024 14:30:00\"\ndate_string3 &lt;- \"15/07/2024\"\n\ndt1 &lt;- ymd(date_string1)\ndt2 &lt;- mdy_hms(date_string2)\ndt3 &lt;- dmy(date_string3)\n\nprint(dt1)\n\n[1] \"2024-07-15\"\n\nprint(dt2)\n\n[1] \"2024-07-15 14:30:00 UTC\"\n\nprint(dt3)\n\n[1] \"2024-07-15\"\n\npaste(\"Year:\", year(dt1))\n\n[1] \"Year: 2024\"\n\npaste(\"Month:\", month(dt1, label = TRUE, abbr = FALSE)) # Full month name\n\n[1] \"Month: July\"\n\npaste(\"Day of week:\", wday(dt1, label = TRUE, abbr = FALSE)) # Full day name\n\n[1] \"Day of week: Monday\"\n\npaste(\"Hour of dt2:\", hour(dt2))\n\n[1] \"Hour of dt2: 14\"\n\n\nExample: Time Spans and Arithmetic\n\nstart_date &lt;- ymd(\"2024-01-01\")\nend_date &lt;- ymd(\"2025-03-15\")\n\n# Add 10 days to start_date\nstart_date + ddays(10)\n\n[1] \"2024-01-11\"\n\nstart_date + days(10) # Period, often same for days\n\n[1] \"2024-01-11\"\n\n# Add 2 months\nstart_date + months(2)\n\n[1] \"2024-03-01\"\n\n# Difference between dates\ntime_difference_days &lt;- end_date - start_date # Returns a difftime object\nprint(time_difference_days)\n\nTime difference of 439 days\n\n# Create a duration\none_week_duration &lt;- dweeks(1)\nprint(one_week_duration)\n\n[1] \"604800s (~1 weeks)\"\n\n# Create a period\none_month_period &lt;- months(1)\nprint(one_month_period)\n\n[1] \"1m 0d 0H 0M 0S\"\n\n# Interval\nevent_interval &lt;- interval(start_date, end_date)\nprint(event_interval)\n\n[1] 2024-01-01 UTC--2025-03-15 UTC\n\n# Check if a date is within an interval\nymd(\"2024-06-01\") %within% event_interval # TRUE\n\n[1] TRUE\n\n\nExercise 5.1: Analyzing Event Durations\nYou have a tibble of project tasks with start and end dates. 1. Parse the start_date and end_date strings into date objects. 2. Calculate the duration of each task in days. 3. Extract the year and month the task started. 4. Determine which day of the week each task ended. 5. Filter for tasks that lasted longer than 30 days.\n\n\n\n\n\n\n\n\nExercise 5.2: Scheduling Appointments\nYou have a list of appointment requests with a preferred date and time. 1. Parse preferred_datetime_str into a datetime object. Assume UTC for simplicity if no timezone is given, or parse with a specific timezone. 2. If an appointment is requested before 9 AM or after 5 PM (17:00), flag it as “AfterHours”. 3. Calculate the time until each appointment from a reference datetime (e.g., now(), or a fixed datetime for reproducibility). 4. Round appointment times to the nearest half hour."
  },
  {
    "objectID": "intermediate/tidyverse-II/index.html#lesson-6-graphics-i-ggplot2-essentials",
    "href": "intermediate/tidyverse-II/index.html#lesson-6-graphics-i-ggplot2-essentials",
    "title": "Tidyverse II: Intermediate Data Wrangling",
    "section": "Lesson 6: Graphics I ({ggplot2} Essentials)",
    "text": "Lesson 6: Graphics I ({ggplot2} Essentials)\nThe {ggplot2} package, created by Hadley Wickham, is a powerful and versatile system for creating static graphics in R. It’s based on the “Grammar of Graphics,” which allows you to build plots layer by layer.\nCore components of a ggplot: 1. Data: The dataset being plotted (must be a data frame or tibble). 2. Aesthetic Mappings (aes()): How variables in your data map to visual properties (aesthetics) of the plot. Examples: x, y, color, shape, size, fill, alpha. 3. Geoms (geom_...()): Geometric objects that represent your data. Examples: geom_point(), geom_line(), geom_bar(), geom_histogram(), geom_boxplot(), geom_sf(). 4. Scales (scale_...()): Control how data values are mapped to aesthetic values (e.g., color gradients, axis limits, breaks, labels). 5. Facets (facet_...()): Create small multiples (subplots) based on levels of a categorical variable (e.g., facet_wrap(), facet_grid()). 6. Coordinates (coord_...()): Control the coordinate system (e.g., coord_flip() to swap x/y, coord_polar()). 7. Themes (theme_...()): Control the overall appearance of the plot (non-data elements like background, gridlines, fonts).\nBasic Plot Structure:\n# ggplot(data = &lt;DATA&gt;) +\n#   &lt;GEOM_FUNCTION&gt;(mapping = aes(&lt;MAPPINGS&gt;))\nExample: Scatter Plot\n\nlibrary(ggplot2)\ndata(mpg) # Using the built-in mpg dataset\n\n# Scatter plot of engine displacement (displ) vs. highway mpg (hwy)\n# Colored by car class\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) +\n  geom_point() +\n  labs(\n    title = \"Engine Displacement vs. Highway MPG\",\n    x = \"Engine Displacement (Liters)\",\n    y = \"Highway Miles Per Gallon\",\n    color = \"Car Class\",\n    caption = \"Source: mpg dataset\"\n  ) +\n  theme_minimal() # Apply a minimal theme\n\n\n\n\n\n\n\n\nExample: Bar Plot Bar plots can represent counts or pre-summarized values.\n\n# Bar plot of car counts by manufacturer\nggplot(data = mpg, mapping = aes(x = manufacturer)) +\n  geom_bar(fill = \"steelblue\", color = \"black\") + # Counts are calculated by geom_bar\n  labs(title = \"Number of Car Models by Manufacturer\", x = \"Manufacturer\", y = \"Count\") +\n  theme_light() +\n  coord_flip() # Flip coordinates to make manufacturer names readable\n\n\n\n\n\n\n\n# If data is already summarized:\nmanufacturer_summary &lt;- mpg %&gt;% count(manufacturer, name = \"count\")\nggplot(data = manufacturer_summary, mapping = aes(x = manufacturer, y = count)) +\n  geom_col(fill = \"darkgreen\", color = \"black\") + # Use geom_col for pre-summarized data\n  labs(title = \"Number of Car Models by Manufacturer (Pre-summarized)\", x = \"Manufacturer\", y = \"Count\") +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x-axis labels\n\n\n\n\n\n\n\n\nExercise 6.1: Exploring Fuel Efficiency\nUsing the mpg dataset: 1. Create a scatter plot showing city miles per gallon (cty) vs. highway miles per gallon (hwy). 2. Color the points by drv (drive train: f=front, r=rear, 4=4wd). 3. Add a title and appropriate axis labels. 4. Experiment with geom_smooth(method = \"lm\") to add a linear regression line for each drv group.\n\n\n\n\n\n\n\n\nExercise 6.2: Distribution of Highway MPG\n\nCreate a histogram of highway miles per gallon (hwy).\nUse facet_wrap(~ class) to create separate histograms for each car class.\nCustomize the bin width or number of bins for the histogram.\nAdd a vertical line representing the mean hwy for each class."
  },
  {
    "objectID": "intermediate/tidyverse-II/index.html#lesson-7-graphics-ii-advanced-ggplot2",
    "href": "intermediate/tidyverse-II/index.html#lesson-7-graphics-ii-advanced-ggplot2",
    "title": "Tidyverse II: Intermediate Data Wrangling",
    "section": "Lesson 7: Graphics II (Advanced {ggplot2})",
    "text": "Lesson 7: Graphics II (Advanced {ggplot2})\nBuilding on the essentials, we can further customize and enhance our {ggplot2} visualizations.\n\nScales\nScales control the mapping from data values to aesthetics. You can customize axes, colors, sizes, etc. * Position Scales (x and y axes): scale_x_continuous(), scale_y_continuous(), scale_x_discrete(), scale_y_discrete(), scale_x_log10(), scale_x_date(). * Control limits, breaks, labels. * Color and Fill Scales: scale_color_brewer(), scale_fill_brewer() (for discrete variables using ColorBrewer palettes), scale_color_gradient(), scale_fill_gradient() (for continuous variables), scale_color_manual(), scale_fill_manual() (for specifying colors manually). * Shape and Size Scales: scale_shape_manual(), scale_size_continuous().\nExample: Customizing Scales\n\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = cty)) +\n  geom_point(size = 3) +\n  scale_x_continuous(\n    name = \"Engine Displacement (Liters)\",\n    breaks = seq(1, 7, by = 1),\n    limits = c(1, 7)\n  ) +\n  scale_y_continuous(\n    name = \"Highway MPG\",\n    labels = scales::label_comma() # Use comma for thousands, etc.\n  ) +\n  scale_color_gradient(low = \"blue\", high = \"red\", name = \"City MPG\") +\n  labs(title = \"Customized Scales Example\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nThemes\nThemes control the non-data elements of the plot. * Built-in Themes: theme_gray() (default), theme_bw(), theme_minimal(), theme_classic(), theme_light(), theme_dark(), theme_void(). * Customizing Theme Elements: Use theme() to modify specific elements like plot.title, axis.text, axis.title, legend.position, panel.background, panel.grid.\nExample: Custom Theme\n\nggplot(data = mpg, mapping = aes(x = class, fill = drv)) +\n  geom_bar(position = \"dodge\") +\n  labs(title = \"Car Count by Class and Drive Train\", x = \"Class\", y = \"Count\", fill = \"Drive Train\") +\n  theme_classic() + # Start with a classic theme\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\"),\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),\n    axis.title = element_text(size = 12),\n    legend.position = \"top\", # \"bottom\", \"left\", \"right\", \"none\", or c(x,y) coordinates\n    panel.grid.major.y = element_line(color = \"grey80\", linetype = \"dashed\"),\n    panel.background = element_rect(fill = \"aliceblue\")\n  )\n\n\n\n\n\n\n\n\n\n\nAnnotations and Saving Plots\n\nAnnotations: Add text (geom_text(), annotate(\"text\", ...)), lines (geom_hline(), geom_vline()), rectangles (annotate(\"rect\", ...)).\nSaving Plots: Use ggsave() to save plots to files (e.g., PNG, PDF, SVG). It infers the type from the extension.\n\nExample: Annotations and Saving\n\n# This plot won't render in the QMD output directly if ggsave is used without printing the plot\n# For demonstration, we'll build it and then mention ggsave.\n\np &lt;- ggplot(data = filter(mpg, manufacturer == \"audi\"), aes(x = year, y = hwy)) +\n  geom_jitter(width = 0.1, height = 0, alpha = 0.7, color = \"darkblue\") +\n  geom_smooth(method = \"loess\", color = \"red\", se = FALSE) +\n  annotate(\n    \"text\", x = 2004, y = 30,\n    label = \"Trend for Audi Highway MPG\",\n    color = \"darkred\", fontface = \"italic\"\n  ) +\n  labs(title = \"Audi Highway MPG Over Years\", x = \"Year\", y = \"Highway MPG\") +\n  theme_bw()\n\nprint(p) # Display the plot\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: pseudoinverse used at 1999\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: neighborhood radius 9.045\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: reciprocal condition number 0\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: There are other near singularities as well. 81.812\n\n\n\n\n\n\n\n\n# To save:\n# ggsave(\"audi_mpg_plot.png\", plot = p, width = 8, height = 6, dpi = 300)\n\nExercise 7.1: Polished Boxplot of MPG\nUsing the mpg dataset: 1. Create a boxplot of hwy (highway MPG) grouped by class. 2. Fill the boxes based on drv (drive train). Use position = position_dodge(preserve = \"single\") if boxes overlap too much. 3. Customize the color palette for drv using scale_fill_brewer(palette = \"Set2\"). 4. Add a title: “Highway MPG Distribution by Class and Drive Train”. 5. Modify"
  }
]