[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "WeData’s ultimate exercises",
    "section": "",
    "text": "The aim of this website is to be a compendium of knowledge on R made by members of the WeData association. It should serve both as a reference for knowledge, and as an exercise interface. We hope to highlight some important themes in this book.\n\n\n\n\nIt is free\nData analysis and statics ecosystem\nBeautiful visualization capabilities\nAmazing reporting tools\nWeb application development\nVibrant and nice community\nWidely used in research\nKey tools in specific sectors\n\n\n\n\nWhy this website? To complete existing resources with exercises. In fact, there are already numerous free or paid resources on R scattered on the internet. The main concern is not about knowing if a resource exists but about finding it. Rarely do collaborative projects try to bring together various R resources in the form of a book or website. Here are some notable examples I know of (there are probably more):\n\nThe big book of R\nBookdown\nPyofile (R and Python books)\n\nIt is amusing to find excellent resources hidden in Rmarkdown and Quarto galleries. We believe that despite the dissemination of resources, the community is doing a fantastic job trying to consolidate them, and I strongly encourage anyone interested in contributing to this effort to feed the sources mentioned earlier. However, another problem remains: there is a glaring lack of exercises and interactive resources. It’s important to note that there are platforms for doing R exercises online to some degree of interactivity. Notable cases include Exercism, Codewars and W3school (for a more comprehensive list, check our blog post). There is also the learnr package, which allows creating interactive R exercises using Rmarkdown. The system is great (at least locally), but when it comes to putting exercises online for use without installing R, it requires an active server, adding more work and concerns, particularly regarding hosting and managing a large number of requests. Our goal would be to create an exercise platform that does not require running R on a server. Is this possible? The answer is yes!\n\nThe advancements in web technologies over the past few years have given us hope to create online interactive exercise platforms without a server, and it was only recently that the idea of reusing a system like learnr within webr (the Quarto extension) surfaced. These developments are very encouraging and have inspired the creation of this platform.\n\nOur association is made up of passionate individuals with varying levels, goals, and interests. But I believe we can create an interactive resource that allows curious people to train. The objective will be to create exercise series and recommend existing resources to help users complete the exercises.\n\nThis is new territory for me, and I don’t know if it will work. Perhaps I’m missing essential elements, or web pages might be unbelievably slow or inefficient. But I believe it’s worth a try!\n\n\n\nAs we said earlier, thanks to webr, it’s now possible to use R in the browser without the need for a server (a computer that’s always running). To be more precise, R is translated into WebAssembly, which runs in the browser. All thanks to webr. If you don’t believe me, you can try R in the browser here. Or you can test it just below using the code or writting yours:\n\nplot(cars)\n\nMagic! You can use it without an R, even on your cell phone!\nQuarto’s strength lies in its ability to integrate it so seamlessly into its ecosystem. This has enabled the same webr authors to create the quarto-live extension, which adds the elements needed to create online exercises. So we can easily create interactive online exercises simply by hosting our website on a GitHub repository, with no real performance problems.\nWe can thank quarto-live for this feat. Here is an example of an exercise suggested in the documentation:\nFilter the starwars dataset so that only the droid characters are included.\n\n#| setup: true\n#| exercise: ex_3\nlibrary(dplyr)\n\n\n#| exercise: ex_3\nstarwars |&gt; ______\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nConsider using the filter() function from dplyr.\nstarwars |&gt; filter(______)\n\n\n\n\n\n\n\n\n\n\n\nHint 2\n\n\n\n\n\nYou should filter the dataset using the species column.\nstarwars |&gt; filter(species == ______)\n\n\n\n\n\nSolution. \n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\nUse the filter() function from dplyr:\n1starwars |&gt;\n2    filter(species == \"Droid\")\n\n1\n\nTake the starwars dataset, and then,\n\n2\n\nFilter for the “Droid” species.\n\n\n\n\n\n\nFantastic! This allows you to have the capabilities of {learnr} without the need to install R or have a server to hold it all together. Note that quarto-live is still in its infancy and will probably improve over time."
  },
  {
    "objectID": "index.html#exercice-example-from-quarto-live",
    "href": "index.html#exercice-example-from-quarto-live",
    "title": "WeData’s ultimate exercises",
    "section": "",
    "text": "As we said earlier, thanks to webr, it’s now possible to use R in the browser without the need for a server (a computer that’s always running). To be more precise, R is translated into WebAssembly, which runs in the browser. All thanks to webr. If you don’t believe me, you can try R in the browser here. Or you can test it just below using the code or writting yours:\n\nplot(cars)\n\nMagic! You can use it without an R, even on your cell phone!\nQuarto’s strength lies in its ability to integrate it so seamlessly into its ecosystem. This has enabled the same webr authors to create the quarto-live extension, which adds the elements needed to create online exercises. So we can easily create interactive online exercises simply by hosting our website on a GitHub repository, with no real performance problems.\nWe can thank quarto-live for this feat. Here is an example of an exercise suggested in the documentation:\nFilter the starwars dataset so that only the droid characters are included.\n\n#| setup: true\n#| exercise: ex_3\nlibrary(dplyr)\n\n\n#| exercise: ex_3\nstarwars |&gt; ______\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nConsider using the filter() function from dplyr.\nstarwars |&gt; filter(______)\n\n\n\n\n\n\n\n\n\n\n\nHint 2\n\n\n\n\n\nYou should filter the dataset using the species column.\nstarwars |&gt; filter(species == ______)\n\n\n\n\n\nSolution. \n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\nUse the filter() function from dplyr:\n1starwars |&gt;\n2    filter(species == \"Droid\")\n\n1\n\nTake the starwars dataset, and then,\n\n2\n\nFilter for the “Droid” species.\n\n\n\n\n\n\nFantastic! This allows you to have the capabilities of {learnr} without the need to install R or have a server to hold it all together. Note that quarto-live is still in its infancy and will probably improve over time."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "intermediate.html",
    "href": "intermediate.html",
    "title": "Intermediate",
    "section": "",
    "text": "Intermediate\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "advanced.html",
    "href": "advanced.html",
    "title": "Advanced",
    "section": "",
    "text": "Advanced\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "beginner.html",
    "href": "beginner.html",
    "title": "Beginner",
    "section": "",
    "text": "Beginner\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethods Workshop in Quantitative Text Analysis Translated in R - Day 1\n\n\n\n\n\nTutorial from the nccr on the move Workshop on quantitative text analysis\n\n\n\n\n\nSep 3, 2025\n\n\nJisu Kim, Vestin Hategekimana (translator)\n\n\n\n\n\n\n\n\n\n\n\n\n1. Basic R\n\n\n\n\n\nExercises for absolute beginners O.o\n\n\n\n\n\nVestin Hategekimana\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "beginner/Basics.html",
    "href": "beginner/Basics.html",
    "title": "1. Basic R",
    "section": "",
    "text": "Calculate the sum of 15 and 30.\nSolution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the + operator to add two numbers like a machine calculator.\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n15 + 30"
  },
  {
    "objectID": "beginner/Basics.html#exercise-1-basic-arithmetic",
    "href": "beginner/Basics.html#exercise-1-basic-arithmetic",
    "title": "1. Basic R",
    "section": "",
    "text": "Calculate the sum of 15 and 30.\nSolution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the + operator to add two numbers like a machine calculator.\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n15 + 30"
  },
  {
    "objectID": "beginner/Basics.html#exercise-2-variable-assignment",
    "href": "beginner/Basics.html#exercise-2-variable-assignment",
    "title": "1. Basic R",
    "section": "Exercise 2: Variable Assignment",
    "text": "Exercise 2: Variable Assignment\nAssign the value 100 to a variable named my_variable and print it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the &lt;- (or =) operator to assign a value to a variable.\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Assign value to a variable\nmy_variable &lt;- 100\n\n# or\nmy_variable = 100\n\n# Print the variable\nmy_variable"
  },
  {
    "objectID": "beginner/Basics.html#exercise-3-creating-a-vector",
    "href": "beginner/Basics.html#exercise-3-creating-a-vector",
    "title": "1. Basic R",
    "section": "Exercise 3: Creating a Vector",
    "text": "Exercise 3: Creating a Vector\nCreate a vector named my_vector containing the numbers 1, 2, 3, 4, and 5.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the c() function to create a vector.\n\n\n\n\n\n\n\n\n\n\n\nTips\n\n\n\n\n\nAlternatively use the : function to create a vector.\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Create a vector\nc(1, 2, 3, 4, 5)\n\n# or\n1:5"
  },
  {
    "objectID": "beginner/Basics.html#exercise-4-basic-function-usage",
    "href": "beginner/Basics.html#exercise-4-basic-function-usage",
    "title": "1. Basic R",
    "section": "Exercise 4: Basic Function Usage",
    "text": "Exercise 4: Basic Function Usage\nFind the mean of the numbers 10, 20, 30, 40, and 50.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the mean() function to calculate the average of a set of numbers.\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Calculate the mean\nnumbers &lt;- c(10, 20, 30, 40, 50)\nmean(numbers)"
  },
  {
    "objectID": "beginner/Basics.html#exercise-5-conditional-statement",
    "href": "beginner/Basics.html#exercise-5-conditional-statement",
    "title": "1. Basic R",
    "section": "Exercise 5: Conditional Statement",
    "text": "Exercise 5: Conditional Statement\nWrite a conditional statement that checks if a number x is greater than 10. If it is, print “Greater than 10”; otherwise, print “10 or less”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse an if statement to perform a conditional check.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nSolution:\nx &lt;- 12\n\n# Conditional statement\nif (x &gt; 10) {\n  print(\"Greater than 10\")\n} else {\n  print(\"10 or less\")\n}"
  },
  {
    "objectID": "contribute.html",
    "href": "contribute.html",
    "title": "How to contribute?",
    "section": "",
    "text": "This is the project of WeData, an association dedicated to the promotion of data science and computer science. We wanted a way of sharing exercises that was as simple, independent and free as possible for as many people as possible. Thanks to the arrival of webr and quarto-live, this was possible!\nNote: quarto-live is still in early stage and further improvement are comming."
  },
  {
    "objectID": "contribute.html#all-contributions-are-welcome",
    "href": "contribute.html#all-contributions-are-welcome",
    "title": "How to contribute?",
    "section": "All contributions are welcome!",
    "text": "All contributions are welcome!\nThis site is based on collaboration and aims to enable anyone wishing to help create interactive exercises to do so. Here are the steps if you want to help build this website by creating exercises:\n\n1. Clone the repository\nGo to the website GitHub repository. After cloning it, your are good to go!\n\n\n2. Create your tutorial\nIn the folder corresponding to the exercises level (currently beginner, intermediate and advanced), create a folder with the name you want. INside it create your quarto file (.qmd) or markdown file (.md) and add at least the following information to your YAML (begining of the file):\n---\n1title: My exercises set\n2author: Me\n3date: \"2024-08-11\"\n4categories:\n  - Category 1\n  - ...\n5image: image.png\n---\n\n1\n\nCompulsary\n\n2\n\nCompulsary\n\n3\n\nCompulsary\n\n4\n\nOptional\n\n5\n\nOptional, but if added it is better to put everything inside a folder\n\n\nThen for quarto file you need to add the following code at the begining after the YAML but before anything in the file:\n{{&lt; include ../../_extensions/r-wasm/live/_knitr.qmd &gt;}}\n\n\n3. Write your tutorial\nYou can follow the tutorials from the official quarto-live website. Pay particular attention to the following chapters (at least the first one):\nFrom the “Exercises Grading” part: - Creating Exercises - Managing Environements - Grading Solutions - Gradin with {gradethis}\n\n\n4. Send your exercises\nPush your changes if your are a contributer or do a pull requests otherwise."
  },
  {
    "objectID": "index.html#goal-of-this-website",
    "href": "index.html#goal-of-this-website",
    "title": "WeData’s ultimate exercises",
    "section": "",
    "text": "The aim of this website is to be a compendium of knowledge on R made by members of the WeData association. It should serve both as a reference for knowledge, and as an exercise interface. We hope to highlight some important themes in this book."
  },
  {
    "objectID": "index.html#why-r",
    "href": "index.html#why-r",
    "title": "WeData’s ultimate exercises",
    "section": "",
    "text": "It is free\nData analysis and statics ecosystem\nBeautiful visualization capabilities\nAmazing reporting tools\nWeb application development\nVibrant and nice community\nWidely used in research\nKey tools in specific sectors"
  },
  {
    "objectID": "index.html#why-this-website",
    "href": "index.html#why-this-website",
    "title": "WeData’s ultimate exercises",
    "section": "",
    "text": "Why this website? To complete existing resources with exercises. In fact, there are already numerous free or paid resources on R scattered on the internet. The main concern is not about knowing if a resource exists but about finding it. Rarely do collaborative projects try to bring together various R resources in the form of a book or website. Here are some notable examples I know of (there are probably more):\n\nThe big book of R\nBookdown\nPyofile (R and Python books)\n\nIt is amusing to find excellent resources hidden in Rmarkdown and Quarto galleries. We believe that despite the dissemination of resources, the community is doing a fantastic job trying to consolidate them, and I strongly encourage anyone interested in contributing to this effort to feed the sources mentioned earlier. However, another problem remains: there is a glaring lack of exercises and interactive resources. It’s important to note that there are platforms for doing R exercises online to some degree of interactivity. Notable cases include Exercism, Codewars and W3school (for a more comprehensive list, check our blog post). There is also the learnr package, which allows creating interactive R exercises using Rmarkdown. The system is great (at least locally), but when it comes to putting exercises online for use without installing R, it requires an active server, adding more work and concerns, particularly regarding hosting and managing a large number of requests. Our goal would be to create an exercise platform that does not require running R on a server. Is this possible? The answer is yes!\n\nThe advancements in web technologies over the past few years have given us hope to create online interactive exercise platforms without a server, and it was only recently that the idea of reusing a system like learnr within webr (the Quarto extension) surfaced. These developments are very encouraging and have inspired the creation of this platform.\n\nOur association is made up of passionate individuals with varying levels, goals, and interests. But I believe we can create an interactive resource that allows curious people to train. The objective will be to create exercise series and recommend existing resources to help users complete the exercises.\n\nThis is new territory for me, and I don’t know if it will work. Perhaps I’m missing essential elements, or web pages might be unbelievably slow or inefficient. But I believe it’s worth a try!"
  },
  {
    "objectID": "beginner/basics/basics.html",
    "href": "beginner/basics/basics.html",
    "title": "1. Basic R",
    "section": "",
    "text": "Calculate the sum of 15 and 30.\nSolution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the + operator to add two numbers like a machine calculator.\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n15 + 30"
  },
  {
    "objectID": "beginner/basics/basics.html#exercise-1-basic-arithmetic",
    "href": "beginner/basics/basics.html#exercise-1-basic-arithmetic",
    "title": "1. Basic R",
    "section": "",
    "text": "Calculate the sum of 15 and 30.\nSolution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the + operator to add two numbers like a machine calculator.\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n15 + 30"
  },
  {
    "objectID": "beginner/basics/basics.html#exercise-2-variable-assignment",
    "href": "beginner/basics/basics.html#exercise-2-variable-assignment",
    "title": "1. Basic R",
    "section": "Exercise 2: Variable Assignment",
    "text": "Exercise 2: Variable Assignment\nAssign the value 100 to a variable named my_variable and print it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the &lt;- (or =) operator to assign a value to a variable.\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Assign value to a variable\nmy_variable &lt;- 100\n\n# or\nmy_variable = 100\n\n# Print the variable\nmy_variable"
  },
  {
    "objectID": "beginner/basics/basics.html#exercise-3-creating-a-vector",
    "href": "beginner/basics/basics.html#exercise-3-creating-a-vector",
    "title": "1. Basic R",
    "section": "Exercise 3: Creating a Vector",
    "text": "Exercise 3: Creating a Vector\nCreate a vector named my_vector containing the numbers 1, 2, 3, 4, and 5.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the c() function to create a vector.\n\n\n\n\n\n\n\n\n\n\n\nTips\n\n\n\n\n\nAlternatively use the : function to create a vector.\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Create a vector\nc(1, 2, 3, 4, 5)\n\n# or\n1:5"
  },
  {
    "objectID": "beginner/basics/basics.html#exercise-4-basic-function-usage",
    "href": "beginner/basics/basics.html#exercise-4-basic-function-usage",
    "title": "1. Basic R",
    "section": "Exercise 4: Basic Function Usage",
    "text": "Exercise 4: Basic Function Usage\nFind the mean of the numbers 10, 20, 30, 40, and 50.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse the mean() function to calculate the average of a set of numbers.\n\n\n\n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n# Calculate the mean\nnumbers &lt;- c(10, 20, 30, 40, 50)\nmean(numbers)"
  },
  {
    "objectID": "beginner/basics/basics.html#exercise-5-conditional-statement",
    "href": "beginner/basics/basics.html#exercise-5-conditional-statement",
    "title": "1. Basic R",
    "section": "Exercise 5: Conditional Statement",
    "text": "Exercise 5: Conditional Statement\nWrite a conditional statement that checks if a number x is greater than 10. If it is, print “Greater than 10”; otherwise, print “10 or less”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nUse an if statement to perform a conditional check.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nSolution:\nx &lt;- 12\n\n# Conditional statement\nif (x &gt; 10) {\n  print(\"Greater than 10\")\n} else {\n  print(\"10 or less\")\n}"
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "",
    "text": "This work is a translation of the a Python tutorial from the following repository: https://github.com/jisukimmmm/NCCR_MWQTA_2024\nIt was then transformed in an interactive tutorial."
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#basic-concepts",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#basic-concepts",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "1. Basic concepts",
    "text": "1. Basic concepts\nR can be used in different text editors, here are from the most preferred to the least preferred:\n\nRstudio\nPositron\nVisual Studio Code\nJupyter lab/notebook\nSublime text /Atom\nNeovim (only if you are experimented)\n\nR can be run in the following documents:\n\nRscripts (.r)\nRmarkdown notebook (.rmd)\nQuarto notebook (.qmd)\nJupyter notebook (.ipynb)\n\nYou need to install the R kernel for Jupyter notebook uses the following tutorial or you can try the ark kernel.\n\n\nRun a line (in a script or notebook) using Ctrl/Cmd+Enter and run code cells (in a notebook) by using Ctrl/Cmd+Shift+Enter or pressing the “Play” button in the toolbar above on the “Run button” or on the cell.\nTo print out results, simply write print() with parentheses, but it is not compulsory in R to output a result.\n\n\n\n\n\n\n\n\nLine 1: In R, comments begin with a #. This statement is ignored by the interpreter and serves as documentation for our code. The short cut for this is Ctrl+Maj+C or Cmd+Maj+C.\nLine 2: print(“Hello World!”) To print something on the console, print() function is used. This function also adds a newline after our message is printed (unlike in C). Note that in R you can also use the cat() function for a more readable version:\n\n\n\n\n\n\n\n\nNote: To see the document related to the function or library in:\n\nRStudio: appears automatically\nVScode: appears automatically or Ctrl+Space or hover the function\nJupyter lab/notebook: Shift+Tab.\n\nCurly brackets: Like many programming languages, R does not care about the spaces because it is always bound to brackets (parentheses, brackets or curly brackets). Indentation is only for aesthetic matter and users are free to indent their code following their taste (unlike Python or Nim that can have an indentation error). For example, the indentation of the second print() does not break the code since it is in the brackets:\n\n\n\n\n\n\n\n\nRstudio:\n\nCode is run inside an environment (R version, project and environment). It can always be stopped by pressing the “Stop” button or Ctrl+C shortcut (inside quarto/rmarkdown notebook or a script).\n\nJupyter lab/notebook:\n\nCode is run in a separate process called the Kernel. The Kernel can be interrupted or restarted. Try running the following cell and then hit the “Stop” button in the toolbar above or by clicking the right button on the script in jupyter Lab.\n\nIndexing in R starts at 1, which means that the first element in a sequence has an index of 1, the second element has an index of 2, and so on as expected.\n\n\n\n\n\n\n\n\nNote: You need a double bracket to have access to a list element (see last lines of code).\nTips: You can generate a continuous vector between two values using the sign : as follows:\n\n\n\n\n\n\n\n\nYou can also decide to use specific steps to get from one value to another using the seq() function:\n\n\n\n\n\n\n\n\nR reserved words\nR has reserved words that you can use as a variable name (except if you surround it by `). Otherwise, R is smart enough to know which element you are talking about even though, function, package and variable names have the same name."
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#variables-and-types",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#variables-and-types",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "2. Variables and types",
    "text": "2. Variables and types\nVariable names in R can contain alphanumerical characters a-z, A-Z, 0-9 and some special characters such as _ and .. Variable names cannot start with a number (e.g., 22list), or cannot be R reserved words (see above), or cannot contain a space or -. If your variable does not respect this rule, you can always surround it with ` and it will works.\nVariables can contain different forms such as character (text), integer, or double (float). The variable can contain mix of these different forms.\nThe assignment operators in R are &lt;-, -&gt; and =. R is a dynamically typed language, so we do not need to specify the type of a variable when we create one!\nAssigning a value to a new variable already creates the variable:\n\n\n\n\n\n\n\n\nIn the last line, we force the creation of integer by adding L after a number.\nSince value were assigned, the result does not appears. to see it you can just call the variable:\n\n\n\n\n\n\n\n\nYou can also have many of them in a single line using ; to separate them.\n\n\n\n\n\n\n\n\nAlthough not explicitly specified, a variable do have a type associated with it. The type is derived from the value it was assigned.\n\n\n\n\n\n\n\n\nIf we assign a new value to a variable, its type can change.\n\n\n\n\n\n\n\n\nNote: Integer: represents positive or negative whole numbers like 3 or -512. Floating point number (double): represents real numbers like 3.14159 or -2.5. Character string: text.\nIf we try to use a variable that has not yet been defined we get an Error:\n\n\n\n\n\n\n\n\nBut we can assign the value to a new variable from an existing variable:"
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#operators-and-comparisons",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#operators-and-comparisons",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "3. Operators and comparisons",
    "text": "3. Operators and comparisons\nMost operators and comparisons in R work as one would expect:\n\nArithmetic operators +, -, *, /, %/% (integer division), ^ power\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe boolean operators are spelled out as words. They are useful for condition (“if it is true or false”) and filtering data.\n\n\n\n\n\n\n\n\n\n\nNote the use of & (and), ! (not) and | (or).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nComparison operators can create booleans: &gt;, &lt;, &gt;= (greater or equal), &lt;= (less or equal), == equality.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote:\n\nand (&): means that both condition most be true to return TRUE\nor (|): means that least one condition need to be true tu return TRUE\n\n\n\n\n\n\n\n\n\n\nIt works with vectors:\n\n\n\n\n\n\n\n\nSo it is possible to filter vectors\n\n\n\n\n\n\n\n\nThere are other"
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#compound-types-strings-list-sets-tuples-and-dictionaries",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#compound-types-strings-list-sets-tuples-and-dictionaries",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "4. Compound types: strings, list, sets, tuples and dictionaries",
    "text": "4. Compound types: strings, list, sets, tuples and dictionaries\n\nStrings\nStrings are the variable type that is used for storing text messages. To declare string variables, include quotes; either single or double. E.g:\n\n\n\n\n\n\n\n\nIn R, characters are one element of a vector. To collect the length of a character, we need to use a specific function (since length() only return on 1 for characters).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can index a character in a string using [] after the function strsplit(character, \"\")[[1]][1]:\n\n\n\n\n\n\n\n\nNote that in R head() allows to do an ordered selection (like []) while tail() do the same backwards.\n\n\n\n\n\n\n\n\nWe can extract a part of a string using the syntax [start:stop], which extracts characters between index start and stop:\n\n\n\n\n\n\n\n\n\n\nList\nLists are very similar to vector, except that each element can be of any type.\nThe syntax for creating lists in R is list(...):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo access variables in a list:\n\n\n\n\n\n\n\n\n\nAdding, inserting, modifying, and removing elements from lists\n\n\n\n\n\n\n\n\nWe can modify lists by assigning new values to elements in the list. In technical jargon, lists are mutable.\n\n\n\n\n\n\n\n\nWe can insert an element at a specific index using append\n\n\n\n\n\n\n\n\nRemove elements with remove\n\n\n\n\n\n\n\n\n\n\n\nList advanced\nLists are not the best method for quick and concise calculations or operations. Vectors are more appropriate. This is because vectors always have the same type, so calculations are easier for the computer (which can anticipate all the steps and therefore optimize). Lists come in handy when we want to have a collection of elements that have different types and names.\nList are also like vectors, except that each element is a key-value pair. The syntax for lists is list(key1 = value1, ...).\n\n\n\n\n\n\n\n\nTo access keys:\n\n\n\n\n\n\n\n\nTo access values of the keys:\n\n\n\n\n\n\n\n\nTo access an item of a key:\n\n\n\n\n\n\n\n\nTo change the value of a key:\n\n\n\n\n\n\n\n\nTo add a new entry:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUser Input\nYou can take an user input using using the readline() function. Not that if you are using it in a chunk you still have to interact with the code in the console:\n\nRun the chunk\nGo to the console\nAnswer the question “what is you names:” with a text\nGo back to the chunk"
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#control-flow",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#control-flow",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "5. Control Flow",
    "text": "5. Control Flow\n\nConditional statements: if, else if, else\nYou can execute your code conditionally by dividing it into different parts and setting conditions for running each specific part.\nThe R syntax for conditional execution of code use the keywords if, else if, else:\n\nYou can play with this by changin the value of statement1 and statement2 by TRUE or FALSE"
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#loops",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#loops",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "Loops",
    "text": "Loops\nIn R, loops can be programmed in a number of different ways. The most common is the for loop, which is used together with iterable objects, such as lists. The basic syntax is:\n\nfor loops:\n\n\n\n\n\n\n\n\nNote that in this case, the function print() is necessary.\nTo iterate over key-value pairs of a list:\n\n\n\n\n\n\n\n\n\n\nwhile loops:\nInstead of passing each element of a list, it is possible to set the condition that a code is executed as long as a specific condition is met. You can run the whole chunk to see it in action:\n\n\n\n\n\n\n\n\nNote that the print(\"done\") statement is not part of the while loop body because of the difference in indentation."
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#functions",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#functions",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "6. Functions",
    "text": "6. Functions\nA function in R is defined using the keyword function, followed by a function name, a signature within parentheses (), and a curly brace {. The following code, with one additional level of indentation, is the function body. It return nothing but the function is available now.\n\n\n\n\n\n\n\n\nYou can use your new function on any value:\n\n\n\n\n\n\n\n\nNote that you are not forced to use the return statement in the function, R will return the last value automatically:\n\n\n\n\n\n\n\n\nYou can even make it shorter by removing the brackets and putting everything in a single line:"
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#modules",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#modules",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "7. Modules",
    "text": "7. Modules\nMost of the functionality in R is provided by packages. The R Standard Library is a large collection of packages that provides cross-platform implementations of common facilities such as access to the operating system, file I/O, string management, network communication, and much more.\nTo use a package in an R program it first has to be installed. A quickest way is to do it here using the install.packages statement. For example, to install the package ggplot2, which is a useful package for plots, we can do:\n\n\n\n\n\n\n\n\nTo use a package in an R program it first has to be imported. A package can be imported using the library statement. For example, to import the package ggplot2, which contains many standard plotting functions, we can do:\n\n\n\n\n\n\n\n\nThis includes the whole package and makes it available for use later in the program.\nNote that R can creat plot without packages. But ggplot2 bring beautiful and modular graphs. Let’s try it! For instance, R have built-in datasets that we can use. For instance we can invoke the cars dataset by simply calling it if it is for a short usecase:\n\n\n\n\n\n\n\n\nThen we can then plot it using the plot() function:\n\n\n\n\n\n\n\n\nggplot allow to do the same:\n\n\n\n\n\n\n\n\nOnce a package is imported, we can list the symbols it provides using the ls function:\n\n\n\n\n\n\n\n\nThe best way to learn about a package is to use its documentation:\n\nMain page\nGet started\nReferences (list of functions and objects from the package)\n\nThere are also great free ressources:\n\nR graphic Cookbook\nData visualization\n\nThere are also great examples…\n\nhttps://r-graph-gallery.com/\n\n… and cool extensions:\n\nhttps://exts.ggplot2.tidyverse.org/gallery/\n\n\nPlotting with ggplot2\n\n\n\n\n\n\n\n\nLet’s create a sequence and plot it against its version plus 1:\n\n\n\n\n\n\n\n\nLet’s create a normal distribution of 500 values using rnorm() and plot it as an histogram:"
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#manipulating-data-with-dplyr",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/1_Introduction_to_R_language.html#manipulating-data-with-dplyr",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "Manipulating data with dplyr",
    "text": "Manipulating data with dplyr\nIt is possible to manipulate dataset (here called data frames) using base R functionalities. However, the dplyr make this manipulation easier. You need to install it firts with install.package(\"dplyr\") then load the library with library(dplyr):\n\n\n\n\n\n\n\n\nTo import a csv you can use the function read.csv() in base R, but the read_csv() in dplyr is faster and import everything as tibble table (an advanced kind of dataframe):\n\n\n\n\n\n\n\n\nNote that to have access to the data, you do not need to write the full path, you can simply press the key Tab inside the quotation mark of a\nDisplay a dataframe:\n\n\n\n\n\n\n\n\nDisplay the size of your dataframe:\n\n\n\n\n\n\n\n\nDisplay the names of columns:\n\n\n\n\n\n\n\n\nCreate a new column the base R way:\n\n\n\n\n\n\n\n\nCreate a new column with Tidyverse (without pipe):\n\n\n\n\n\n\n\n\nR has a super power as a functional programming language. It can use pipes (|&gt; and %&gt;%). Those allows to pass the result of an operation to the next operation and therfore chain multiple operations. It allows to have a more readable code, easier to write and more composable. You can use 2 kinds of pipes:\n\nmagrittr pipe (%&gt;%): Powerful (can do more than the next one), it needs to be installed through a package of the Tidyverse (magrittr, dplyr, rvest, …).\nBase (|&gt;): useful, do not need any libraries\n\nSince we will use the dplyr, we will use magrittr pipe (%&gt;%). No need to write it, simply use the following shortcut Ctrl+Maj+M or Cmd+Maj+M. With a few try, it comes naturally. As said before the pipe use is to pass values through operations. For instance consider the following example printing the value of the variable a:\n\n\n\n\n\n\n\n\nThey both give the same result. However the pipe version is longer. The strength of the secon approach appear when we need more than one operation. For instance, imagine converting a to an integer before printing it:\n\n\n\n\n\n\n\n\nThe first one still looks more concise, but it is in fact slower and harder to write. You have to start by the print() statement (the end) and go backward until the beginning which is counter-intuitive. While with the pipe approach you can consider %&gt;% as a “and”. Writting it looks like, “I start with the variable ‘a’ AND I convert it into an integer AND I print it”.\nThis method scale also really well. Lets take a more extreme example. With the following steps:\n\nTranslate “a” into an integer\nCompute the log10\nCompute the square root\nPrint it\n\n\n\n\n\n\n\n\n\nNote that in this code we can put expressions following a pipe in the next line for more readability. But the whole code is considered by R as only one line. So, you can run the code from whatever line and it will run the whole expression.\nIt is even more complicated with the normal way and less readable. While with pipe you can read it like sentences connected by “AND”. Generally, when operation start to stack, we desagreggate them into multiple steps like this:\n\n\n\n\n\n\n\n\nThis approach is more readable. The issue with this approach is that we have changed the value of a multiple time. But if we want to go back in a step, we need to re-run all the step before. It seems like nothing, but in a longer code and more complex, you can easily be overwhelmed and lost track of the state of your variable. You could improve that by storing new values in different variables:\n\n\n\n\n\n\n\n\nBut then we can create unecessary intermediate variables that have only no usage beside storing value that have no use in the rest of the code. Furthermore, both version are slower to write than the pipe version. Another advantage of the pipe function is that we can iteratively write the code and add and remove steps as needed. The when you are satisfied with the result, you can store it in a final variable:\n\n\n\n\n\n\n\n\nThe pipes in dplyr allows to manipulate data frames steps by steps in a readable manner. But function from the tidyverse bring another strength. They always return data frame, makin the iteratino even easier since you keep everything, so modifying a single column won’t stop you to do other manipulation with other columns in the same chain. Let’s take the earlier example from the df dataframe and compute the mean of Open and Close columns.\n\n\n\n\n\n\n\n\nThe last expression return a data frame and added the new column to the end. Again you are free to put the new result in a new object. Then you can select specific rows:\n\n\n\n\n\n\n\n\nWe can combine it with the previous operation to chain everything. The new dataset has a new column mean_value and is filterd to keep row when Close is bigger than Open:\n\n\n\n\n\n\n\n\nYou can display the summary statistic of a given variable using the summary() function.\n\n\n\n\n\n\n\n\nYou can do the same with the whole data frame:\n\n\n\n\n\n\n\n\nYou can also request specific statistics using the corresponding functions:\n\n\n\n\n\n\n\n\nChaining is useful when we need to answer a specific question without changing the data frame. For instance, you can find the date when Volume was highest:\n\n\n\n\n\n\n\n\nBut sometimes, it is faster to use base R for simple isolated operations. For instance, the Date column in df is note in the date format but in text format. We can change it in one line:\n\n\n\n\n\n\n\n\nIf you want to extract the specific value and not a data frame, you can use the pull() function instead of select():\n\n\n\n\n\n\n\n\nPlots are very easy in ggplot2 with qplot()! But there is another notation that is more used, the layered one:\n\n\n\n\n\n\n\n\nIt looks longer, but it is more flexible. It works like layers. Here is a short explanation of each part: - ggplot() initiate te figure - aes() map the column to different dimensions (x/y axis, color, line type, size, etc.) - geom_*() create a type of geometry - geom_line() create line using value from x and y\nThe aes() part is quite movable. You can decide to put it in a different place to update the graph:\n\n\n\n\n\n\n\n\nWe get the same result. The advantage of using such an approach is that we can really be flexible in the parameter that we are using and also the number of layer that we can create:\n\n\n\n\n\n\n\n\nJust by changing the geom, we can have a large variety of plots. For instance here is a boxplot:\n\n\n\n\n\n\n\n\nNote that the parameters are not compulsary as long as we keep theme in the righ order (x then y):\n\n\n\n\n\n\n\n\nKeeping the same structure, we can have different plots by changing the geom:\n\n\n\n\n\n\n\n\nggplot2 is a whole subject by itself and the Tidyverse ecosystem (dplyr, ggplot2, readr, …) is an even bigger topic. We won’t talk about it here, but in future tutorials."
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/index.html",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/index.html",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "",
    "text": "This notebook is for students who are not familiar with R language.\nNote that many more resources are available on the Web. Check out this website for more: https://www.w3schools.com/r/default.asp\n\n\nR can be used in different text editors, here are from the most preferred to the least preferred:\n\nRstudio\nPositron\nVisual Studio Code\nJupyter lab/notebook\nSublime text /Atom\nNeovim (only if you are experimented)\n\nR can be run in the following documents:\n\nRscripts (.r)\nRmarkdown notebook (.rmd)\nQuarto notebook (.qmd)\nJupyter notebook (.ipynb)\n\nYou need to install the R kernel for Jupyter notebook uses the following tutorial or you can try the ark kernel.\n\n\nRun a line (in a script or notebook) using Ctrl/Cmd+Enter and run code cells (in a notebook) by using Ctrl/Cmd+Shift+Enter or pressing the “Play” button in the toolbar above on the “Run button” or on the cell.\nTo print out results, simply write print() with parentheses, but it is not compulsory in R to output a result.\n\n# Make \"Hello World!\" appear to the console\nprint(\"Hello World!\") \n\n[1] \"Hello World!\"\n\n\"Hello World!\" # Just the text\n\n[1] \"Hello World!\"\n\n\nLine 1: In R, comments begin with a #. This statement is ignored by the interpreter and serves as documentation for our code. The short cut for this is Ctrl+Maj+C or Cmd+Maj+C.\nLine 2: print(“Hello World!”) To print something on the console, print() function is used. This function also adds a newline after our message is printed (unlike in C). Note that in R you can also use the cat() function for a more readable version:\n\nprint(\"Hello\\nWorld\") # print as it is\n\n[1] \"Hello\\nWorld\"\n\ncat(\"Hello\\nWorld!\") # print a readable version\n\nHello\nWorld!\n\n\nNote: To see the document related to the function or library in:\n\nRStudio: appears automatically\nVScode: appears automatically or Ctrl+Space or hover the function\nJupyter lab/notebook: Shift+Tab.\n\nCurly brackets: Like many programming languages, R does not care about the spaces because it is always bound to brackets (parentheses, brackets or curly brackets). Indentation is only for aesthetic matter and users are free to indent their code following their taste (unlike Python or Nim that can have an indentation error). For example, the indentation of the second print() does not break the code since it is in the brackets:\n\nif (3==3){\n  print(\"TRUE\")\n} else {\n                  print(\"FALSE\")\n}\n\n[1] \"TRUE\"\n\n\nRstudio:\n\nCode is run inside an environment (R version, project and environment). It can always be stopped by pressing the “Stop” button or Ctrl+C shortcut (inside quarto/rmarkdown notebook or a script).\n\nJupyter lab/notebook:\n\nCode is run in a separate process called the Kernel. The Kernel can be interrupted or restarted. Try running the following cell and then hit the “Stop” button in the toolbar above or by clicking the right button on the script in jupyter Lab.\n\nIndexing in R starts at 1, which means that the first element in a sequence has an index of 1, the second element has an index of 2, and so on as expected.\n\n# Vector\nnumber_vector = c(1, 2, 3, 4, 5)\n# List\nnumber_list = list(1, 2, 3, 4, 5)\n\n# Vector's first element\nnumber_vector[1]\n\n[1] 1\n\n# List's first element\nnumber_list[[1]]\n\n[1] 1\n\n\nNote: You need a double bracket to have access to a list element (see last lines of code).\nTips: You can generate a continuous vector between two values using the sign : as follows:\n\n1:10 # 1 to 10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n3:-8 # 3 to -8\n\n [1]  3  2  1  0 -1 -2 -3 -4 -5 -6 -7 -8\n\n\nYou can also decide to use specific steps to get from one value to another using the seq() function:\n\nseq(0, 10, 2) # From 0 to 10 by steps of 2\n\n[1]  0  2  4  6  8 10\n\nseq(-5, 5, 5) # From-5 to 5 by steps of 5\n\n[1] -5  0  5\n\n\nR reserved words\nR has reserved words that you can use as a variable name (except if you surround it by `). Otherwise, R is smart enough to know which element you are talking about even though, function, package and variable names have the same name.\n\n# if, else, repeat, while, function, for, in, next, breaks, TRUE, FALSE, NULL, Inf, NA, NaN\n\n\n\n\nVariable names in R can contain alphanumerical characters a-z, A-Z, 0-9 and some special characters such as _ and .. Variable names cannot start with a number (e.g., 22list), or cannot be R reserved words (see above), or cannot contain a space or -. If your variable does not respect this rule, you can always surround it with ` and it will works.\nVariables can contain different forms such as character (text), integer, or double (float). The variable can contain mix of these different forms.\nThe assignment operators in R are &lt;-, -&gt; and =. R is a dynamically typed language, so we do not need to specify the type of a variable when we create one!\nAssigning a value to a new variable already creates the variable:\n\n# variable assignments\nx = 1.0\ny &lt;- 2\n3L -&gt; z # 3L is an integer\n\nIn the last line, we force the creation of integer by adding L after a number.\nSince value were assigned, the result does not appears. to see it you can just call the variable:\n\nx\n\n[1] 1\n\ny\n\n[1] 2\n\nz\n\n[1] 3\n\n\nYou can also have many of them in a single line using ; to separate them.\n\nx; y; z\n\n[1] 1\n\n\n[1] 2\n\n\n[1] 3\n\n\nAlthough not explicitly specified, a variable do have a type associated with it. The type is derived from the value it was assigned.\n\ntypeof(x) # double\n\n[1] \"double\"\n\ntypeof(y) # double\n\n[1] \"double\"\n\ntypeof(z) # integer\n\n[1] \"integer\"\n\n\nIf we assign a new value to a variable, its type can change.\n\nx = \"cat\"\ntypeof(x)\n\n[1] \"character\"\n\n\nNote: Integer: represents positive or negative whole numbers like 3 or -512. Floating point number (double): represents real numbers like 3.14159 or -2.5. Character string: text.\nIf we try to use a variable that has not yet been defined we get an Error:\n\nh\n\nBut we can assign the value to a new variable from an existing variable:\n\nh &lt;- x\nh\n\n[1] \"cat\"\n\n\n\n\n\nMost operators and comparisons in R work as one would expect:\n\nArithmetic operators +, -, *, /, %/% (integer division), ^ power\n\n\n1 + 2 # Addition\n\n[1] 3\n\n1 - 2 # Substraction\n\n[1] -1\n\n1 * 2 # Multiplication\n\n[1] 2\n\n1 %/% 2 # Modulo\n\n[1] 0\n\n\n\n1.0 + 2.0\n\n[1] 3\n\n1.0 - 2.0\n\n[1] -1\n\n1.0 * 2.0\n\n[1] 2\n\n1.0 %/% 2.0\n\n[1] 0\n\n\n\n# Integer division of float numbers\n3.0 %/% 2.0\n\n[1] 1\n\n\n\n3^2 # 3 power of 2\n\n[1] 9\n\n\n\nThe boolean operators are spelled out as words. They are useful for condition (“if it is true or false”) and filtering data.\n\n\nTRUE\n\n[1] TRUE\n\nFALSE\n\n[1] FALSE\n\n\n\nNote the use of & (and), ! (not) and | (or).\n\n\nTRUE & FALSE # FALSE win\n\n[1] FALSE\n\n\n\n!FALSE # Inverse\n\n[1] TRUE\n\n\n\nTRUE | FALSE # TRUE win\n\n[1] TRUE\n\n\n\nComparison operators can create booleans: &gt;, &lt;, &gt;= (greater or equal), &lt;= (less or equal), == equality.\n\n\n2&gt;1 # Is 2 bigger than 1?\n\n[1] TRUE\n\n2&lt;1 # Is 2 smaller than 1?\n\n[1] FALSE\n\n\n\n2&gt;2 # Is 2 bigger than 2?\n\n[1] FALSE\n\n2&lt;2 # Is 2 smaller than 2?\n\n[1] FALSE\n\n\n\n2&gt;=2 # Is 2 bigger than or equal 2?\n\n[1] TRUE\n\n2&lt;=2 # Is 2 smaller than or equal to 2?\n\n[1] TRUE\n\n\n\nNote:\n\nand (&): means that both condition most be true to return TRUE\nor (|): means that least one condition need to be true tu return TRUE\n\n\n\n2&gt;1 & 3&gt;4 # is 2 bigger than 1 AND 3 bigger than 4?\n\n[1] FALSE\n\n2&gt;1 | 3&gt;4 # is 2 bigger than 1 OR 3 bigger than 4?\n\n[1] TRUE\n\n\nIt works with vectors:\n\nc(0, 5, 10, 15) &gt; 2\n\n[1] FALSE  TRUE  TRUE  TRUE\n\n\nSo it is possible to filter vectors\n\nvector_to_filter &lt;- c(3, 6, 9, 12)\n\nvector_to_filter[vector_to_filter &gt; 5] # Keep all the value bigger than 5\n\n[1]  6  9 12\n\n\nThere are other\n\n# equality \nsetequal(c(1,2,3), c(3,4,5))\n\n[1] FALSE\n\n# are the elements in the left in the vector on the right?\nc(1,2,3) %in% c(3,4,5)\n\n[1] FALSE FALSE  TRUE\n\n\n\n\n\n\n\nStrings are the variable type that is used for storing text messages. To declare string variables, include quotes; either single or double. E.g:\n\ns = \"Hello world\"\ntypeof(s)\n\n[1] \"character\"\n\n\nIn R, characters are one element of a vector. To collect the length of a character, we need to use a specific function (since length() only return on 1 for characters).\n\n# classic lenght\nnchar(s)\n\n[1] 11\n\n# print the length of a string (i.e. the number of characters)\nlength(s)\n\n[1] 1\n\n\n\n# replace a substring in a string with somethign else\ns2 = gsub(s, \"world\", \"test\")\ns2\n\n[1] \"test\"\n\n\nWe can index a character in a string using [] after the function strsplit(character, \"\")[[1]][1]:\n\ns3 = strsplit(s, \"\")[[1]]\ns3\n\n [1] \"H\" \"e\" \"l\" \"l\" \"o\" \" \" \"w\" \"o\" \"r\" \"l\" \"d\"\n\ns3[1]\n\n[1] \"H\"\n\n\nNote that in R head() allows to do an ordered selection (like []) while tail() do the same backwards.\n\nhead(s3, 3)\n\n[1] \"H\" \"e\" \"l\"\n\ntail(s3, 1)\n\n[1] \"d\"\n\n\nWe can extract a part of a string using the syntax [start:stop], which extracts characters between index start and stop:\n\ns3[2:4]\n\n[1] \"e\" \"l\" \"l\"\n\n\n\n\n\nLists are very similar to vector, except that each element can be of any type.\nThe syntax for creating lists in R is list(...):\n\nstring_list = list('spring', 'summer', 'winter', 'fall')\nstring_list\n\n[[1]]\n[1] \"spring\"\n\n[[2]]\n[1] \"summer\"\n\n[[3]]\n[1] \"winter\"\n\n[[4]]\n[1] \"fall\"\n\n\n\ninteger_list = list(12, 3, 5, 3, 9, 6, 2)\ninteger_list\n\n[[1]]\n[1] 12\n\n[[2]]\n[1] 3\n\n[[3]]\n[1] 5\n\n[[4]]\n[1] 3\n\n[[5]]\n[1] 9\n\n[[6]]\n[1] 6\n\n[[7]]\n[1] 2\n\n\n\nfloat_list = list(2.3, 4.6, 3.7, 8.3)\nfloat_list\n\n[[1]]\n[1] 2.3\n\n[[2]]\n[1] 4.6\n\n[[3]]\n[1] 3.7\n\n[[4]]\n[1] 8.3\n\n\nTo access variables in a list:\n\nstring_list &lt;- list(\"a\", \"b\", \"c\", \"d\")\nstring_list[[1]] # note that indexing starts at 1 in R!\n\n[1] \"a\"\n\n\n\n\n\n# create a new empty list\nl &lt;- list()\n\n# add elements using `append`\nl &lt;- append(l, \"A\")\nl &lt;- append(l, \"d\")\n\nl\n\n[[1]]\n[1] \"A\"\n\n[[2]]\n[1] \"d\"\n\n\nWe can modify lists by assigning new values to elements in the list. In technical jargon, lists are mutable.\n\nl[[2]] &lt;- \"p\"\n\nl\n\n[[1]]\n[1] \"A\"\n\n[[2]]\n[1] \"p\"\n\n\nWe can insert an element at a specific index using append\n\nl &lt;- append(l, \"i\", 0)\nl &lt;- append(l, \"n\", 1)\nl &lt;- append(l, \"s\", 2)\nl &lt;- append(l, \"e\", 3)\nl &lt;- append(l, \"r\", 4)\nl &lt;- append(l, \"t\", 5)\n\nl\n\n[[1]]\n[1] \"i\"\n\n[[2]]\n[1] \"n\"\n\n[[3]]\n[1] \"s\"\n\n[[4]]\n[1] \"e\"\n\n[[5]]\n[1] \"r\"\n\n[[6]]\n[1] \"t\"\n\n[[7]]\n[1] \"A\"\n\n[[8]]\n[1] \"p\"\n\n\nRemove elements with remove\n\nl &lt;- l[l != \"A\"]\n\nl\n\n[[1]]\n[1] \"i\"\n\n[[2]]\n[1] \"n\"\n\n[[3]]\n[1] \"s\"\n\n[[4]]\n[1] \"e\"\n\n[[5]]\n[1] \"r\"\n\n[[6]]\n[1] \"t\"\n\n[[7]]\n[1] \"p\"\n\n\n\n\n\n\nLists are not the best method for quick and concise calculations or operations. Vectors are more appropriate. This is because vectors always have the same type, so calculations are easier for the computer (which can anticipate all the steps and therefore optimize). Lists come in handy when we want to have a collection of elements that have different types and names.\nList are also like vectors, except that each element is a key-value pair. The syntax for lists is list(key1 = value1, ...).\n\nstudent &lt;- list(hair = c(\"brown\", \"pink\"), \n                eye = \"black\", \n                height = 172)\n\nclass(student)\n\n[1] \"list\"\n\nstudent\n\n$hair\n[1] \"brown\" \"pink\" \n\n$eye\n[1] \"black\"\n\n$height\n[1] 172\n\n\nTo access keys:\n\nnames(student)\n\n[1] \"hair\"   \"eye\"    \"height\"\n\n\nTo access values of the keys:\n\nunlist(student)\n\n  hair1   hair2     eye  height \n\"brown\"  \"pink\" \"black\"   \"172\" \n\n\nTo access an item of a key:\n\nstudent$eye\n\n[1] \"black\"\n\n# or\nstudent[[\"eye\"]]\n\n[1] \"black\"\n\n\nTo change the value of a key:\n\nstudent$eye &lt;- 'blue'\n# or\nstudent[[\"eye\"]]\n\n[1] \"blue\"\n\n\nTo add a new entry:\n\nstudent$nationality &lt;- 'Spanish'\n# or\nstudent[[\"nationality\"]] &lt;- 'Spanish'\n\n\nstudent\n\n$hair\n[1] \"brown\" \"pink\" \n\n$eye\n[1] \"blue\"\n\n$height\n[1] 172\n\n$nationality\n[1] \"Spanish\"\n\n\n\n\n\nYou can take an user input using using the readline() function. Not that if you are using it in a chunk you still have to interact with the code in the console:\n\nRun the chunk\nGo to the console\nAnswer the question “what is you names:” with a text\nGo back to the chunk\n\n\n# Input \nname &lt;- readline(prompt=\"What is your name: \")\npaste(\"My name is\", name)\n\n\n\n\n\n\n\nYou can execute your code conditionally by dividing it into different parts and setting conditions for running each specific part.\nThe R syntax for conditional execution of code use the keywords if, else if, else:\n\nYou can play with this by changin the value of statement1 and statement2 by TRUE or FALSE\n\n\nstatement1 &lt;- FALSE\nstatement2 &lt;- FALSE\n\nif (statement1) { # \"if statement1 is TRUE\" do the following:\n    \"statement1 is TRUE\"\n} else if (statement2) { # \"otherwise if statement2 is TRUE\" do the following:\"\n    \"statement2 is TRUE\"\n} else { # \"therwise do the following:\"\n    \"statement1 and statement2 are FALSE\"\n}\n\n[1] \"statement1 and statement2 are FALSE\"\n\n\n\n\n\n\nIn R, loops can be programmed in a number of different ways. The most common is the for loop, which is used together with iterable objects, such as lists. The basic syntax is:\n\n\n\nfor (x in 1:3) {# for each element of the list print it\n    print(x)\n}\n\n[1] 1\n[1] 2\n[1] 3\n\n\nNote that in this case, the function print() is necessary.\nTo iterate over key-value pairs of a list:\n\nfor (key in names(student)) { # for each key of the list print \"[key] = [value]\"\n    print(paste(key, \"=\", student[[key]]))\n}\n\n[1] \"hair = brown\" \"hair = pink\" \n[1] \"eye = blue\"\n[1] \"height = 172\"\n[1] \"nationality = Spanish\"\n\n\n\n\n\nInstead of passing each element of a list, it is possible to set the condition that a code is executed as long as a specific condition is met. You can run the whole chunk to see it in action:\n\ni &lt;- 0\n\nwhile (i &lt; 5) { # \"while i is smaller than 5 run the following code:\"\n    print(i) \n    i &lt;- i + 1 \n}\n\n[1] 0\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n\n\"done\" # Appears if done\n\n[1] \"done\"\n\n\nNote that the print(\"done\") statement is not part of the while loop body because of the difference in indentation.\n\n# example of for loop and if statement: \n# for each value in the list \"integer_list\" print a value that is greater or equal to 7\ninteger_list &lt;- c(5, 7, 9, 3, 8)\n\nfor (x in integer_list) {\n    if (x &gt;= 7) { \n        print(x)\n    }\n}\n\n[1] 7\n[1] 9\n[1] 8\n\n\n\n\n\n\nA function in R is defined using the keyword function, followed by a function name, a signature within parentheses (), and a curly brace {. The following code, with one additional level of indentation, is the function body. It return nothing but the function is available now.\n\nsquare &lt;- function(x) { # for a given value x do the following:\n    return(x^2) # Return the square of x.\n}\n\nYou can use your new function on any value:\n\nsquare(4)\n\n[1] 16\n\nsquare(10)\n\n[1] 100\n\n\nNote that you are not forced to use the return statement in the function, R will return the last value automatically:\n\nsquare &lt;- function(x) { # for a given value x do the following:\n    x^2 # Return the square of x.\n}\n\nsquare(4)\n\n[1] 16\n\n\nYou can even make it shorter by removing the brackets and putting everything in a single line:\n\nsquare &lt;- function(x) x^2\n\nsquare(4)\n\n[1] 16\n\n\n\n\n\nMost of the functionality in R is provided by packages. The R Standard Library is a large collection of packages that provides cross-platform implementations of common facilities such as access to the operating system, file I/O, string management, network communication, and much more.\nTo use a package in an R program it first has to be installed. A quickest way is to do it here using the install.packages statement. For example, to install the package ggplot2, which is a useful package for plots, we can do:\n\ninstall.packages(\"ggplot2\")\n\nTo use a package in an R program it first has to be imported. A package can be imported using the library statement. For example, to import the package ggplot2, which contains many standard plotting functions, we can do:\n\nlibrary(ggplot2)\n\nWarning: le package 'ggplot2' a été compilé avec la version R 4.2.3\n\n\nThis includes the whole package and makes it available for use later in the program.\nNote that R can creat plot without packages. But ggplot2 bring beautiful and modular graphs. Let’s try it! For instance, R have built-in datasets that we can use. For instance we can invoke the cars dataset by simply calling it if it is for a short usecase:\n\ncars\n\n   speed dist\n1      4    2\n2      4   10\n3      7    4\n4      7   22\n5      8   16\n6      9   10\n7     10   18\n8     10   26\n9     10   34\n10    11   17\n11    11   28\n12    12   14\n13    12   20\n14    12   24\n15    12   28\n16    13   26\n17    13   34\n18    13   34\n19    13   46\n20    14   26\n21    14   36\n22    14   60\n23    14   80\n24    15   20\n25    15   26\n26    15   54\n27    16   32\n28    16   40\n29    17   32\n30    17   40\n31    17   50\n32    18   42\n33    18   56\n34    18   76\n35    18   84\n36    19   36\n37    19   46\n38    19   68\n39    20   32\n40    20   48\n41    20   52\n42    20   56\n43    20   64\n44    22   66\n45    23   54\n46    24   70\n47    24   92\n48    24   93\n49    24  120\n50    25   85\n\n\nThen we can then plot it using the plot() function:\n\nplot(cars)\n\n\n\n\n\n\n\n\nggplot allow to do the same:\n\nqplot(speed, dist, data = cars)\n\nWarning: `qplot()` was deprecated in ggplot2 3.4.0.\n\n\n\n\n\n\n\n\n\nOnce a package is imported, we can list the symbols it provides using the ls function:\n\nls(\"package:ggplot2\")\n\n  [1] \"%+%\"                        \"%+replace%\"                \n  [3] \"aes\"                        \"aes_\"                      \n  [5] \"aes_all\"                    \"aes_auto\"                  \n  [7] \"aes_q\"                      \"aes_string\"                \n  [9] \"after_scale\"                \"after_stat\"                \n [11] \"alpha\"                      \"annotate\"                  \n [13] \"annotation_custom\"          \"annotation_logticks\"       \n [15] \"annotation_map\"             \"annotation_raster\"         \n [17] \"arrow\"                      \"as_label\"                  \n [19] \"as_labeller\"                \"autolayer\"                 \n [21] \"autoplot\"                   \"AxisSecondary\"             \n [23] \"benchplot\"                  \"binned_scale\"              \n [25] \"borders\"                    \"calc_element\"              \n [27] \"check_device\"               \"combine_vars\"              \n [29] \"continuous_scale\"           \"Coord\"                     \n [31] \"coord_cartesian\"            \"coord_equal\"               \n [33] \"coord_fixed\"                \"coord_flip\"                \n [35] \"coord_map\"                  \"coord_munch\"               \n [37] \"coord_polar\"                \"coord_quickmap\"            \n [39] \"coord_radial\"               \"coord_sf\"                  \n [41] \"coord_trans\"                \"CoordCartesian\"            \n [43] \"CoordFixed\"                 \"CoordFlip\"                 \n [45] \"CoordMap\"                   \"CoordPolar\"                \n [47] \"CoordQuickmap\"              \"CoordRadial\"               \n [49] \"CoordSf\"                    \"CoordTrans\"                \n [51] \"cut_interval\"               \"cut_number\"                \n [53] \"cut_width\"                  \"datetime_scale\"            \n [55] \"derive\"                     \"diamonds\"                  \n [57] \"discrete_scale\"             \"draw_key_abline\"           \n [59] \"draw_key_blank\"             \"draw_key_boxplot\"          \n [61] \"draw_key_crossbar\"          \"draw_key_dotplot\"          \n [63] \"draw_key_label\"             \"draw_key_linerange\"        \n [65] \"draw_key_path\"              \"draw_key_point\"            \n [67] \"draw_key_pointrange\"        \"draw_key_polygon\"          \n [69] \"draw_key_rect\"              \"draw_key_smooth\"           \n [71] \"draw_key_text\"              \"draw_key_timeseries\"       \n [73] \"draw_key_vline\"             \"draw_key_vpath\"            \n [75] \"dup_axis\"                   \"economics\"                 \n [77] \"economics_long\"             \"el_def\"                    \n [79] \"element_blank\"              \"element_grob\"              \n [81] \"element_line\"               \"element_rect\"              \n [83] \"element_render\"             \"element_text\"              \n [85] \"enexpr\"                     \"enexprs\"                   \n [87] \"enquo\"                      \"enquos\"                    \n [89] \"ensym\"                      \"ensyms\"                    \n [91] \"expand_limits\"              \"expand_scale\"              \n [93] \"expansion\"                  \"expr\"                      \n [95] \"Facet\"                      \"facet_grid\"                \n [97] \"facet_null\"                 \"facet_wrap\"                \n [99] \"FacetGrid\"                  \"FacetNull\"                 \n[101] \"FacetWrap\"                  \"faithfuld\"                 \n[103] \"fill_alpha\"                 \"find_panel\"                \n[105] \"flip_data\"                  \"flipped_names\"             \n[107] \"fortify\"                    \"Geom\"                      \n[109] \"geom_abline\"                \"geom_area\"                 \n[111] \"geom_bar\"                   \"geom_bin_2d\"               \n[113] \"geom_bin2d\"                 \"geom_blank\"                \n[115] \"geom_boxplot\"               \"geom_col\"                  \n[117] \"geom_contour\"               \"geom_contour_filled\"       \n[119] \"geom_count\"                 \"geom_crossbar\"             \n[121] \"geom_curve\"                 \"geom_density\"              \n[123] \"geom_density_2d\"            \"geom_density_2d_filled\"    \n[125] \"geom_density2d\"             \"geom_density2d_filled\"     \n[127] \"geom_dotplot\"               \"geom_errorbar\"             \n[129] \"geom_errorbarh\"             \"geom_freqpoly\"             \n[131] \"geom_function\"              \"geom_hex\"                  \n[133] \"geom_histogram\"             \"geom_hline\"                \n[135] \"geom_jitter\"                \"geom_label\"                \n[137] \"geom_line\"                  \"geom_linerange\"            \n[139] \"geom_map\"                   \"geom_path\"                 \n[141] \"geom_point\"                 \"geom_pointrange\"           \n[143] \"geom_polygon\"               \"geom_qq\"                   \n[145] \"geom_qq_line\"               \"geom_quantile\"             \n[147] \"geom_raster\"                \"geom_rect\"                 \n[149] \"geom_ribbon\"                \"geom_rug\"                  \n[151] \"geom_segment\"               \"geom_sf\"                   \n[153] \"geom_sf_label\"              \"geom_sf_text\"              \n[155] \"geom_smooth\"                \"geom_spoke\"                \n[157] \"geom_step\"                  \"geom_text\"                 \n[159] \"geom_tile\"                  \"geom_violin\"               \n[161] \"geom_vline\"                 \"GeomAbline\"                \n[163] \"GeomAnnotationMap\"          \"GeomArea\"                  \n[165] \"GeomBar\"                    \"GeomBlank\"                 \n[167] \"GeomBoxplot\"                \"GeomCol\"                   \n[169] \"GeomContour\"                \"GeomContourFilled\"         \n[171] \"GeomCrossbar\"               \"GeomCurve\"                 \n[173] \"GeomCustomAnn\"              \"GeomDensity\"               \n[175] \"GeomDensity2d\"              \"GeomDensity2dFilled\"       \n[177] \"GeomDotplot\"                \"GeomErrorbar\"              \n[179] \"GeomErrorbarh\"              \"GeomFunction\"              \n[181] \"GeomHex\"                    \"GeomHline\"                 \n[183] \"GeomLabel\"                  \"GeomLine\"                  \n[185] \"GeomLinerange\"              \"GeomLogticks\"              \n[187] \"GeomMap\"                    \"GeomPath\"                  \n[189] \"GeomPoint\"                  \"GeomPointrange\"            \n[191] \"GeomPolygon\"                \"GeomQuantile\"              \n[193] \"GeomRaster\"                 \"GeomRasterAnn\"             \n[195] \"GeomRect\"                   \"GeomRibbon\"                \n[197] \"GeomRug\"                    \"GeomSegment\"               \n[199] \"GeomSf\"                     \"GeomSmooth\"                \n[201] \"GeomSpoke\"                  \"GeomStep\"                  \n[203] \"GeomText\"                   \"GeomTile\"                  \n[205] \"GeomViolin\"                 \"GeomVline\"                 \n[207] \"get_alt_text\"               \"get_element_tree\"          \n[209] \"get_guide_data\"             \"gg_dep\"                    \n[211] \"ggplot\"                     \"ggplot_add\"                \n[213] \"ggplot_build\"               \"ggplot_gtable\"             \n[215] \"ggplotGrob\"                 \"ggproto\"                   \n[217] \"ggproto_parent\"             \"ggsave\"                    \n[219] \"ggtitle\"                    \"Guide\"                     \n[221] \"guide_axis\"                 \"guide_axis_logticks\"       \n[223] \"guide_axis_stack\"           \"guide_axis_theta\"          \n[225] \"guide_bins\"                 \"guide_colorbar\"            \n[227] \"guide_colorsteps\"           \"guide_colourbar\"           \n[229] \"guide_coloursteps\"          \"guide_custom\"              \n[231] \"guide_gengrob\"              \"guide_geom\"                \n[233] \"guide_legend\"               \"guide_merge\"               \n[235] \"guide_none\"                 \"guide_train\"               \n[237] \"guide_transform\"            \"GuideAxis\"                 \n[239] \"GuideAxisLogticks\"          \"GuideAxisStack\"            \n[241] \"GuideAxisTheta\"             \"GuideBins\"                 \n[243] \"GuideColourbar\"             \"GuideColoursteps\"          \n[245] \"GuideCustom\"                \"GuideLegend\"               \n[247] \"GuideNone\"                  \"GuideOld\"                  \n[249] \"guides\"                     \"has_flipped_aes\"           \n[251] \"is.Coord\"                   \"is.facet\"                  \n[253] \"is.ggplot\"                  \"is.ggproto\"                \n[255] \"is.theme\"                   \"label_both\"                \n[257] \"label_bquote\"               \"label_context\"             \n[259] \"label_parsed\"               \"label_value\"               \n[261] \"label_wrap_gen\"             \"labeller\"                  \n[263] \"labs\"                       \"last_plot\"                 \n[265] \"layer\"                      \"layer_data\"                \n[267] \"layer_grob\"                 \"layer_scales\"              \n[269] \"layer_sf\"                   \"Layout\"                    \n[271] \"lims\"                       \"luv_colours\"               \n[273] \"map_data\"                   \"margin\"                    \n[275] \"max_height\"                 \"max_width\"                 \n[277] \"mean_cl_boot\"               \"mean_cl_normal\"            \n[279] \"mean_sdl\"                   \"mean_se\"                   \n[281] \"median_hilow\"               \"merge_element\"             \n[283] \"midwest\"                    \"mpg\"                       \n[285] \"msleep\"                     \"new_guide\"                 \n[287] \"old_guide\"                  \"panel_cols\"                \n[289] \"panel_rows\"                 \"pattern_alpha\"             \n[291] \"Position\"                   \"position_dodge\"            \n[293] \"position_dodge2\"            \"position_fill\"             \n[295] \"position_identity\"          \"position_jitter\"           \n[297] \"position_jitterdodge\"       \"position_nudge\"            \n[299] \"position_stack\"             \"PositionDodge\"             \n[301] \"PositionDodge2\"             \"PositionFill\"              \n[303] \"PositionIdentity\"           \"PositionJitter\"            \n[305] \"PositionJitterdodge\"        \"PositionNudge\"             \n[307] \"PositionStack\"              \"presidential\"              \n[309] \"qplot\"                      \"quickplot\"                 \n[311] \"quo\"                        \"quo_name\"                  \n[313] \"quos\"                       \"register_theme_elements\"   \n[315] \"rel\"                        \"remove_missing\"            \n[317] \"render_axes\"                \"render_strips\"             \n[319] \"reset_theme_settings\"       \"resolution\"                \n[321] \"Scale\"                      \"scale_alpha\"               \n[323] \"scale_alpha_binned\"         \"scale_alpha_continuous\"    \n[325] \"scale_alpha_date\"           \"scale_alpha_datetime\"      \n[327] \"scale_alpha_discrete\"       \"scale_alpha_identity\"      \n[329] \"scale_alpha_manual\"         \"scale_alpha_ordinal\"       \n[331] \"scale_color_binned\"         \"scale_color_brewer\"        \n[333] \"scale_color_continuous\"     \"scale_color_date\"          \n[335] \"scale_color_datetime\"       \"scale_color_discrete\"      \n[337] \"scale_color_distiller\"      \"scale_color_fermenter\"     \n[339] \"scale_color_gradient\"       \"scale_color_gradient2\"     \n[341] \"scale_color_gradientn\"      \"scale_color_grey\"          \n[343] \"scale_color_hue\"            \"scale_color_identity\"      \n[345] \"scale_color_manual\"         \"scale_color_ordinal\"       \n[347] \"scale_color_steps\"          \"scale_color_steps2\"        \n[349] \"scale_color_stepsn\"         \"scale_color_viridis_b\"     \n[351] \"scale_color_viridis_c\"      \"scale_color_viridis_d\"     \n[353] \"scale_colour_binned\"        \"scale_colour_brewer\"       \n[355] \"scale_colour_continuous\"    \"scale_colour_date\"         \n[357] \"scale_colour_datetime\"      \"scale_colour_discrete\"     \n[359] \"scale_colour_distiller\"     \"scale_colour_fermenter\"    \n[361] \"scale_colour_gradient\"      \"scale_colour_gradient2\"    \n[363] \"scale_colour_gradientn\"     \"scale_colour_grey\"         \n[365] \"scale_colour_hue\"           \"scale_colour_identity\"     \n[367] \"scale_colour_manual\"        \"scale_colour_ordinal\"      \n[369] \"scale_colour_steps\"         \"scale_colour_steps2\"       \n[371] \"scale_colour_stepsn\"        \"scale_colour_viridis_b\"    \n[373] \"scale_colour_viridis_c\"     \"scale_colour_viridis_d\"    \n[375] \"scale_continuous_identity\"  \"scale_discrete_identity\"   \n[377] \"scale_discrete_manual\"      \"scale_fill_binned\"         \n[379] \"scale_fill_brewer\"          \"scale_fill_continuous\"     \n[381] \"scale_fill_date\"            \"scale_fill_datetime\"       \n[383] \"scale_fill_discrete\"        \"scale_fill_distiller\"      \n[385] \"scale_fill_fermenter\"       \"scale_fill_gradient\"       \n[387] \"scale_fill_gradient2\"       \"scale_fill_gradientn\"      \n[389] \"scale_fill_grey\"            \"scale_fill_hue\"            \n[391] \"scale_fill_identity\"        \"scale_fill_manual\"         \n[393] \"scale_fill_ordinal\"         \"scale_fill_steps\"          \n[395] \"scale_fill_steps2\"          \"scale_fill_stepsn\"         \n[397] \"scale_fill_viridis_b\"       \"scale_fill_viridis_c\"      \n[399] \"scale_fill_viridis_d\"       \"scale_linetype\"            \n[401] \"scale_linetype_binned\"      \"scale_linetype_continuous\" \n[403] \"scale_linetype_discrete\"    \"scale_linetype_identity\"   \n[405] \"scale_linetype_manual\"      \"scale_linewidth\"           \n[407] \"scale_linewidth_binned\"     \"scale_linewidth_continuous\"\n[409] \"scale_linewidth_date\"       \"scale_linewidth_datetime\"  \n[411] \"scale_linewidth_discrete\"   \"scale_linewidth_identity\"  \n[413] \"scale_linewidth_manual\"     \"scale_linewidth_ordinal\"   \n[415] \"scale_radius\"               \"scale_shape\"               \n[417] \"scale_shape_binned\"         \"scale_shape_continuous\"    \n[419] \"scale_shape_discrete\"       \"scale_shape_identity\"      \n[421] \"scale_shape_manual\"         \"scale_shape_ordinal\"       \n[423] \"scale_size\"                 \"scale_size_area\"           \n[425] \"scale_size_binned\"          \"scale_size_binned_area\"    \n[427] \"scale_size_continuous\"      \"scale_size_date\"           \n[429] \"scale_size_datetime\"        \"scale_size_discrete\"       \n[431] \"scale_size_identity\"        \"scale_size_manual\"         \n[433] \"scale_size_ordinal\"         \"scale_type\"                \n[435] \"scale_x_binned\"             \"scale_x_continuous\"        \n[437] \"scale_x_date\"               \"scale_x_datetime\"          \n[439] \"scale_x_discrete\"           \"scale_x_log10\"             \n[441] \"scale_x_reverse\"            \"scale_x_sqrt\"              \n[443] \"scale_x_time\"               \"scale_y_binned\"            \n[445] \"scale_y_continuous\"         \"scale_y_date\"              \n[447] \"scale_y_datetime\"           \"scale_y_discrete\"          \n[449] \"scale_y_log10\"              \"scale_y_reverse\"           \n[451] \"scale_y_sqrt\"               \"scale_y_time\"              \n[453] \"ScaleBinned\"                \"ScaleBinnedPosition\"       \n[455] \"ScaleContinuous\"            \"ScaleContinuousDate\"       \n[457] \"ScaleContinuousDatetime\"    \"ScaleContinuousIdentity\"   \n[459] \"ScaleContinuousPosition\"    \"ScaleDiscrete\"             \n[461] \"ScaleDiscreteIdentity\"      \"ScaleDiscretePosition\"     \n[463] \"seals\"                      \"sec_axis\"                  \n[465] \"set_last_plot\"              \"sf_transform_xy\"           \n[467] \"should_stop\"                \"stage\"                     \n[469] \"standardise_aes_names\"      \"stat\"                      \n[471] \"Stat\"                       \"stat_align\"                \n[473] \"stat_bin\"                   \"stat_bin_2d\"               \n[475] \"stat_bin_hex\"               \"stat_bin2d\"                \n[477] \"stat_binhex\"                \"stat_boxplot\"              \n[479] \"stat_contour\"               \"stat_contour_filled\"       \n[481] \"stat_count\"                 \"stat_density\"              \n[483] \"stat_density_2d\"            \"stat_density_2d_filled\"    \n[485] \"stat_density2d\"             \"stat_density2d_filled\"     \n[487] \"stat_ecdf\"                  \"stat_ellipse\"              \n[489] \"stat_function\"              \"stat_identity\"             \n[491] \"stat_qq\"                    \"stat_qq_line\"              \n[493] \"stat_quantile\"              \"stat_sf\"                   \n[495] \"stat_sf_coordinates\"        \"stat_smooth\"               \n[497] \"stat_spoke\"                 \"stat_sum\"                  \n[499] \"stat_summary\"               \"stat_summary_2d\"           \n[501] \"stat_summary_bin\"           \"stat_summary_hex\"          \n[503] \"stat_summary2d\"             \"stat_unique\"               \n[505] \"stat_ydensity\"              \"StatAlign\"                 \n[507] \"StatBin\"                    \"StatBin2d\"                 \n[509] \"StatBindot\"                 \"StatBinhex\"                \n[511] \"StatBoxplot\"                \"StatContour\"               \n[513] \"StatContourFilled\"          \"StatCount\"                 \n[515] \"StatDensity\"                \"StatDensity2d\"             \n[517] \"StatDensity2dFilled\"        \"StatEcdf\"                  \n[519] \"StatEllipse\"                \"StatFunction\"              \n[521] \"StatIdentity\"               \"StatQq\"                    \n[523] \"StatQqLine\"                 \"StatQuantile\"              \n[525] \"StatSf\"                     \"StatSfCoordinates\"         \n[527] \"StatSmooth\"                 \"StatSum\"                   \n[529] \"StatSummary\"                \"StatSummary2d\"             \n[531] \"StatSummaryBin\"             \"StatSummaryHex\"            \n[533] \"StatUnique\"                 \"StatYdensity\"              \n[535] \"summarise_coord\"            \"summarise_layers\"          \n[537] \"summarise_layout\"           \"sym\"                       \n[539] \"syms\"                       \"theme\"                     \n[541] \"theme_bw\"                   \"theme_classic\"             \n[543] \"theme_dark\"                 \"theme_get\"                 \n[545] \"theme_gray\"                 \"theme_grey\"                \n[547] \"theme_light\"                \"theme_linedraw\"            \n[549] \"theme_minimal\"              \"theme_replace\"             \n[551] \"theme_set\"                  \"theme_test\"                \n[553] \"theme_update\"               \"theme_void\"                \n[555] \"transform_position\"         \"translate_shape_string\"    \n[557] \"txhousing\"                  \"unit\"                      \n[559] \"update_geom_defaults\"       \"update_labels\"             \n[561] \"update_stat_defaults\"       \"vars\"                      \n[563] \"waiver\"                     \"wrap_dims\"                 \n[565] \"xlab\"                       \"xlim\"                      \n[567] \"ylab\"                       \"ylim\"                      \n[569] \"zeroGrob\"                  \n\n\nThe best way to learn about a package is to use its documentation:\n\nMain page\nGet started\nReferences (list of functions and objects from the package)\n\nThere are also great free ressources:\n\nR graphic Cookbook\nData visualization\n\nThere are also great examples…\n\nhttps://r-graph-gallery.com/\n\n… and cool extensions:\n\nhttps://exts.ggplot2.tidyverse.org/gallery/\n\n\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\nWarning: le package 'dplyr' a été compilé avec la version R 4.2.3\n\n\n\nAttachement du package : 'dplyr'\n\n\nLes objets suivants sont masqués depuis 'package:stats':\n\n    filter, lag\n\n\nLes objets suivants sont masqués depuis 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nLet’s create a sequence and plot it against its version plus 1:\n\nx &lt;- 1:10\nqplot(x, x+1)\n\n\n\n\n\n\n\n\nLet’s create a normal distribution of 500 values using rnorm() and plot it as an histogram:\n\ndata &lt;- rnorm(500)    # 500 draws from the standard normal distribution\nqplot(data, geom=\"histogram\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt is possible to manipulate dataset (here called data frames) using base R functionalities. However, the dplyr make this manipulation easier. You need to install it firts with install.package(\"dplyr\") then load the library with library(dplyr):\n\nlibrary(dplyr)\n\nTo import a csv you can use the function read.csv() in base R, but the read_csv() in dplyr is faster and import everything as tibble table (an advanced kind of dataframe):\n\ndf &lt;- read.csv(\"data.csv\")\n\nNote that to have access to the data, you do not need to write the full path, you can simply press the key Tab inside the quotation mark of a\nDisplay a dataframe:\n\ndf\n\n        Date   Open   High    Low  Close   Volume Adj.Close\n1 2012-06-01 569.16 590.00 548.50 584.00 14077000    581.50\n2 2012-05-01 584.90 596.76 522.18 577.73 18827900    575.26\n3 2012-04-02 601.83 644.00 555.00 583.98 28759100    581.48\n4 2012-03-01 548.17 621.45 516.22 599.55 26486000    596.99\n5 2012-02-01 458.41 547.61 453.98 542.44 22001000    540.12\n6 2012-01-03 409.40 458.24 409.00 456.48 12949100    454.53\n\n\nDisplay the size of your dataframe:\n\ndim(df) # this is number of (rows, columns)\n\n[1] 6 7\n\nnrow(df) # Number of rows\n\n[1] 6\n\nncol(df) # Number of cols\n\n[1] 7\n\n\nDisplay the names of columns:\n\ncolnames(df)\n\n[1] \"Date\"      \"Open\"      \"High\"      \"Low\"       \"Close\"     \"Volume\"   \n[7] \"Adj.Close\"\n\n# or\nnames(df)\n\n[1] \"Date\"      \"Open\"      \"High\"      \"Low\"       \"Close\"     \"Volume\"   \n[7] \"Adj.Close\"\n\n\nCreate a new column the base R way:\n\n# compute the average between Open and Close\ndf$mean_value &lt;- (df$Open+df$Close)/2\ndf$mean_value\n\n[1] 576.580 581.315 592.905 573.860 500.425 432.940\n\n\nCreate a new column with Tidyverse (without pipe):\n\n# axis=0 refer to columns \ndf$mean_value &lt;- colMeans(select(df, Open, Close))\ndf$mean_value\n\n[1] 528.6450 557.3633 528.6450 557.3633 528.6450 557.3633\n\n\nR has a super power as a functional programming language. It can use pipes (|&gt; and %&gt;%). Those allows to pass the result of an operation to the next operation and therfore chain multiple operations. It allows to have a more readable code, easier to write and more composable. You can use 2 kinds of pipes:\n\nmagrittr pipe (%&gt;%): Powerful (can do more than the next one), it needs to be installed through a package of the Tidyverse (magrittr, dplyr, rvest, …).\nBase (|&gt;): useful, do not need any libraries\n\nSince we will use the dplyr, we will use magrittr pipe (%&gt;%). No need to write it, simply use the following shortcut Ctrl+Maj+M or Cmd+Maj+M. With a few try, it comes naturally. As said before the pipe use is to pass values through operations. For instance consider the following example printing the value of the variable a:\n\na &lt;- \"12\"\n\n# Normal way\nprint(a)\n\n[1] \"12\"\n\n# With a pipe\na %&gt;% print()\n\n[1] \"12\"\n\n\nThey both give the same result. However the pipe version is longer. The strength of the secon approach appear when we need more than one operation. For instance, imagine converting a to an integer before printing it:\n\n# Normal way\nprint(as.integer(a))\n\n[1] 12\n\n# With pipes\na %&gt;% as.integer() %&gt;% print()\n\n[1] 12\n\n\nThe first one still looks more concise, but it is in fact slower and harder to write. You have to start by the print() statement (the end) and go backward until the beginning which is counter-intuitive. While with the pipe approach you can consider %&gt;% as a “and”. Writting it looks like, “I start with the variable ‘a’ AND I convert it into an integer AND I print it”.\nThis method scale also really well. Lets take a more extreme example. With the following steps:\n\nTranslate “a” into an integer\nCompute the log10\nCompute the square root\nPrint it\n\n\n# Normal way\nprint(sqrt(log10(as.integer(a))))\n\n[1] 1.038836\n\n# with pipes\na %&gt;% \n  as.integer() %&gt;% \n  log10() %&gt;% \n  sqrt() %&gt;% \n  print()\n\n[1] 1.038836\n\n\nNote that in this code we can put expressions following a pipe in the next line for more readability. But the whole code is considered by R as only one line. So, you can run the code from whatever line and it will run the whole expression.\nIt is even more complicated with the normal way and less readable. While with pipe you can read it like sentences connected by “AND”. Generally, when operation start to stack, we desagreggate them into multiple steps like this:\n\na &lt;- as.integer(a)\na &lt;- log10(a)\na &lt;- sqrt(a)\nprint(a)\n\n[1] 1.038836\n\n\nThis approach is more readable. The issue with this approach is that we have changed the value of a multiple time. But if we want to go back in a step, we need to re-run all the step before. It seems like nothing, but in a longer code and more complex, you can easily be overwhelmed and lost track of the state of your variable. You could improve that by storing new values in different variables:\n\na &lt;- 12\n\na1 &lt;- as.integer(a)\na2 &lt;- log10(a1)\na3 &lt;- sqrt(a2)\nprint(a3)\n\n[1] 1.038836\n\n\nBut then we can create unecessary intermediate variables that have only no usage beside storing value that have no use in the rest of the code. Furthermore, both version are slower to write than the pipe version. Another advantage of the pipe function is that we can iteratively write the code and add and remove steps as needed. The when you are satisfied with the result, you can store it in a final variable:\n\nresult &lt;- \n  a %&gt;% \n  as.integer() %&gt;% \n  log10() %&gt;% \n  sqrt() %&gt;% \n  print()\n\n[1] 1.038836\n\n\nThe pipes in dplyr allows to manipulate data frames steps by steps in a readable manner. But function from the tidyverse bring another strength. They always return data frame, makin the iteratino even easier since you keep everything, so modifying a single column won’t stop you to do other manipulation with other columns in the same chain. Let’s take the earlier example from the df dataframe and compute the mean of Open and Close columns.\n\n# compute the average between Open and Close\ndf$mean_value &lt;- (df$Open+df$Close)/2\n\n# With pipe\ndf %&gt;% \n  mutate(mean_value = (Open+Close)/2)\n\n        Date   Open   High    Low  Close   Volume Adj.Close mean_value\n1 2012-06-01 569.16 590.00 548.50 584.00 14077000    581.50    576.580\n2 2012-05-01 584.90 596.76 522.18 577.73 18827900    575.26    581.315\n3 2012-04-02 601.83 644.00 555.00 583.98 28759100    581.48    592.905\n4 2012-03-01 548.17 621.45 516.22 599.55 26486000    596.99    573.860\n5 2012-02-01 458.41 547.61 453.98 542.44 22001000    540.12    500.425\n6 2012-01-03 409.40 458.24 409.00 456.48 12949100    454.53    432.940\n\n\nThe last expression return a data frame and added the new column to the end. Again you are free to put the new result in a new object. Then you can select specific rows:\n\n# Filtering\ndf %&gt;% \n  filter(Close &gt; Open) # keep row when Close is bigger than Open\n\n        Date   Open   High    Low  Close   Volume Adj.Close mean_value\n1 2012-06-01 569.16 590.00 548.50 584.00 14077000    581.50    576.580\n2 2012-03-01 548.17 621.45 516.22 599.55 26486000    596.99    573.860\n3 2012-02-01 458.41 547.61 453.98 542.44 22001000    540.12    500.425\n4 2012-01-03 409.40 458.24 409.00 456.48 12949100    454.53    432.940\n\n\nWe can combine it with the previous operation to chain everything. The new dataset has a new column mean_value and is filterd to keep row when Close is bigger than Open:\n\n# Filtering after mutating\ndf %&gt;% \n  mutate(mean_value = (Open+Close)/2) %&gt;% \n  filter(Close &gt; Open)\n\n        Date   Open   High    Low  Close   Volume Adj.Close mean_value\n1 2012-06-01 569.16 590.00 548.50 584.00 14077000    581.50    576.580\n2 2012-03-01 548.17 621.45 516.22 599.55 26486000    596.99    573.860\n3 2012-02-01 458.41 547.61 453.98 542.44 22001000    540.12    500.425\n4 2012-01-03 409.40 458.24 409.00 456.48 12949100    454.53    432.940\n\n\nYou can display the summary statistic of a given variable using the summary() function.\n\nsummary(df$High)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  458.2   558.2   593.4   576.3   615.3   644.0 \n\n\nYou can do the same with the whole data frame:\n\nsummary(df)\n\n     Date                Open            High            Low       \n Length:6           Min.   :409.4   Min.   :458.2   Min.   :409.0  \n Class :character   1st Qu.:480.9   1st Qu.:558.2   1st Qu.:469.5  \n Mode  :character   Median :558.7   Median :593.4   Median :519.2  \n                    Mean   :528.6   Mean   :576.3   Mean   :500.8  \n                    3rd Qu.:581.0   3rd Qu.:615.3   3rd Qu.:541.9  \n                    Max.   :601.8   Max.   :644.0   Max.   :555.0  \n     Close           Volume           Adj.Close       mean_value   \n Min.   :456.5   Min.   :12949100   Min.   :454.5   Min.   :432.9  \n 1st Qu.:551.3   1st Qu.:15264725   1st Qu.:548.9   1st Qu.:518.8  \n Median :580.9   Median :20414450   Median :578.4   Median :575.2  \n Mean   :557.4   Mean   :20516683   Mean   :555.0   Mean   :543.0  \n 3rd Qu.:584.0   3rd Qu.:25364750   3rd Qu.:581.5   3rd Qu.:580.1  \n Max.   :599.5   Max.   :28759100   Max.   :597.0   Max.   :592.9  \n\n\nYou can also request specific statistics using the corresponding functions:\n\nmean(df$Volume)\n\n[1] 20516683\n\nmedian(df$Volume)\n\n[1] 20414450\n\nmin(df$Volume)\n\n[1] 12949100\n\nmax(df$Volume)\n\n[1] 28759100\n\nquantile(df$Volume)\n\n      0%      25%      50%      75%     100% \n12949100 15264725 20414450 25364750 28759100 \n\nquantile(df$Volume, 0.95)\n\n     95% \n28190825 \n\n\nChaining is useful when we need to answer a specific question without changing the data frame. For instance, you can find the date when Volume was highest:\n\ndf %&gt;% \n  filter(Volume == max(Volume)) %&gt;% \n  select(Date)\n\n        Date\n1 2012-04-02\n\n\nBut sometimes, it is faster to use base R for simple isolated operations. For instance, the Date column in df is note in the date format but in text format. We can change it in one line:\n\n# Check the type of Date\nclass(df$Date)\n\n[1] \"character\"\n\n# Change the type of Date as a date\ndf$Date &lt;- as.Date(df$Date)\n\n# Check the type of Date\nclass(df$Date) \n\n[1] \"Date\"\n\n\nIf you want to extract the specific value and not a data frame, you can use the pull() function instead of select():\n\ndf %&gt;% \n  filter(Volume == max(Volume)) %&gt;% \n  pull(Date)\n\n[1] \"2012-04-02\"\n\n\nPlots are very easy in ggplot2 with qplot()! But there is another notation that is more used, the layered one:\n\n# Easy way\nqplot(Date, Open, data = df, geom = \"line\")\n\n\n\n\n\n\n\n# Layered way\ndf %&gt;% \n  ggplot(aes(x=Date, y=Open)) +\n  geom_line()\n\n\n\n\n\n\n\n\nIt looks longer, but it is more flexible. It works like layers. Here is a short explanation of each part: - ggplot() initiate te figure - aes() map the column to different dimensions (x/y axis, color, line type, size, etc.) - geom_*() create a type of geometry - geom_line() create line using value from x and y\nThe aes() part is quite movable. You can decide to put it in a different place to update the graph:\n\n# Different place, same result\ndf %&gt;% \n  ggplot(aes(x=Date)) +\n  geom_line(aes(y=Open))\n\n\n\n\n\n\n\n\nWe get the same result. The advantage of using such an approach is that we can really be flexible in the parameter that we are using and also the number of layer that we can create:\n\ndf %&gt;% \n  ggplot(aes(x=Date)) + \n  geom_line(aes(y=Open, color=\"Open\")) +\n  geom_line(aes(y=High, color=\"High\")) +\n  geom_line(aes(y=Low, color=\"Low\")) + \n  geom_line(aes(y=Close, color=\"Close\")) +\n  theme_bw() # Add a new theme\n\n\n\n\n\n\n\n\nJust by changing the geom, we can have a large variety of plots. For instance here is a boxplot:\n\ndf %&gt;% \n  ggplot(aes(x=Close)) + \n  geom_boxplot()\n\n\n\n\n\n\n\n\nNote that the parameters are not compulsary as long as we keep theme in the righ order (x then y):\n\n# Parameters\ndf %&gt;% \n  ggplot(aes(x=Close)) + \n  geom_boxplot()\n\n\n\n\n\n\n\n# No parameters\ndf %&gt;% \n  ggplot(aes(Close)) + \n  geom_boxplot()\n\n\n\n\n\n\n\n\nKeeping the same structure, we can have different plots by changing the geom:\n\n# Boxplot\ndf %&gt;% \n  ggplot(aes(Close)) + \n  geom_boxplot()\n\n\n\n\n\n\n\n# Histogram\ndf %&gt;% \n  ggplot(aes(Close)) + \n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n# Density\ndf %&gt;% \n  ggplot(aes(Close)) + \n  geom_density()\n\n\n\n\n\n\n\n\nggplot2 is a whole subject by itself and the Tidyverse ecosystem (dplyr, ggplot2, readr, …) is an even bigger topic. We won’t talk about it here, but in future tutorials."
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/index.html#basic-concepts",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/index.html#basic-concepts",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "",
    "text": "R can be used in different text editors, here are from the most preferred to the least preferred:\n\nRstudio\nPositron\nVisual Studio Code\nJupyter lab/notebook\nSublime text /Atom\nNeovim (only if you are experimented)\n\nR can be run in the following documents:\n\nRscripts (.r)\nRmarkdown notebook (.rmd)\nQuarto notebook (.qmd)\nJupyter notebook (.ipynb)\n\nYou need to install the R kernel for Jupyter notebook uses the following tutorial or you can try the ark kernel.\n\n\nRun a line (in a script or notebook) using Ctrl/Cmd+Enter and run code cells (in a notebook) by using Ctrl/Cmd+Shift+Enter or pressing the “Play” button in the toolbar above on the “Run button” or on the cell.\nTo print out results, simply write print() with parentheses, but it is not compulsory in R to output a result.\n\n# Make \"Hello World!\" appear to the console\nprint(\"Hello World!\") \n\n[1] \"Hello World!\"\n\n\"Hello World!\" # Just the text\n\n[1] \"Hello World!\"\n\n\nLine 1: In R, comments begin with a #. This statement is ignored by the interpreter and serves as documentation for our code. The short cut for this is Ctrl+Maj+C or Cmd+Maj+C.\nLine 2: print(“Hello World!”) To print something on the console, print() function is used. This function also adds a newline after our message is printed (unlike in C). Note that in R you can also use the cat() function for a more readable version:\n\nprint(\"Hello\\nWorld\") # print as it is\n\n[1] \"Hello\\nWorld\"\n\ncat(\"Hello\\nWorld!\") # print a readable version\n\nHello\nWorld!\n\n\nNote: To see the document related to the function or library in:\n\nRStudio: appears automatically\nVScode: appears automatically or Ctrl+Space or hover the function\nJupyter lab/notebook: Shift+Tab.\n\nCurly brackets: Like many programming languages, R does not care about the spaces because it is always bound to brackets (parentheses, brackets or curly brackets). Indentation is only for aesthetic matter and users are free to indent their code following their taste (unlike Python or Nim that can have an indentation error). For example, the indentation of the second print() does not break the code since it is in the brackets:\n\nif (3==3){\n  print(\"TRUE\")\n} else {\n                  print(\"FALSE\")\n}\n\n[1] \"TRUE\"\n\n\nRstudio:\n\nCode is run inside an environment (R version, project and environment). It can always be stopped by pressing the “Stop” button or Ctrl+C shortcut (inside quarto/rmarkdown notebook or a script).\n\nJupyter lab/notebook:\n\nCode is run in a separate process called the Kernel. The Kernel can be interrupted or restarted. Try running the following cell and then hit the “Stop” button in the toolbar above or by clicking the right button on the script in jupyter Lab.\n\nIndexing in R starts at 1, which means that the first element in a sequence has an index of 1, the second element has an index of 2, and so on as expected.\n\n# Vector\nnumber_vector = c(1, 2, 3, 4, 5)\n# List\nnumber_list = list(1, 2, 3, 4, 5)\n\n# Vector's first element\nnumber_vector[1]\n\n[1] 1\n\n# List's first element\nnumber_list[[1]]\n\n[1] 1\n\n\nNote: You need a double bracket to have access to a list element (see last lines of code).\nTips: You can generate a continuous vector between two values using the sign : as follows:\n\n1:10 # 1 to 10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n3:-8 # 3 to -8\n\n [1]  3  2  1  0 -1 -2 -3 -4 -5 -6 -7 -8\n\n\nYou can also decide to use specific steps to get from one value to another using the seq() function:\n\nseq(0, 10, 2) # From 0 to 10 by steps of 2\n\n[1]  0  2  4  6  8 10\n\nseq(-5, 5, 5) # From-5 to 5 by steps of 5\n\n[1] -5  0  5\n\n\nR reserved words\nR has reserved words that you can use as a variable name (except if you surround it by `). Otherwise, R is smart enough to know which element you are talking about even though, function, package and variable names have the same name.\n\n# if, else, repeat, while, function, for, in, next, breaks, TRUE, FALSE, NULL, Inf, NA, NaN"
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/index.html#variables-and-types",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/index.html#variables-and-types",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "",
    "text": "Variable names in R can contain alphanumerical characters a-z, A-Z, 0-9 and some special characters such as _ and .. Variable names cannot start with a number (e.g., 22list), or cannot be R reserved words (see above), or cannot contain a space or -. If your variable does not respect this rule, you can always surround it with ` and it will works.\nVariables can contain different forms such as character (text), integer, or double (float). The variable can contain mix of these different forms.\nThe assignment operators in R are &lt;-, -&gt; and =. R is a dynamically typed language, so we do not need to specify the type of a variable when we create one!\nAssigning a value to a new variable already creates the variable:\n\n# variable assignments\nx = 1.0\ny &lt;- 2\n3L -&gt; z # 3L is an integer\n\nIn the last line, we force the creation of integer by adding L after a number.\nSince value were assigned, the result does not appears. to see it you can just call the variable:\n\nx\n\n[1] 1\n\ny\n\n[1] 2\n\nz\n\n[1] 3\n\n\nYou can also have many of them in a single line using ; to separate them.\n\nx; y; z\n\n[1] 1\n\n\n[1] 2\n\n\n[1] 3\n\n\nAlthough not explicitly specified, a variable do have a type associated with it. The type is derived from the value it was assigned.\n\ntypeof(x) # double\n\n[1] \"double\"\n\ntypeof(y) # double\n\n[1] \"double\"\n\ntypeof(z) # integer\n\n[1] \"integer\"\n\n\nIf we assign a new value to a variable, its type can change.\n\nx = \"cat\"\ntypeof(x)\n\n[1] \"character\"\n\n\nNote: Integer: represents positive or negative whole numbers like 3 or -512. Floating point number (double): represents real numbers like 3.14159 or -2.5. Character string: text.\nIf we try to use a variable that has not yet been defined we get an Error:\n\nh\n\nBut we can assign the value to a new variable from an existing variable:\n\nh &lt;- x\nh\n\n[1] \"cat\""
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/index.html#operators-and-comparisons",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/index.html#operators-and-comparisons",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "",
    "text": "Most operators and comparisons in R work as one would expect:\n\nArithmetic operators +, -, *, /, %/% (integer division), ^ power\n\n\n1 + 2 # Addition\n\n[1] 3\n\n1 - 2 # Substraction\n\n[1] -1\n\n1 * 2 # Multiplication\n\n[1] 2\n\n1 %/% 2 # Modulo\n\n[1] 0\n\n\n\n1.0 + 2.0\n\n[1] 3\n\n1.0 - 2.0\n\n[1] -1\n\n1.0 * 2.0\n\n[1] 2\n\n1.0 %/% 2.0\n\n[1] 0\n\n\n\n# Integer division of float numbers\n3.0 %/% 2.0\n\n[1] 1\n\n\n\n3^2 # 3 power of 2\n\n[1] 9\n\n\n\nThe boolean operators are spelled out as words. They are useful for condition (“if it is true or false”) and filtering data.\n\n\nTRUE\n\n[1] TRUE\n\nFALSE\n\n[1] FALSE\n\n\n\nNote the use of & (and), ! (not) and | (or).\n\n\nTRUE & FALSE # FALSE win\n\n[1] FALSE\n\n\n\n!FALSE # Inverse\n\n[1] TRUE\n\n\n\nTRUE | FALSE # TRUE win\n\n[1] TRUE\n\n\n\nComparison operators can create booleans: &gt;, &lt;, &gt;= (greater or equal), &lt;= (less or equal), == equality.\n\n\n2&gt;1 # Is 2 bigger than 1?\n\n[1] TRUE\n\n2&lt;1 # Is 2 smaller than 1?\n\n[1] FALSE\n\n\n\n2&gt;2 # Is 2 bigger than 2?\n\n[1] FALSE\n\n2&lt;2 # Is 2 smaller than 2?\n\n[1] FALSE\n\n\n\n2&gt;=2 # Is 2 bigger than or equal 2?\n\n[1] TRUE\n\n2&lt;=2 # Is 2 smaller than or equal to 2?\n\n[1] TRUE\n\n\n\nNote:\n\nand (&): means that both condition most be true to return TRUE\nor (|): means that least one condition need to be true tu return TRUE\n\n\n\n2&gt;1 & 3&gt;4 # is 2 bigger than 1 AND 3 bigger than 4?\n\n[1] FALSE\n\n2&gt;1 | 3&gt;4 # is 2 bigger than 1 OR 3 bigger than 4?\n\n[1] TRUE\n\n\nIt works with vectors:\n\nc(0, 5, 10, 15) &gt; 2\n\n[1] FALSE  TRUE  TRUE  TRUE\n\n\nSo it is possible to filter vectors\n\nvector_to_filter &lt;- c(3, 6, 9, 12)\n\nvector_to_filter[vector_to_filter &gt; 5] # Keep all the value bigger than 5\n\n[1]  6  9 12\n\n\nThere are other\n\n# equality \nsetequal(c(1,2,3), c(3,4,5))\n\n[1] FALSE\n\n# are the elements in the left in the vector on the right?\nc(1,2,3) %in% c(3,4,5)\n\n[1] FALSE FALSE  TRUE"
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/index.html#compound-types-strings-list-sets-tuples-and-dictionaries",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/index.html#compound-types-strings-list-sets-tuples-and-dictionaries",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "",
    "text": "Strings are the variable type that is used for storing text messages. To declare string variables, include quotes; either single or double. E.g:\n\ns = \"Hello world\"\ntypeof(s)\n\n[1] \"character\"\n\n\nIn R, characters are one element of a vector. To collect the length of a character, we need to use a specific function (since length() only return on 1 for characters).\n\n# classic lenght\nnchar(s)\n\n[1] 11\n\n# print the length of a string (i.e. the number of characters)\nlength(s)\n\n[1] 1\n\n\n\n# replace a substring in a string with somethign else\ns2 = gsub(s, \"world\", \"test\")\ns2\n\n[1] \"test\"\n\n\nWe can index a character in a string using [] after the function strsplit(character, \"\")[[1]][1]:\n\ns3 = strsplit(s, \"\")[[1]]\ns3\n\n [1] \"H\" \"e\" \"l\" \"l\" \"o\" \" \" \"w\" \"o\" \"r\" \"l\" \"d\"\n\ns3[1]\n\n[1] \"H\"\n\n\nNote that in R head() allows to do an ordered selection (like []) while tail() do the same backwards.\n\nhead(s3, 3)\n\n[1] \"H\" \"e\" \"l\"\n\ntail(s3, 1)\n\n[1] \"d\"\n\n\nWe can extract a part of a string using the syntax [start:stop], which extracts characters between index start and stop:\n\ns3[2:4]\n\n[1] \"e\" \"l\" \"l\"\n\n\n\n\n\nLists are very similar to vector, except that each element can be of any type.\nThe syntax for creating lists in R is list(...):\n\nstring_list = list('spring', 'summer', 'winter', 'fall')\nstring_list\n\n[[1]]\n[1] \"spring\"\n\n[[2]]\n[1] \"summer\"\n\n[[3]]\n[1] \"winter\"\n\n[[4]]\n[1] \"fall\"\n\n\n\ninteger_list = list(12, 3, 5, 3, 9, 6, 2)\ninteger_list\n\n[[1]]\n[1] 12\n\n[[2]]\n[1] 3\n\n[[3]]\n[1] 5\n\n[[4]]\n[1] 3\n\n[[5]]\n[1] 9\n\n[[6]]\n[1] 6\n\n[[7]]\n[1] 2\n\n\n\nfloat_list = list(2.3, 4.6, 3.7, 8.3)\nfloat_list\n\n[[1]]\n[1] 2.3\n\n[[2]]\n[1] 4.6\n\n[[3]]\n[1] 3.7\n\n[[4]]\n[1] 8.3\n\n\nTo access variables in a list:\n\nstring_list &lt;- list(\"a\", \"b\", \"c\", \"d\")\nstring_list[[1]] # note that indexing starts at 1 in R!\n\n[1] \"a\"\n\n\n\n\n\n# create a new empty list\nl &lt;- list()\n\n# add elements using `append`\nl &lt;- append(l, \"A\")\nl &lt;- append(l, \"d\")\n\nl\n\n[[1]]\n[1] \"A\"\n\n[[2]]\n[1] \"d\"\n\n\nWe can modify lists by assigning new values to elements in the list. In technical jargon, lists are mutable.\n\nl[[2]] &lt;- \"p\"\n\nl\n\n[[1]]\n[1] \"A\"\n\n[[2]]\n[1] \"p\"\n\n\nWe can insert an element at a specific index using append\n\nl &lt;- append(l, \"i\", 0)\nl &lt;- append(l, \"n\", 1)\nl &lt;- append(l, \"s\", 2)\nl &lt;- append(l, \"e\", 3)\nl &lt;- append(l, \"r\", 4)\nl &lt;- append(l, \"t\", 5)\n\nl\n\n[[1]]\n[1] \"i\"\n\n[[2]]\n[1] \"n\"\n\n[[3]]\n[1] \"s\"\n\n[[4]]\n[1] \"e\"\n\n[[5]]\n[1] \"r\"\n\n[[6]]\n[1] \"t\"\n\n[[7]]\n[1] \"A\"\n\n[[8]]\n[1] \"p\"\n\n\nRemove elements with remove\n\nl &lt;- l[l != \"A\"]\n\nl\n\n[[1]]\n[1] \"i\"\n\n[[2]]\n[1] \"n\"\n\n[[3]]\n[1] \"s\"\n\n[[4]]\n[1] \"e\"\n\n[[5]]\n[1] \"r\"\n\n[[6]]\n[1] \"t\"\n\n[[7]]\n[1] \"p\"\n\n\n\n\n\n\nLists are not the best method for quick and concise calculations or operations. Vectors are more appropriate. This is because vectors always have the same type, so calculations are easier for the computer (which can anticipate all the steps and therefore optimize). Lists come in handy when we want to have a collection of elements that have different types and names.\nList are also like vectors, except that each element is a key-value pair. The syntax for lists is list(key1 = value1, ...).\n\nstudent &lt;- list(hair = c(\"brown\", \"pink\"), \n                eye = \"black\", \n                height = 172)\n\nclass(student)\n\n[1] \"list\"\n\nstudent\n\n$hair\n[1] \"brown\" \"pink\" \n\n$eye\n[1] \"black\"\n\n$height\n[1] 172\n\n\nTo access keys:\n\nnames(student)\n\n[1] \"hair\"   \"eye\"    \"height\"\n\n\nTo access values of the keys:\n\nunlist(student)\n\n  hair1   hair2     eye  height \n\"brown\"  \"pink\" \"black\"   \"172\" \n\n\nTo access an item of a key:\n\nstudent$eye\n\n[1] \"black\"\n\n# or\nstudent[[\"eye\"]]\n\n[1] \"black\"\n\n\nTo change the value of a key:\n\nstudent$eye &lt;- 'blue'\n# or\nstudent[[\"eye\"]]\n\n[1] \"blue\"\n\n\nTo add a new entry:\n\nstudent$nationality &lt;- 'Spanish'\n# or\nstudent[[\"nationality\"]] &lt;- 'Spanish'\n\n\nstudent\n\n$hair\n[1] \"brown\" \"pink\" \n\n$eye\n[1] \"blue\"\n\n$height\n[1] 172\n\n$nationality\n[1] \"Spanish\"\n\n\n\n\n\nYou can take an user input using using the readline() function. Not that if you are using it in a chunk you still have to interact with the code in the console:\n\nRun the chunk\nGo to the console\nAnswer the question “what is you names:” with a text\nGo back to the chunk\n\n\n# Input \nname &lt;- readline(prompt=\"What is your name: \")\npaste(\"My name is\", name)"
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/index.html#control-flow",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/index.html#control-flow",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "",
    "text": "You can execute your code conditionally by dividing it into different parts and setting conditions for running each specific part.\nThe R syntax for conditional execution of code use the keywords if, else if, else:\n\nYou can play with this by changin the value of statement1 and statement2 by TRUE or FALSE\n\n\nstatement1 &lt;- FALSE\nstatement2 &lt;- FALSE\n\nif (statement1) { # \"if statement1 is TRUE\" do the following:\n    \"statement1 is TRUE\"\n} else if (statement2) { # \"otherwise if statement2 is TRUE\" do the following:\"\n    \"statement2 is TRUE\"\n} else { # \"therwise do the following:\"\n    \"statement1 and statement2 are FALSE\"\n}\n\n[1] \"statement1 and statement2 are FALSE\""
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/index.html#loops",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/index.html#loops",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "",
    "text": "In R, loops can be programmed in a number of different ways. The most common is the for loop, which is used together with iterable objects, such as lists. The basic syntax is:\n\n\n\nfor (x in 1:3) {# for each element of the list print it\n    print(x)\n}\n\n[1] 1\n[1] 2\n[1] 3\n\n\nNote that in this case, the function print() is necessary.\nTo iterate over key-value pairs of a list:\n\nfor (key in names(student)) { # for each key of the list print \"[key] = [value]\"\n    print(paste(key, \"=\", student[[key]]))\n}\n\n[1] \"hair = brown\" \"hair = pink\" \n[1] \"eye = blue\"\n[1] \"height = 172\"\n[1] \"nationality = Spanish\"\n\n\n\n\n\nInstead of passing each element of a list, it is possible to set the condition that a code is executed as long as a specific condition is met. You can run the whole chunk to see it in action:\n\ni &lt;- 0\n\nwhile (i &lt; 5) { # \"while i is smaller than 5 run the following code:\"\n    print(i) \n    i &lt;- i + 1 \n}\n\n[1] 0\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n\n\"done\" # Appears if done\n\n[1] \"done\"\n\n\nNote that the print(\"done\") statement is not part of the while loop body because of the difference in indentation.\n\n# example of for loop and if statement: \n# for each value in the list \"integer_list\" print a value that is greater or equal to 7\ninteger_list &lt;- c(5, 7, 9, 3, 8)\n\nfor (x in integer_list) {\n    if (x &gt;= 7) { \n        print(x)\n    }\n}\n\n[1] 7\n[1] 9\n[1] 8"
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/index.html#functions",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/index.html#functions",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "",
    "text": "A function in R is defined using the keyword function, followed by a function name, a signature within parentheses (), and a curly brace {. The following code, with one additional level of indentation, is the function body. It return nothing but the function is available now.\n\nsquare &lt;- function(x) { # for a given value x do the following:\n    return(x^2) # Return the square of x.\n}\n\nYou can use your new function on any value:\n\nsquare(4)\n\n[1] 16\n\nsquare(10)\n\n[1] 100\n\n\nNote that you are not forced to use the return statement in the function, R will return the last value automatically:\n\nsquare &lt;- function(x) { # for a given value x do the following:\n    x^2 # Return the square of x.\n}\n\nsquare(4)\n\n[1] 16\n\n\nYou can even make it shorter by removing the brackets and putting everything in a single line:\n\nsquare &lt;- function(x) x^2\n\nsquare(4)\n\n[1] 16"
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/index.html#modules",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/index.html#modules",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "",
    "text": "Most of the functionality in R is provided by packages. The R Standard Library is a large collection of packages that provides cross-platform implementations of common facilities such as access to the operating system, file I/O, string management, network communication, and much more.\nTo use a package in an R program it first has to be installed. A quickest way is to do it here using the install.packages statement. For example, to install the package ggplot2, which is a useful package for plots, we can do:\n\ninstall.packages(\"ggplot2\")\n\nTo use a package in an R program it first has to be imported. A package can be imported using the library statement. For example, to import the package ggplot2, which contains many standard plotting functions, we can do:\n\nlibrary(ggplot2)\n\nWarning: le package 'ggplot2' a été compilé avec la version R 4.2.3\n\n\nThis includes the whole package and makes it available for use later in the program.\nNote that R can creat plot without packages. But ggplot2 bring beautiful and modular graphs. Let’s try it! For instance, R have built-in datasets that we can use. For instance we can invoke the cars dataset by simply calling it if it is for a short usecase:\n\ncars\n\n   speed dist\n1      4    2\n2      4   10\n3      7    4\n4      7   22\n5      8   16\n6      9   10\n7     10   18\n8     10   26\n9     10   34\n10    11   17\n11    11   28\n12    12   14\n13    12   20\n14    12   24\n15    12   28\n16    13   26\n17    13   34\n18    13   34\n19    13   46\n20    14   26\n21    14   36\n22    14   60\n23    14   80\n24    15   20\n25    15   26\n26    15   54\n27    16   32\n28    16   40\n29    17   32\n30    17   40\n31    17   50\n32    18   42\n33    18   56\n34    18   76\n35    18   84\n36    19   36\n37    19   46\n38    19   68\n39    20   32\n40    20   48\n41    20   52\n42    20   56\n43    20   64\n44    22   66\n45    23   54\n46    24   70\n47    24   92\n48    24   93\n49    24  120\n50    25   85\n\n\nThen we can then plot it using the plot() function:\n\nplot(cars)\n\n\n\n\n\n\n\n\nggplot allow to do the same:\n\nqplot(speed, dist, data = cars)\n\nWarning: `qplot()` was deprecated in ggplot2 3.4.0.\n\n\n\n\n\n\n\n\n\nOnce a package is imported, we can list the symbols it provides using the ls function:\n\nls(\"package:ggplot2\")\n\n  [1] \"%+%\"                        \"%+replace%\"                \n  [3] \"aes\"                        \"aes_\"                      \n  [5] \"aes_all\"                    \"aes_auto\"                  \n  [7] \"aes_q\"                      \"aes_string\"                \n  [9] \"after_scale\"                \"after_stat\"                \n [11] \"alpha\"                      \"annotate\"                  \n [13] \"annotation_custom\"          \"annotation_logticks\"       \n [15] \"annotation_map\"             \"annotation_raster\"         \n [17] \"arrow\"                      \"as_label\"                  \n [19] \"as_labeller\"                \"autolayer\"                 \n [21] \"autoplot\"                   \"AxisSecondary\"             \n [23] \"benchplot\"                  \"binned_scale\"              \n [25] \"borders\"                    \"calc_element\"              \n [27] \"check_device\"               \"combine_vars\"              \n [29] \"continuous_scale\"           \"Coord\"                     \n [31] \"coord_cartesian\"            \"coord_equal\"               \n [33] \"coord_fixed\"                \"coord_flip\"                \n [35] \"coord_map\"                  \"coord_munch\"               \n [37] \"coord_polar\"                \"coord_quickmap\"            \n [39] \"coord_radial\"               \"coord_sf\"                  \n [41] \"coord_trans\"                \"CoordCartesian\"            \n [43] \"CoordFixed\"                 \"CoordFlip\"                 \n [45] \"CoordMap\"                   \"CoordPolar\"                \n [47] \"CoordQuickmap\"              \"CoordRadial\"               \n [49] \"CoordSf\"                    \"CoordTrans\"                \n [51] \"cut_interval\"               \"cut_number\"                \n [53] \"cut_width\"                  \"datetime_scale\"            \n [55] \"derive\"                     \"diamonds\"                  \n [57] \"discrete_scale\"             \"draw_key_abline\"           \n [59] \"draw_key_blank\"             \"draw_key_boxplot\"          \n [61] \"draw_key_crossbar\"          \"draw_key_dotplot\"          \n [63] \"draw_key_label\"             \"draw_key_linerange\"        \n [65] \"draw_key_path\"              \"draw_key_point\"            \n [67] \"draw_key_pointrange\"        \"draw_key_polygon\"          \n [69] \"draw_key_rect\"              \"draw_key_smooth\"           \n [71] \"draw_key_text\"              \"draw_key_timeseries\"       \n [73] \"draw_key_vline\"             \"draw_key_vpath\"            \n [75] \"dup_axis\"                   \"economics\"                 \n [77] \"economics_long\"             \"el_def\"                    \n [79] \"element_blank\"              \"element_grob\"              \n [81] \"element_line\"               \"element_rect\"              \n [83] \"element_render\"             \"element_text\"              \n [85] \"enexpr\"                     \"enexprs\"                   \n [87] \"enquo\"                      \"enquos\"                    \n [89] \"ensym\"                      \"ensyms\"                    \n [91] \"expand_limits\"              \"expand_scale\"              \n [93] \"expansion\"                  \"expr\"                      \n [95] \"Facet\"                      \"facet_grid\"                \n [97] \"facet_null\"                 \"facet_wrap\"                \n [99] \"FacetGrid\"                  \"FacetNull\"                 \n[101] \"FacetWrap\"                  \"faithfuld\"                 \n[103] \"fill_alpha\"                 \"find_panel\"                \n[105] \"flip_data\"                  \"flipped_names\"             \n[107] \"fortify\"                    \"Geom\"                      \n[109] \"geom_abline\"                \"geom_area\"                 \n[111] \"geom_bar\"                   \"geom_bin_2d\"               \n[113] \"geom_bin2d\"                 \"geom_blank\"                \n[115] \"geom_boxplot\"               \"geom_col\"                  \n[117] \"geom_contour\"               \"geom_contour_filled\"       \n[119] \"geom_count\"                 \"geom_crossbar\"             \n[121] \"geom_curve\"                 \"geom_density\"              \n[123] \"geom_density_2d\"            \"geom_density_2d_filled\"    \n[125] \"geom_density2d\"             \"geom_density2d_filled\"     \n[127] \"geom_dotplot\"               \"geom_errorbar\"             \n[129] \"geom_errorbarh\"             \"geom_freqpoly\"             \n[131] \"geom_function\"              \"geom_hex\"                  \n[133] \"geom_histogram\"             \"geom_hline\"                \n[135] \"geom_jitter\"                \"geom_label\"                \n[137] \"geom_line\"                  \"geom_linerange\"            \n[139] \"geom_map\"                   \"geom_path\"                 \n[141] \"geom_point\"                 \"geom_pointrange\"           \n[143] \"geom_polygon\"               \"geom_qq\"                   \n[145] \"geom_qq_line\"               \"geom_quantile\"             \n[147] \"geom_raster\"                \"geom_rect\"                 \n[149] \"geom_ribbon\"                \"geom_rug\"                  \n[151] \"geom_segment\"               \"geom_sf\"                   \n[153] \"geom_sf_label\"              \"geom_sf_text\"              \n[155] \"geom_smooth\"                \"geom_spoke\"                \n[157] \"geom_step\"                  \"geom_text\"                 \n[159] \"geom_tile\"                  \"geom_violin\"               \n[161] \"geom_vline\"                 \"GeomAbline\"                \n[163] \"GeomAnnotationMap\"          \"GeomArea\"                  \n[165] \"GeomBar\"                    \"GeomBlank\"                 \n[167] \"GeomBoxplot\"                \"GeomCol\"                   \n[169] \"GeomContour\"                \"GeomContourFilled\"         \n[171] \"GeomCrossbar\"               \"GeomCurve\"                 \n[173] \"GeomCustomAnn\"              \"GeomDensity\"               \n[175] \"GeomDensity2d\"              \"GeomDensity2dFilled\"       \n[177] \"GeomDotplot\"                \"GeomErrorbar\"              \n[179] \"GeomErrorbarh\"              \"GeomFunction\"              \n[181] \"GeomHex\"                    \"GeomHline\"                 \n[183] \"GeomLabel\"                  \"GeomLine\"                  \n[185] \"GeomLinerange\"              \"GeomLogticks\"              \n[187] \"GeomMap\"                    \"GeomPath\"                  \n[189] \"GeomPoint\"                  \"GeomPointrange\"            \n[191] \"GeomPolygon\"                \"GeomQuantile\"              \n[193] \"GeomRaster\"                 \"GeomRasterAnn\"             \n[195] \"GeomRect\"                   \"GeomRibbon\"                \n[197] \"GeomRug\"                    \"GeomSegment\"               \n[199] \"GeomSf\"                     \"GeomSmooth\"                \n[201] \"GeomSpoke\"                  \"GeomStep\"                  \n[203] \"GeomText\"                   \"GeomTile\"                  \n[205] \"GeomViolin\"                 \"GeomVline\"                 \n[207] \"get_alt_text\"               \"get_element_tree\"          \n[209] \"get_guide_data\"             \"gg_dep\"                    \n[211] \"ggplot\"                     \"ggplot_add\"                \n[213] \"ggplot_build\"               \"ggplot_gtable\"             \n[215] \"ggplotGrob\"                 \"ggproto\"                   \n[217] \"ggproto_parent\"             \"ggsave\"                    \n[219] \"ggtitle\"                    \"Guide\"                     \n[221] \"guide_axis\"                 \"guide_axis_logticks\"       \n[223] \"guide_axis_stack\"           \"guide_axis_theta\"          \n[225] \"guide_bins\"                 \"guide_colorbar\"            \n[227] \"guide_colorsteps\"           \"guide_colourbar\"           \n[229] \"guide_coloursteps\"          \"guide_custom\"              \n[231] \"guide_gengrob\"              \"guide_geom\"                \n[233] \"guide_legend\"               \"guide_merge\"               \n[235] \"guide_none\"                 \"guide_train\"               \n[237] \"guide_transform\"            \"GuideAxis\"                 \n[239] \"GuideAxisLogticks\"          \"GuideAxisStack\"            \n[241] \"GuideAxisTheta\"             \"GuideBins\"                 \n[243] \"GuideColourbar\"             \"GuideColoursteps\"          \n[245] \"GuideCustom\"                \"GuideLegend\"               \n[247] \"GuideNone\"                  \"GuideOld\"                  \n[249] \"guides\"                     \"has_flipped_aes\"           \n[251] \"is.Coord\"                   \"is.facet\"                  \n[253] \"is.ggplot\"                  \"is.ggproto\"                \n[255] \"is.theme\"                   \"label_both\"                \n[257] \"label_bquote\"               \"label_context\"             \n[259] \"label_parsed\"               \"label_value\"               \n[261] \"label_wrap_gen\"             \"labeller\"                  \n[263] \"labs\"                       \"last_plot\"                 \n[265] \"layer\"                      \"layer_data\"                \n[267] \"layer_grob\"                 \"layer_scales\"              \n[269] \"layer_sf\"                   \"Layout\"                    \n[271] \"lims\"                       \"luv_colours\"               \n[273] \"map_data\"                   \"margin\"                    \n[275] \"max_height\"                 \"max_width\"                 \n[277] \"mean_cl_boot\"               \"mean_cl_normal\"            \n[279] \"mean_sdl\"                   \"mean_se\"                   \n[281] \"median_hilow\"               \"merge_element\"             \n[283] \"midwest\"                    \"mpg\"                       \n[285] \"msleep\"                     \"new_guide\"                 \n[287] \"old_guide\"                  \"panel_cols\"                \n[289] \"panel_rows\"                 \"pattern_alpha\"             \n[291] \"Position\"                   \"position_dodge\"            \n[293] \"position_dodge2\"            \"position_fill\"             \n[295] \"position_identity\"          \"position_jitter\"           \n[297] \"position_jitterdodge\"       \"position_nudge\"            \n[299] \"position_stack\"             \"PositionDodge\"             \n[301] \"PositionDodge2\"             \"PositionFill\"              \n[303] \"PositionIdentity\"           \"PositionJitter\"            \n[305] \"PositionJitterdodge\"        \"PositionNudge\"             \n[307] \"PositionStack\"              \"presidential\"              \n[309] \"qplot\"                      \"quickplot\"                 \n[311] \"quo\"                        \"quo_name\"                  \n[313] \"quos\"                       \"register_theme_elements\"   \n[315] \"rel\"                        \"remove_missing\"            \n[317] \"render_axes\"                \"render_strips\"             \n[319] \"reset_theme_settings\"       \"resolution\"                \n[321] \"Scale\"                      \"scale_alpha\"               \n[323] \"scale_alpha_binned\"         \"scale_alpha_continuous\"    \n[325] \"scale_alpha_date\"           \"scale_alpha_datetime\"      \n[327] \"scale_alpha_discrete\"       \"scale_alpha_identity\"      \n[329] \"scale_alpha_manual\"         \"scale_alpha_ordinal\"       \n[331] \"scale_color_binned\"         \"scale_color_brewer\"        \n[333] \"scale_color_continuous\"     \"scale_color_date\"          \n[335] \"scale_color_datetime\"       \"scale_color_discrete\"      \n[337] \"scale_color_distiller\"      \"scale_color_fermenter\"     \n[339] \"scale_color_gradient\"       \"scale_color_gradient2\"     \n[341] \"scale_color_gradientn\"      \"scale_color_grey\"          \n[343] \"scale_color_hue\"            \"scale_color_identity\"      \n[345] \"scale_color_manual\"         \"scale_color_ordinal\"       \n[347] \"scale_color_steps\"          \"scale_color_steps2\"        \n[349] \"scale_color_stepsn\"         \"scale_color_viridis_b\"     \n[351] \"scale_color_viridis_c\"      \"scale_color_viridis_d\"     \n[353] \"scale_colour_binned\"        \"scale_colour_brewer\"       \n[355] \"scale_colour_continuous\"    \"scale_colour_date\"         \n[357] \"scale_colour_datetime\"      \"scale_colour_discrete\"     \n[359] \"scale_colour_distiller\"     \"scale_colour_fermenter\"    \n[361] \"scale_colour_gradient\"      \"scale_colour_gradient2\"    \n[363] \"scale_colour_gradientn\"     \"scale_colour_grey\"         \n[365] \"scale_colour_hue\"           \"scale_colour_identity\"     \n[367] \"scale_colour_manual\"        \"scale_colour_ordinal\"      \n[369] \"scale_colour_steps\"         \"scale_colour_steps2\"       \n[371] \"scale_colour_stepsn\"        \"scale_colour_viridis_b\"    \n[373] \"scale_colour_viridis_c\"     \"scale_colour_viridis_d\"    \n[375] \"scale_continuous_identity\"  \"scale_discrete_identity\"   \n[377] \"scale_discrete_manual\"      \"scale_fill_binned\"         \n[379] \"scale_fill_brewer\"          \"scale_fill_continuous\"     \n[381] \"scale_fill_date\"            \"scale_fill_datetime\"       \n[383] \"scale_fill_discrete\"        \"scale_fill_distiller\"      \n[385] \"scale_fill_fermenter\"       \"scale_fill_gradient\"       \n[387] \"scale_fill_gradient2\"       \"scale_fill_gradientn\"      \n[389] \"scale_fill_grey\"            \"scale_fill_hue\"            \n[391] \"scale_fill_identity\"        \"scale_fill_manual\"         \n[393] \"scale_fill_ordinal\"         \"scale_fill_steps\"          \n[395] \"scale_fill_steps2\"          \"scale_fill_stepsn\"         \n[397] \"scale_fill_viridis_b\"       \"scale_fill_viridis_c\"      \n[399] \"scale_fill_viridis_d\"       \"scale_linetype\"            \n[401] \"scale_linetype_binned\"      \"scale_linetype_continuous\" \n[403] \"scale_linetype_discrete\"    \"scale_linetype_identity\"   \n[405] \"scale_linetype_manual\"      \"scale_linewidth\"           \n[407] \"scale_linewidth_binned\"     \"scale_linewidth_continuous\"\n[409] \"scale_linewidth_date\"       \"scale_linewidth_datetime\"  \n[411] \"scale_linewidth_discrete\"   \"scale_linewidth_identity\"  \n[413] \"scale_linewidth_manual\"     \"scale_linewidth_ordinal\"   \n[415] \"scale_radius\"               \"scale_shape\"               \n[417] \"scale_shape_binned\"         \"scale_shape_continuous\"    \n[419] \"scale_shape_discrete\"       \"scale_shape_identity\"      \n[421] \"scale_shape_manual\"         \"scale_shape_ordinal\"       \n[423] \"scale_size\"                 \"scale_size_area\"           \n[425] \"scale_size_binned\"          \"scale_size_binned_area\"    \n[427] \"scale_size_continuous\"      \"scale_size_date\"           \n[429] \"scale_size_datetime\"        \"scale_size_discrete\"       \n[431] \"scale_size_identity\"        \"scale_size_manual\"         \n[433] \"scale_size_ordinal\"         \"scale_type\"                \n[435] \"scale_x_binned\"             \"scale_x_continuous\"        \n[437] \"scale_x_date\"               \"scale_x_datetime\"          \n[439] \"scale_x_discrete\"           \"scale_x_log10\"             \n[441] \"scale_x_reverse\"            \"scale_x_sqrt\"              \n[443] \"scale_x_time\"               \"scale_y_binned\"            \n[445] \"scale_y_continuous\"         \"scale_y_date\"              \n[447] \"scale_y_datetime\"           \"scale_y_discrete\"          \n[449] \"scale_y_log10\"              \"scale_y_reverse\"           \n[451] \"scale_y_sqrt\"               \"scale_y_time\"              \n[453] \"ScaleBinned\"                \"ScaleBinnedPosition\"       \n[455] \"ScaleContinuous\"            \"ScaleContinuousDate\"       \n[457] \"ScaleContinuousDatetime\"    \"ScaleContinuousIdentity\"   \n[459] \"ScaleContinuousPosition\"    \"ScaleDiscrete\"             \n[461] \"ScaleDiscreteIdentity\"      \"ScaleDiscretePosition\"     \n[463] \"seals\"                      \"sec_axis\"                  \n[465] \"set_last_plot\"              \"sf_transform_xy\"           \n[467] \"should_stop\"                \"stage\"                     \n[469] \"standardise_aes_names\"      \"stat\"                      \n[471] \"Stat\"                       \"stat_align\"                \n[473] \"stat_bin\"                   \"stat_bin_2d\"               \n[475] \"stat_bin_hex\"               \"stat_bin2d\"                \n[477] \"stat_binhex\"                \"stat_boxplot\"              \n[479] \"stat_contour\"               \"stat_contour_filled\"       \n[481] \"stat_count\"                 \"stat_density\"              \n[483] \"stat_density_2d\"            \"stat_density_2d_filled\"    \n[485] \"stat_density2d\"             \"stat_density2d_filled\"     \n[487] \"stat_ecdf\"                  \"stat_ellipse\"              \n[489] \"stat_function\"              \"stat_identity\"             \n[491] \"stat_qq\"                    \"stat_qq_line\"              \n[493] \"stat_quantile\"              \"stat_sf\"                   \n[495] \"stat_sf_coordinates\"        \"stat_smooth\"               \n[497] \"stat_spoke\"                 \"stat_sum\"                  \n[499] \"stat_summary\"               \"stat_summary_2d\"           \n[501] \"stat_summary_bin\"           \"stat_summary_hex\"          \n[503] \"stat_summary2d\"             \"stat_unique\"               \n[505] \"stat_ydensity\"              \"StatAlign\"                 \n[507] \"StatBin\"                    \"StatBin2d\"                 \n[509] \"StatBindot\"                 \"StatBinhex\"                \n[511] \"StatBoxplot\"                \"StatContour\"               \n[513] \"StatContourFilled\"          \"StatCount\"                 \n[515] \"StatDensity\"                \"StatDensity2d\"             \n[517] \"StatDensity2dFilled\"        \"StatEcdf\"                  \n[519] \"StatEllipse\"                \"StatFunction\"              \n[521] \"StatIdentity\"               \"StatQq\"                    \n[523] \"StatQqLine\"                 \"StatQuantile\"              \n[525] \"StatSf\"                     \"StatSfCoordinates\"         \n[527] \"StatSmooth\"                 \"StatSum\"                   \n[529] \"StatSummary\"                \"StatSummary2d\"             \n[531] \"StatSummaryBin\"             \"StatSummaryHex\"            \n[533] \"StatUnique\"                 \"StatYdensity\"              \n[535] \"summarise_coord\"            \"summarise_layers\"          \n[537] \"summarise_layout\"           \"sym\"                       \n[539] \"syms\"                       \"theme\"                     \n[541] \"theme_bw\"                   \"theme_classic\"             \n[543] \"theme_dark\"                 \"theme_get\"                 \n[545] \"theme_gray\"                 \"theme_grey\"                \n[547] \"theme_light\"                \"theme_linedraw\"            \n[549] \"theme_minimal\"              \"theme_replace\"             \n[551] \"theme_set\"                  \"theme_test\"                \n[553] \"theme_update\"               \"theme_void\"                \n[555] \"transform_position\"         \"translate_shape_string\"    \n[557] \"txhousing\"                  \"unit\"                      \n[559] \"update_geom_defaults\"       \"update_labels\"             \n[561] \"update_stat_defaults\"       \"vars\"                      \n[563] \"waiver\"                     \"wrap_dims\"                 \n[565] \"xlab\"                       \"xlim\"                      \n[567] \"ylab\"                       \"ylim\"                      \n[569] \"zeroGrob\"                  \n\n\nThe best way to learn about a package is to use its documentation:\n\nMain page\nGet started\nReferences (list of functions and objects from the package)\n\nThere are also great free ressources:\n\nR graphic Cookbook\nData visualization\n\nThere are also great examples…\n\nhttps://r-graph-gallery.com/\n\n… and cool extensions:\n\nhttps://exts.ggplot2.tidyverse.org/gallery/\n\n\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\nWarning: le package 'dplyr' a été compilé avec la version R 4.2.3\n\n\n\nAttachement du package : 'dplyr'\n\n\nLes objets suivants sont masqués depuis 'package:stats':\n\n    filter, lag\n\n\nLes objets suivants sont masqués depuis 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nLet’s create a sequence and plot it against its version plus 1:\n\nx &lt;- 1:10\nqplot(x, x+1)\n\n\n\n\n\n\n\n\nLet’s create a normal distribution of 500 values using rnorm() and plot it as an histogram:\n\ndata &lt;- rnorm(500)    # 500 draws from the standard normal distribution\nqplot(data, geom=\"histogram\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "beginner/NCCR_MWQTA_2024_R_Day1/index.html#manipulating-data-with-dplyr",
    "href": "beginner/NCCR_MWQTA_2024_R_Day1/index.html#manipulating-data-with-dplyr",
    "title": "Methods Workshop in Quantitative Text Analysis Translated in R - Day 1",
    "section": "",
    "text": "It is possible to manipulate dataset (here called data frames) using base R functionalities. However, the dplyr make this manipulation easier. You need to install it firts with install.package(\"dplyr\") then load the library with library(dplyr):\n\nlibrary(dplyr)\n\nTo import a csv you can use the function read.csv() in base R, but the read_csv() in dplyr is faster and import everything as tibble table (an advanced kind of dataframe):\n\ndf &lt;- read.csv(\"data.csv\")\n\nNote that to have access to the data, you do not need to write the full path, you can simply press the key Tab inside the quotation mark of a\nDisplay a dataframe:\n\ndf\n\n        Date   Open   High    Low  Close   Volume Adj.Close\n1 2012-06-01 569.16 590.00 548.50 584.00 14077000    581.50\n2 2012-05-01 584.90 596.76 522.18 577.73 18827900    575.26\n3 2012-04-02 601.83 644.00 555.00 583.98 28759100    581.48\n4 2012-03-01 548.17 621.45 516.22 599.55 26486000    596.99\n5 2012-02-01 458.41 547.61 453.98 542.44 22001000    540.12\n6 2012-01-03 409.40 458.24 409.00 456.48 12949100    454.53\n\n\nDisplay the size of your dataframe:\n\ndim(df) # this is number of (rows, columns)\n\n[1] 6 7\n\nnrow(df) # Number of rows\n\n[1] 6\n\nncol(df) # Number of cols\n\n[1] 7\n\n\nDisplay the names of columns:\n\ncolnames(df)\n\n[1] \"Date\"      \"Open\"      \"High\"      \"Low\"       \"Close\"     \"Volume\"   \n[7] \"Adj.Close\"\n\n# or\nnames(df)\n\n[1] \"Date\"      \"Open\"      \"High\"      \"Low\"       \"Close\"     \"Volume\"   \n[7] \"Adj.Close\"\n\n\nCreate a new column the base R way:\n\n# compute the average between Open and Close\ndf$mean_value &lt;- (df$Open+df$Close)/2\ndf$mean_value\n\n[1] 576.580 581.315 592.905 573.860 500.425 432.940\n\n\nCreate a new column with Tidyverse (without pipe):\n\n# axis=0 refer to columns \ndf$mean_value &lt;- colMeans(select(df, Open, Close))\ndf$mean_value\n\n[1] 528.6450 557.3633 528.6450 557.3633 528.6450 557.3633\n\n\nR has a super power as a functional programming language. It can use pipes (|&gt; and %&gt;%). Those allows to pass the result of an operation to the next operation and therfore chain multiple operations. It allows to have a more readable code, easier to write and more composable. You can use 2 kinds of pipes:\n\nmagrittr pipe (%&gt;%): Powerful (can do more than the next one), it needs to be installed through a package of the Tidyverse (magrittr, dplyr, rvest, …).\nBase (|&gt;): useful, do not need any libraries\n\nSince we will use the dplyr, we will use magrittr pipe (%&gt;%). No need to write it, simply use the following shortcut Ctrl+Maj+M or Cmd+Maj+M. With a few try, it comes naturally. As said before the pipe use is to pass values through operations. For instance consider the following example printing the value of the variable a:\n\na &lt;- \"12\"\n\n# Normal way\nprint(a)\n\n[1] \"12\"\n\n# With a pipe\na %&gt;% print()\n\n[1] \"12\"\n\n\nThey both give the same result. However the pipe version is longer. The strength of the secon approach appear when we need more than one operation. For instance, imagine converting a to an integer before printing it:\n\n# Normal way\nprint(as.integer(a))\n\n[1] 12\n\n# With pipes\na %&gt;% as.integer() %&gt;% print()\n\n[1] 12\n\n\nThe first one still looks more concise, but it is in fact slower and harder to write. You have to start by the print() statement (the end) and go backward until the beginning which is counter-intuitive. While with the pipe approach you can consider %&gt;% as a “and”. Writting it looks like, “I start with the variable ‘a’ AND I convert it into an integer AND I print it”.\nThis method scale also really well. Lets take a more extreme example. With the following steps:\n\nTranslate “a” into an integer\nCompute the log10\nCompute the square root\nPrint it\n\n\n# Normal way\nprint(sqrt(log10(as.integer(a))))\n\n[1] 1.038836\n\n# with pipes\na %&gt;% \n  as.integer() %&gt;% \n  log10() %&gt;% \n  sqrt() %&gt;% \n  print()\n\n[1] 1.038836\n\n\nNote that in this code we can put expressions following a pipe in the next line for more readability. But the whole code is considered by R as only one line. So, you can run the code from whatever line and it will run the whole expression.\nIt is even more complicated with the normal way and less readable. While with pipe you can read it like sentences connected by “AND”. Generally, when operation start to stack, we desagreggate them into multiple steps like this:\n\na &lt;- as.integer(a)\na &lt;- log10(a)\na &lt;- sqrt(a)\nprint(a)\n\n[1] 1.038836\n\n\nThis approach is more readable. The issue with this approach is that we have changed the value of a multiple time. But if we want to go back in a step, we need to re-run all the step before. It seems like nothing, but in a longer code and more complex, you can easily be overwhelmed and lost track of the state of your variable. You could improve that by storing new values in different variables:\n\na &lt;- 12\n\na1 &lt;- as.integer(a)\na2 &lt;- log10(a1)\na3 &lt;- sqrt(a2)\nprint(a3)\n\n[1] 1.038836\n\n\nBut then we can create unecessary intermediate variables that have only no usage beside storing value that have no use in the rest of the code. Furthermore, both version are slower to write than the pipe version. Another advantage of the pipe function is that we can iteratively write the code and add and remove steps as needed. The when you are satisfied with the result, you can store it in a final variable:\n\nresult &lt;- \n  a %&gt;% \n  as.integer() %&gt;% \n  log10() %&gt;% \n  sqrt() %&gt;% \n  print()\n\n[1] 1.038836\n\n\nThe pipes in dplyr allows to manipulate data frames steps by steps in a readable manner. But function from the tidyverse bring another strength. They always return data frame, makin the iteratino even easier since you keep everything, so modifying a single column won’t stop you to do other manipulation with other columns in the same chain. Let’s take the earlier example from the df dataframe and compute the mean of Open and Close columns.\n\n# compute the average between Open and Close\ndf$mean_value &lt;- (df$Open+df$Close)/2\n\n# With pipe\ndf %&gt;% \n  mutate(mean_value = (Open+Close)/2)\n\n        Date   Open   High    Low  Close   Volume Adj.Close mean_value\n1 2012-06-01 569.16 590.00 548.50 584.00 14077000    581.50    576.580\n2 2012-05-01 584.90 596.76 522.18 577.73 18827900    575.26    581.315\n3 2012-04-02 601.83 644.00 555.00 583.98 28759100    581.48    592.905\n4 2012-03-01 548.17 621.45 516.22 599.55 26486000    596.99    573.860\n5 2012-02-01 458.41 547.61 453.98 542.44 22001000    540.12    500.425\n6 2012-01-03 409.40 458.24 409.00 456.48 12949100    454.53    432.940\n\n\nThe last expression return a data frame and added the new column to the end. Again you are free to put the new result in a new object. Then you can select specific rows:\n\n# Filtering\ndf %&gt;% \n  filter(Close &gt; Open) # keep row when Close is bigger than Open\n\n        Date   Open   High    Low  Close   Volume Adj.Close mean_value\n1 2012-06-01 569.16 590.00 548.50 584.00 14077000    581.50    576.580\n2 2012-03-01 548.17 621.45 516.22 599.55 26486000    596.99    573.860\n3 2012-02-01 458.41 547.61 453.98 542.44 22001000    540.12    500.425\n4 2012-01-03 409.40 458.24 409.00 456.48 12949100    454.53    432.940\n\n\nWe can combine it with the previous operation to chain everything. The new dataset has a new column mean_value and is filterd to keep row when Close is bigger than Open:\n\n# Filtering after mutating\ndf %&gt;% \n  mutate(mean_value = (Open+Close)/2) %&gt;% \n  filter(Close &gt; Open)\n\n        Date   Open   High    Low  Close   Volume Adj.Close mean_value\n1 2012-06-01 569.16 590.00 548.50 584.00 14077000    581.50    576.580\n2 2012-03-01 548.17 621.45 516.22 599.55 26486000    596.99    573.860\n3 2012-02-01 458.41 547.61 453.98 542.44 22001000    540.12    500.425\n4 2012-01-03 409.40 458.24 409.00 456.48 12949100    454.53    432.940\n\n\nYou can display the summary statistic of a given variable using the summary() function.\n\nsummary(df$High)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  458.2   558.2   593.4   576.3   615.3   644.0 \n\n\nYou can do the same with the whole data frame:\n\nsummary(df)\n\n     Date                Open            High            Low       \n Length:6           Min.   :409.4   Min.   :458.2   Min.   :409.0  \n Class :character   1st Qu.:480.9   1st Qu.:558.2   1st Qu.:469.5  \n Mode  :character   Median :558.7   Median :593.4   Median :519.2  \n                    Mean   :528.6   Mean   :576.3   Mean   :500.8  \n                    3rd Qu.:581.0   3rd Qu.:615.3   3rd Qu.:541.9  \n                    Max.   :601.8   Max.   :644.0   Max.   :555.0  \n     Close           Volume           Adj.Close       mean_value   \n Min.   :456.5   Min.   :12949100   Min.   :454.5   Min.   :432.9  \n 1st Qu.:551.3   1st Qu.:15264725   1st Qu.:548.9   1st Qu.:518.8  \n Median :580.9   Median :20414450   Median :578.4   Median :575.2  \n Mean   :557.4   Mean   :20516683   Mean   :555.0   Mean   :543.0  \n 3rd Qu.:584.0   3rd Qu.:25364750   3rd Qu.:581.5   3rd Qu.:580.1  \n Max.   :599.5   Max.   :28759100   Max.   :597.0   Max.   :592.9  \n\n\nYou can also request specific statistics using the corresponding functions:\n\nmean(df$Volume)\n\n[1] 20516683\n\nmedian(df$Volume)\n\n[1] 20414450\n\nmin(df$Volume)\n\n[1] 12949100\n\nmax(df$Volume)\n\n[1] 28759100\n\nquantile(df$Volume)\n\n      0%      25%      50%      75%     100% \n12949100 15264725 20414450 25364750 28759100 \n\nquantile(df$Volume, 0.95)\n\n     95% \n28190825 \n\n\nChaining is useful when we need to answer a specific question without changing the data frame. For instance, you can find the date when Volume was highest:\n\ndf %&gt;% \n  filter(Volume == max(Volume)) %&gt;% \n  select(Date)\n\n        Date\n1 2012-04-02\n\n\nBut sometimes, it is faster to use base R for simple isolated operations. For instance, the Date column in df is note in the date format but in text format. We can change it in one line:\n\n# Check the type of Date\nclass(df$Date)\n\n[1] \"character\"\n\n# Change the type of Date as a date\ndf$Date &lt;- as.Date(df$Date)\n\n# Check the type of Date\nclass(df$Date) \n\n[1] \"Date\"\n\n\nIf you want to extract the specific value and not a data frame, you can use the pull() function instead of select():\n\ndf %&gt;% \n  filter(Volume == max(Volume)) %&gt;% \n  pull(Date)\n\n[1] \"2012-04-02\"\n\n\nPlots are very easy in ggplot2 with qplot()! But there is another notation that is more used, the layered one:\n\n# Easy way\nqplot(Date, Open, data = df, geom = \"line\")\n\n\n\n\n\n\n\n# Layered way\ndf %&gt;% \n  ggplot(aes(x=Date, y=Open)) +\n  geom_line()\n\n\n\n\n\n\n\n\nIt looks longer, but it is more flexible. It works like layers. Here is a short explanation of each part: - ggplot() initiate te figure - aes() map the column to different dimensions (x/y axis, color, line type, size, etc.) - geom_*() create a type of geometry - geom_line() create line using value from x and y\nThe aes() part is quite movable. You can decide to put it in a different place to update the graph:\n\n# Different place, same result\ndf %&gt;% \n  ggplot(aes(x=Date)) +\n  geom_line(aes(y=Open))\n\n\n\n\n\n\n\n\nWe get the same result. The advantage of using such an approach is that we can really be flexible in the parameter that we are using and also the number of layer that we can create:\n\ndf %&gt;% \n  ggplot(aes(x=Date)) + \n  geom_line(aes(y=Open, color=\"Open\")) +\n  geom_line(aes(y=High, color=\"High\")) +\n  geom_line(aes(y=Low, color=\"Low\")) + \n  geom_line(aes(y=Close, color=\"Close\")) +\n  theme_bw() # Add a new theme\n\n\n\n\n\n\n\n\nJust by changing the geom, we can have a large variety of plots. For instance here is a boxplot:\n\ndf %&gt;% \n  ggplot(aes(x=Close)) + \n  geom_boxplot()\n\n\n\n\n\n\n\n\nNote that the parameters are not compulsary as long as we keep theme in the righ order (x then y):\n\n# Parameters\ndf %&gt;% \n  ggplot(aes(x=Close)) + \n  geom_boxplot()\n\n\n\n\n\n\n\n# No parameters\ndf %&gt;% \n  ggplot(aes(Close)) + \n  geom_boxplot()\n\n\n\n\n\n\n\n\nKeeping the same structure, we can have different plots by changing the geom:\n\n# Boxplot\ndf %&gt;% \n  ggplot(aes(Close)) + \n  geom_boxplot()\n\n\n\n\n\n\n\n# Histogram\ndf %&gt;% \n  ggplot(aes(Close)) + \n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n# Density\ndf %&gt;% \n  ggplot(aes(Close)) + \n  geom_density()\n\n\n\n\n\n\n\n\nggplot2 is a whole subject by itself and the Tidyverse ecosystem (dplyr, ggplot2, readr, …) is an even bigger topic. We won’t talk about it here, but in future tutorials."
  }
]